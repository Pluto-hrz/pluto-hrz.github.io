<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++对BMP文件操作</title>
      <link href="/2020/09/04/C++%E5%AF%B9bmp%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/09/04/C++%E5%AF%B9bmp%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 你输入的密码有误, 请重新输入." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">由于本篇博客涉及的代码部分尚未完善或者代码中涉及个人数据, 所以该博客暂未对公众开放, 输入博客密码才能访问, 如需技术交流联系博主.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0dea3d5af9edc4d1456d9ca8963c46ea1d57410925bc42f7535f2621d2e72d52"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> bmp文件 </tag>
            
            <tag> 文件操作 </tag>
            
            <tag> 图片 </tag>
            
            <tag> 类 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的图床上传工具-Picgo</title>
      <link href="/2020/07/31/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7-Picgo/"/>
      <url>/2020/07/31/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7-Picgo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="好用的图床上传工具-Picgo"><a href="#好用的图床上传工具-Picgo" class="headerlink" title="好用的图床上传工具-Picgo"></a>好用的图床上传工具-Picgo</h1><p>Picgo是一款非常好用的图片上传工具，无论是mac还是windows都有相应的软件安装包供我们使用，地址链接：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a> 选择最新版的安装包即可，我是windows用户所以选择了<code>.exe</code>结尾的安装包。</p><h2 id="一、配置图床"><a href="#一、配置图床" class="headerlink" title="一、配置图床"></a>一、配置图床</h2><p>打开软件—&gt;图床设置—&gt;选择相应的图床进行设置。</p><blockquote><p>我个人只设置了七牛云图床和Github图床，所以其他图床暂无教程。</p></blockquote><h3 id="1、七牛云图床"><a href="#1、七牛云图床" class="headerlink" title="1、七牛云图床"></a>1、七牛云图床</h3><ul><li><ol><li>设定ackey和sekey，在七牛云的个人中心中就可以轻松找到。</li><li>设定存储空间名，在存储空间列表中就可以找到，eg：cdn1，photos。</li><li>访问网址，你自己的临时域名地址或者如果已经配合了自己的域名，eg：<a href="http://image.tooltool.club/" target="_blank" rel="noopener">http://image.tooltool.club/</a></li><li>确认存储区域，华东：z0，华北：z1，华南：z2，北美：na0，东南亚：as0。</li><li>网址后缀和存储路径可以按照需求选填。</li></ol></li></ul><h3 id="2、Github图床"><a href="#2、Github图床" class="headerlink" title="2、Github图床"></a>2、Github图床</h3><ul><li><ol><li>登陆 <em>GitHub</em>，新建一个仓库或者也可以使用一个已有仓库。</li><li>创建好后，需要在 GitHub 上生成一个 <em>token</em> 以便 PicGo 来操作我们的仓库，来到个人中心，选择 <em>Developer settings</em> 就能看到 <em>Personal access tokens</em>，我们在这里创建需要的 <em>token</em>。</li><li>点击 Generate new token 创建一个新 token，选择 repo，同时它会把包含其中的都会勾选上，我们勾选这些就可以了。然后拉到最下方点击绿色按钮，Generate token 即可。</li><li>仓库名格式为 <code>用户名/仓库名</code>；分支名：master；token：刚才创建的token。</li></ol></li></ul><h3 id="3、SM-MS图床"><a href="#3、SM-MS图床" class="headerlink" title="3、SM.MS图床"></a>3、SM.MS图床</h3><h3 id="4、腾讯云COS"><a href="#4、腾讯云COS" class="headerlink" title="4、腾讯云COS"></a>4、腾讯云COS</h3><h3 id="5、阿里云OSS"><a href="#5、阿里云OSS" class="headerlink" title="5、阿里云OSS"></a>5、阿里云OSS</h3><h3 id="6、Imgurl图床"><a href="#6、Imgurl图床" class="headerlink" title="6、Imgurl图床"></a>6、Imgurl图床</h3><h3 id="7、又拍云图床"><a href="#7、又拍云图床" class="headerlink" title="7、又拍云图床"></a>7、又拍云图床</h3><h2 id="二、如何使用"><a href="#二、如何使用" class="headerlink" title="二、如何使用"></a>二、如何使用</h2><h3 id="1、直接使用"><a href="#1、直接使用" class="headerlink" title="1、直接使用"></a>1、直接使用</h3><ul><li>点击上传区—&gt;选择其中一个默认图床—&gt;将文件拖拽到拖拽框内即可完成上传。</li><li>快捷上传—&gt;复制完剪切板图片或URL—&gt;在快捷上传中点击对应的按钮。</li><li>输出的地址链接直接在剪切板上，可以选择输出的格式类型为Markdown、HTML、URL、UBB、Custom。</li></ul><p><a href="http://image.tooltool.club/image-20200731181858095.png" data-fancybox="group" data-caption="image-20200731181858095" class="fancybox"><img alt="image-20200731181858095" title="image-20200731181858095" data-src="http://image.tooltool.club/image-20200731181858095.png" class="lazyload"></a></p><h3 id="2、绑定-Typora"><a href="#2、绑定-Typora" class="headerlink" title="2、绑定 Typora"></a>2、绑定 Typora</h3><p>在Typora中，选择文件—&gt;偏好设置—&gt;图像—&gt;在上传服务选择Picgo(app)—&gt;设置Picgo路径选择Picgo的安装地址。</p><p>配置完成后，可以对于Typora打开的Markdown文件中的图片点击右键即可直接上传图片，也可以将剪切板图片粘贴到Typora文件中直接上传，对于平时使用Markdown写博客或者笔记的同学将会提供很大的方便。</p><p><a href="http://image.tooltool.club/image-20200731181935192.png" data-fancybox="group" data-caption="image-20200731181935192" class="fancybox"><img alt="image-20200731181935192" title="image-20200731181935192" data-src="http://image.tooltool.club/image-20200731181935192.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> Picgo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Picgo </tag>
            
            <tag> 图床工具 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 多线程</title>
      <link href="/2020/07/30/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/07/30/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-多线程"><a href="#Python-多线程" class="headerlink" title="Python 多线程"></a>Python 多线程</h1><h2 id="一、线程的介绍"><a href="#一、线程的介绍" class="headerlink" title="一、线程的介绍"></a>一、线程的介绍</h2><h3 id="1、线程的定义"><a href="#1、线程的定义" class="headerlink" title="1、线程的定义"></a>1、线程的定义</h3><p>​        线程（Thread）也叫轻量级进程，是操作系统能够进行运算调度的最小单位，它被包涵在进程之中，是进程中的实际运作单位。线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。</p><p>​        线程在执行过程中与进程还是有区别的。每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。</p><h3 id="2、多线程的优点"><a href="#2、多线程的优点" class="headerlink" title="2、多线程的优点"></a>2、多线程的优点</h3><p>线程在程序中是独立的、并发的执行流。与分隔的进程相比，进程中线程之间的隔离程度要小，它们共享内存、文件句柄和其他进程应有的状态。</p><p>因为线程的划分尺度小于进程，使得多线程程序的并发性高。进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><p>线程比进程具有更高的性能，这是由于同一个进程中的线程都有共性多个线程共享同一个进程的虚拟空间。线程共享的环境包括进程代码段、进程的公有数据等，利用这些共享的数据，线程之间很容易实现通信。</p><p>操作系统在创建进程时，必须为该进程分配独立的内存空间，并分配大量的相关资源，但创建线程则简单得多。因此，使用多线程来实现并发比使用多进程的性能要高得多。</p><p>总结起来，使用多线程编程具有如下几个优点：</p><ul><li>进程之间不能共享内存，但线程之间共享内存非常容易。</li><li>操作系统在创建进程时，需要为该进程重新分配系统资源，但创建线程的代价则小得多。因此，使用多线程来实现多任务并发执行比使用多进程的效率高。</li><li>Python 语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化了 Python 的多线程编程。</li></ul><h2 id="二、线程的实现"><a href="#二、线程的实现" class="headerlink" title="二、线程的实现"></a>二、线程的实现</h2><h3 id="1、-thread模块"><a href="#1、-thread模块" class="headerlink" title="1、_thread模块"></a>1、_thread模块</h3><p>在<code>_thread</code>模块中通过<code>start_new_thread()</code>函数来产生新线程，同时这也是<code>_thread</code>模块的核心函数，使用方法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_thread.start_new_thread(function, args, kwargs)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>function</td><td>线程函数</td></tr><tr><td>args</td><td>传递给线程函数的参数,他必须是个tuple类型</td></tr><tr><td>kwargs</td><td>可选参数</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为线程定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, sleep_time, times)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(times):</span><br><span class="line">        time.sleep(sleep_time)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: <span class="subst">&#123;time.ctime(time.time())&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个线程</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    _thread.start_new_thread(print_time, (<span class="string">"Thread-1"</span>, <span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">    _thread.start_new_thread(print_time, (<span class="string">"Thread-2"</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Error: 无法启动线程"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><pre><code>Thread-1: Thu Jul 30 22:49:47 2020Thread-2: Thu Jul 30 22:49:48 2020Thread-1: Thu Jul 30 22:49:48 2020Thread-1: Thu Jul 30 22:49:49 2020Thread-2: Thu Jul 30 22:49:50 2020Thread-1: Thu Jul 30 22:49:50 2020Thread-1: Thu Jul 30 22:49:51 2020Thread-2: Thu Jul 30 22:49:52 2020Thread-1: Thu Jul 30 22:49:52 2020</code></pre><blockquote><p>此时的while 1: pass是不可以省略的，因为while具有阻断主线程的作用，当while条件成立是将会执行完之前的线程，如果去掉的话啊，可能会导致上述线程无法执行。</p><p>不过这种方式已经很落后了，所以我比较建议使用threading模块。虽然标准库给出了 _thread 和 threading 提供对线程的支持，但是_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。</p></blockquote><h4 id="常用线程函数"><a href="#常用线程函数" class="headerlink" title="常用线程函数"></a>常用线程函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>start_new_thread(function,args,kwargs=None)</td><td>派生一个新的线程，使用给定的args和可选的kwargs来执行function</td></tr><tr><td>allocate_lock()</td><td>分配LockType对象</td></tr><tr><td>exit()</td><td>退出线程指令</td></tr></tbody></table><h4 id="LockType锁对象的方法"><a href="#LockType锁对象的方法" class="headerlink" title="LockType锁对象的方法"></a>LockType锁对象的方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>acquire(wait=None)</td><td>尝试获取锁对象</td></tr><tr><td>locked()</td><td>如果获取了锁对象则返回True，否则返回False</td></tr><tr><td>release()</td><td>释放锁</td></tr></tbody></table><h3 id="2、threading模块"><a href="#2、threading模块" class="headerlink" title="2、threading模块"></a>2、threading模块</h3><blockquote><p>在本博客后续的讲解中，我们将会更多地使用Treading模块来进行讲解。</p></blockquote><h4 id="threading方法"><a href="#threading方法" class="headerlink" title="threading方法"></a>threading方法</h4><p>threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法：</p><ul><li>threading.currentThread(): 返回当前的线程变量。</li><li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li><li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li></ul><h4 id="Thread类对象"><a href="#Thread类对象" class="headerlink" title="Thread类对象"></a>Thread类对象</h4><p>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法：</p><ul><li><p><strong>run():</strong> 用以表示线程活动的方法。</p></li><li><p><strong>start():</strong> 启动线程活动。</p></li><li><p><strong>join([timeout]):</strong> 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</p></li><li><p><strong>isAlive():</strong> 返回线程是否活动的。</p></li><li><p><strong>getName():</strong> 返回线程名。</p></li><li><p><strong>setName():</strong> 设置线程名。</p></li></ul><h4 id="普通创建方式"><a href="#普通创建方式" class="headerlink" title="普通创建方式"></a>普通创建方式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为线程定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, sleep_time, times)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(times):</span><br><span class="line">        time.sleep(sleep_time)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: <span class="subst">&#123;time.ctime(time.time())&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个新线程</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    thread1 = threading.Thread(target=print_time, args=(<span class="string">"Thread-1"</span>, <span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">    thread2 = threading.Thread(target=print_time, args=(<span class="string">"Thread-2"</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Main thread end.Thread-1: Fri Jul 31 12:28:22 2020Thread-2: Fri Jul 31 12:28:23 2020Thread-1: Fri Jul 31 12:28:23 2020Thread-1: Fri Jul 31 12:28:24 2020Thread-2: Fri Jul 31 12:28:25 2020Thread-1: Fri Jul 31 12:28:25 2020Thread-1: Fri Jul 31 12:28:26 2020Thread-2: Fri Jul 31 12:28:27 2020Thread-1: Fri Jul 31 12:28:27 2020</code></pre><h4 id="自定义线程"><a href="#自定义线程" class="headerlink" title="自定义线程"></a>自定义线程</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName, sleep_time, times)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadName = threadName</span><br><span class="line">        self.sleep_time = sleep_time</span><br><span class="line">        self.times = times</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.threadName + <span class="string">" start."</span>)</span><br><span class="line">        print_time(self.threadName, self.sleep_time, self.times)</span><br><span class="line">        print(self.threadName + <span class="string">" end."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, sleep_time, times)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(times):</span><br><span class="line">        time.sleep(sleep_time)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: <span class="subst">&#123;time.ctime(time.time())&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建新线程</span></span><br><span class="line">    thread1 = myThread(<span class="string">"Thread-1"</span>, <span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    thread2 = myThread(<span class="string">"Thread-2"</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 开启新线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Thread-1 start.Thread-2 start.Main thread end.Thread-1: Fri Jul 31 12:33:40 2020Thread-2: Fri Jul 31 12:33:41 2020Thread-1: Fri Jul 31 12:33:41 2020Thread-1: Fri Jul 31 12:33:42 2020Thread-1: Fri Jul 31 12:33:43 2020Thread-2: Fri Jul 31 12:33:43 2020Thread-1: Fri Jul 31 12:33:44 2020Thread-2: Fri Jul 31 12:33:45 2020Thread-2 end.Thread-1: Fri Jul 31 12:33:45 2020Thread-1 end.</code></pre><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p>使用setDaemon(True)把所有的子线程都变成了主线程的守护线程，因此当主进程结束后，子线程也会随之结束，所以当主线程结束后，整个程序就退出了。</p><blockquote><p>此时我们很容易发现，设置守护线程之后，当主线程结束时，子线程也将立即结束，不再执行。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为线程定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, sleep_time, times)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(times):</span><br><span class="line">        time.sleep(sleep_time)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: <span class="subst">&#123;time.ctime(time.time())&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建两个新线程</span></span><br><span class="line">    thread1 = threading.Thread(target=print_time, args=(<span class="string">"Thread-1"</span>, <span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">    thread2 = threading.Thread(target=print_time, args=(<span class="string">"Thread-2"</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="comment"># 把子进程设置为守护线程，必须在start()之前设置</span></span><br><span class="line">    thread1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    thread2.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Main thread end.</code></pre><h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join() 方法"></a>join() 方法</h4><p>为了让守护线程执行结束之后，主线程再结束，我们可以使用join方法，让主线程等待子线程执行完成后再结束。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为线程定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, sleep_time, times)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(times):</span><br><span class="line">        time.sleep(sleep_time)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: <span class="subst">&#123;time.ctime(time.time())&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建两个新线程</span></span><br><span class="line">    thread1 = threading.Thread(target=print_time, args=(<span class="string">"Thread-1"</span>, <span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">    thread2 = threading.Thread(target=print_time, args=(<span class="string">"Thread-2"</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="comment"># 把子进程设置为守护线程，必须在start()之前设置</span></span><br><span class="line">    thread1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    thread2.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Thread-1: Fri Jul 31 13:28:48 2020Thread-2: Fri Jul 31 13:28:49 2020Thread-1: Fri Jul 31 13:28:49 2020Thread-1: Fri Jul 31 13:28:50 2020Thread-2: Fri Jul 31 13:28:51 2020Thread-1: Fri Jul 31 13:28:51 2020Thread-1: Fri Jul 31 13:28:52 2020Thread-2: Fri Jul 31 13:28:53 2020Thread-1: Fri Jul 31 13:28:53 2020Main thread end.</code></pre><h2 id="三、线程同步"><a href="#三、线程同步" class="headerlink" title="三、线程同步"></a>三、线程同步</h2><h3 id="1、多线程共享全局变量"><a href="#1、多线程共享全局变量" class="headerlink" title="1、多线程共享全局变量"></a>1、多线程共享全局变量</h3><p>线程是进程的执行单元，进程是系统分配资源的最小单位，所以在同一个进程中的多线程是共享资源的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(threadName)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> number</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: The number is <span class="subst">&#123;number&#125;</span>.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(threadName)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> number</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: The number is <span class="subst">&#123;number&#125;</span>.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建全局变量</span></span><br><span class="line">    number = <span class="number">6</span></span><br><span class="line">    <span class="comment"># 创建两个新线程</span></span><br><span class="line">    thread1 = threading.Thread(target=add_number, args=(<span class="string">"Thread-1"</span>,))</span><br><span class="line">    thread2 = threading.Thread(target=print_number, args=(<span class="string">"Thread-2"</span>,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line">    thread2.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Thread-1: The number is 8.Thread-2: The number is 8.Main thread end.</code></pre><h3 id="2、线程同步"><a href="#2、线程同步" class="headerlink" title="2、线程同步"></a>2、线程同步</h3><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p><p>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：</p><p>有两个变量a和b，两个线程①和②，线程①的作用是改变a的值，线程②的作用是改变b的值，这样不管这两个线程怎么运行，a和b的值都不互相干扰。但是如果线程①和线程②的作用都是操作同一个变量c，我们为了要保证c的值得精确改动，我们一般要先让线程①去操作c，线程①执行完之后再让线程②去操作c，在这个过程中，线程①操作的时候线程②是不允许对c做改动的，这个时候我们就用Threading库中的线程锁了。对于变量c就像厕所单间，一个人进去之后要把门锁了（acquire()），以确保第二个人不能进去，等第一个人出来之后（release()），第二个人才能进去，这个锁就是厕所门锁，把厕所单间锁起来不让其他人可以操作。同理，python中的线程锁，就是线程①把变量c锁起来，等线程①操作完c之后再release，然后接着线程②就acquire，线程②操作完c之后也会release，这就是线程锁。</p><h3 id="3、互斥锁-Lock"><a href="#3、互斥锁-Lock" class="headerlink" title="3、互斥锁 (Lock)"></a>3、互斥锁 (Lock)</h3><p>由于线程之间是进行随机调度，如果有多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期，我们也称此为“线程不安全”，为了防止这样的情况发生，就出现了互斥锁(Lock)</p><p>Lock() 加载线程的锁对象，是一个基本的锁对象，一次只能一个锁定，其余锁请求，需等待锁释放后才能获取。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadName = threadName</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.threadName + <span class="string">" start."</span>)</span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        print_number(self.threadName)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        threadLock.release()</span><br><span class="line">        print(self.threadName + <span class="string">" end."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(threadName)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> number</span><br><span class="line">    number += <span class="number">6</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: Thr number is <span class="subst">&#123;number&#125;</span>.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    number = <span class="number">6</span></span><br><span class="line">    threadLock = threading.Lock()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建多个新线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        thread = myThread(<span class="string">f'Thread-<span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">        threads.append(thread)</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Thread-0 start.Thread-0: Thr number is 12.Thread-0 end.Thread-1 start.Thread-1: Thr number is 18.Thread-1 end.Thread-2 start.Thread-2: Thr number is 24.Thread-2 end.Thread-3 start.Thread-3: Thr number is 30.Thread-3 end.Thread-4 start.Thread-4: Thr number is 36.Thread-4 end.Thread-5 start.Thread-5: Thr number is 42.Thread-5 end.Main thread end.</code></pre><h3 id="4、递归锁-RLock"><a href="#4、递归锁-RLock" class="headerlink" title="4、递归锁 (RLock)"></a>4、递归锁 (RLock)</h3><p>RLcok类的用法和Lock类一模一样，但它支持嵌套，在多个锁没有释放的时候一般会使用RLcok类。</p><p>RLock() 多重锁，在同一线程中可用被多次acquire。如果使用RLock，那么acquire和release必须成对出现，调用了n次acquire锁请求，则必须调用n次的release才能在线程中释放锁对象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadName = threadName</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.threadName + <span class="string">" start."</span>)</span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        print_number(self.threadName)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        threadLock.release()</span><br><span class="line">        print(self.threadName + <span class="string">" end."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(threadName)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> number</span><br><span class="line">    number += <span class="number">6</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: Thr number is <span class="subst">&#123;number&#125;</span>.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    number = <span class="number">6</span></span><br><span class="line">    threadLock = threading.RLock()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建多个新线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        thread = myThread(<span class="string">f'Thread-<span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">        threads.append(thread)</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Thread-0 start.Thread-0: Thr number is 12.Thread-0 end.Thread-1 start.Thread-1: Thr number is 18.Thread-1 end.Thread-2 start.Thread-2: Thr number is 24.Thread-2 end.Thread-3 start.Thread-3: Thr number is 30.Thread-3 end.Thread-4 start.Thread-4: Thr number is 36.Thread-4 end.Thread-5 start.Thread-5: Thr number is 42.Thread-5 end.Main thread end.</code></pre><h3 id="5、信号量-BoundedSemaphore"><a href="#5、信号量-BoundedSemaphore" class="headerlink" title="5、信号量 (BoundedSemaphore)"></a>5、信号量 (BoundedSemaphore)</h3><p>互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadName = threadName</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.threadName + <span class="string">" start."</span>)</span><br><span class="line">        print_number(self.threadName)</span><br><span class="line">        print(self.threadName + <span class="string">" end."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(threadName)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> number</span><br><span class="line">    <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">    semaphore.acquire()</span><br><span class="line">    number += <span class="number">6</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">    semaphore.release()</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;threadName&#125;</span>: Thr number is <span class="subst">&#123;number&#125;</span>.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    number = <span class="number">6</span></span><br><span class="line">    semaphore = threading.BoundedSemaphore(<span class="number">3</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建多个新线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        thread = myThread(<span class="string">f'Thread-<span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">        threads.append(thread)</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    print(<span class="string">"Main thread end."</span>)</span><br></pre></td></tr></table></figure></div><pre><code>Thread-0 start.Thread-1 start.Thread-2 start.Thread-3 start.Thread-4 start.Thread-5 start.Thread-1: Thr number is 24.Thread-0: Thr number is 30.Thread-2: Thr number is 30.Thread-1 end.Thread-0 end.Thread-2 end.Thread-3: Thr number is 42.Thread-3 end.Thread-4: Thr number is 42.Thread-5: Thr number is 42.Thread-5 end.Thread-4 end.Main thread end.</code></pre><h3 id="6、事件-Event"><a href="#6、事件-Event" class="headerlink" title="6、事件 (Event)"></a>6、事件 (Event)</h3><p>python线程的事件用于主线程控制其他线程的执行，事件是一个简单的线程同步对象，其主要提供以下几个方法：</p><ul><li>clear 将flag设置为“False”</li><li>set 将flag设置为“True”</li><li>is_set 判断是否设置了flag</li><li>wait 会一直监听flag，如果没有检测到flag就一直处于阻塞状态</li></ul><p>事件处理的机制：全局定义了一个“Flag”，当flag值为“False”，那么event.wait()就会阻塞，当flag值为“True”，那么event.wait()便不再阻塞。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用Event类模拟红绿灯</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 初始值为绿灯</span></span><br><span class="line">    event.set()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;= <span class="number">10</span>:</span><br><span class="line">            <span class="comment"># 红灯，清除标志位</span></span><br><span class="line">            event.clear()</span><br><span class="line">            print(<span class="string">"\33[31;1mred light is on...\033[0m"</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="comment"># 绿灯，设置标志位</span></span><br><span class="line">            event.set() </span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"\033[32;1mgreen light is on...\033[0m"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():</span><br><span class="line">            print(<span class="string">"[%s] running..."</span> % name)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"[%s] sees red light, waiting..."</span> % name)</span><br><span class="line">            event.wait()</span><br><span class="line">            print(<span class="string">"[%s] green light is on, start going..."</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    light = threading.Thread(target=lighter, )</span><br><span class="line">    light.start()</span><br><span class="line">    car = threading.Thread(target=car, args=(<span class="string">"Car"</span>,))</span><br><span class="line">    car.start()</span><br></pre></td></tr></table></figure></div><pre><code>green light is on...[Car] running...green light is on...[Car] running...green light is on...[Car] running...[Car] running...green light is on...green light is on...[Car] running...[Car] running...green light is on...red light is on...[Car] sees red light, waiting...red light is on...red light is on...red light is on...red light is on...[Car] green light is on, start going...[Car] running...green light is on...[Car] running...[Car] running...green light is on...green light is on...[Car] running... green light is on...[Car] running.........</code></pre><h2 id="四、线程优先级队列"><a href="#四、线程优先级队列" class="headerlink" title="四、线程优先级队列"></a>四、线程优先级队列</h2><p>Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出）队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。</p><p>这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。</p><p>Queue 模块中的常用方法：</p><ul><li>Queue.qsize() 返回队列的大小</li><li>Queue.empty() 如果队列为空，返回True,反之False</li><li>Queue.full() 如果队列满了，返回True,反之False</li><li>Queue.full 与 maxsize 大小对应</li><li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li><li>Queue.get_nowait() 相当Queue.get(False)</li><li>Queue.put(item) 写入队列，timeout等待时间</li><li>Queue.put_nowait(item) 相当Queue.put(item, False)</li><li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li><li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li></ul><h3 id="1、FIFO-先入先出"><a href="#1、FIFO-先入先出" class="headerlink" title="1、FIFO (先入先出)"></a>1、FIFO (先入先出)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    queue = queue.Queue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        queue.put(i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        value = queue.get()</span><br><span class="line">        print(<span class="string">f'The <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>\'s number is <span class="subst">&#123;value&#125;</span>.'</span>)</span><br></pre></td></tr></table></figure></div><pre><code>The 1&apos;s number is 1.The 2&apos;s number is 2.The 3&apos;s number is 3.The 4&apos;s number is 4.The 5&apos;s number is 5.</code></pre><h3 id="2、LIFO-后入先出"><a href="#2、LIFO-后入先出" class="headerlink" title="2、LIFO (后入先出)"></a>2、LIFO (后入先出)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    queue = queue.LifoQueue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        queue.put(i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        value = queue.get()</span><br><span class="line">        print(<span class="string">f'The <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>\'s number is <span class="subst">&#123;value&#125;</span>.'</span>)</span><br></pre></td></tr></table></figure></div><pre><code>The 1&apos;s number is 5.The 2&apos;s number is 4.The 3&apos;s number is 3.The 4&apos;s number is 2.The 5&apos;s number is 1.</code></pre><h3 id="3、Priority-数据可设置优先级"><a href="#3、Priority-数据可设置优先级" class="headerlink" title="3、Priority (数据可设置优先级)"></a>3、Priority (数据可设置优先级)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    queue = queue.PriorityQueue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        queue.put((i + <span class="number">1</span>, <span class="string">'a'</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        queue.put((i + <span class="number">1</span>, <span class="string">'b'</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        value = queue.get()</span><br><span class="line">        print(<span class="string">f'The <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>\'s number is <span class="subst">&#123;value&#125;</span>.'</span>)</span><br></pre></td></tr></table></figure></div><pre><code>The 1&apos;s number is (1, &apos;a&apos;).The 2&apos;s number is (1, &apos;b&apos;).The 3&apos;s number is (2, &apos;a&apos;).The 4&apos;s number is (2, &apos;b&apos;).The 5&apos;s number is (3, &apos;a&apos;).The 6&apos;s number is (3, &apos;b&apos;).The 7&apos;s number is (4, &apos;a&apos;).The 8&apos;s number is (4, &apos;b&apos;).</code></pre><h3 id="4、queue-模块"><a href="#4、queue-模块" class="headerlink" title="4、queue 模块"></a>4、queue 模块</h3><h4 id="maxsize"><a href="#maxsize" class="headerlink" title="maxsize"></a>maxsize</h4><p>maxsize 是实例化 Queue 类时的一个参数，默认为0，Queue(maxsize=0) 可以控制队列中数据的容量。</p><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Queue.put(block=<span class="literal">True</span>, timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div><ul><li><p><code>block</code> 用于设置是否阻塞，Queue.put(block=True, timeout=None)</p></li><li><p><code>timeout</code> 用于设置阻塞时等待时长</p></li></ul><h5 id="①阻塞"><a href="#①阻塞" class="headerlink" title="①阻塞"></a>①阻塞</h5><p>当队列满了之后，put 就会阻塞，一直等待队列不再满时向里面添加数据</p><h5 id="②不阻塞"><a href="#②不阻塞" class="headerlink" title="②不阻塞"></a>②不阻塞</h5><p>当队列满了之后，如果设置 put 不阻塞，或者等待时长到了之后会报错：<code>queue.Full</code></p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Queue.get(block=<span class="literal">True</span>, timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div><ul><li><p><code>block</code> 用于设置是否阻塞，put_nowait() = put(block=False)</p></li><li><p><code>timeout</code> 用于设置阻塞时等待时长</p></li></ul><h5 id="①阻塞-1"><a href="#①阻塞-1" class="headerlink" title="①阻塞"></a>①阻塞</h5><p>当队列空了之后，get 就会阻塞，一直等待队列中有数据后再获取数据</p><h5 id="②不阻塞-1"><a href="#②不阻塞-1" class="headerlink" title="②不阻塞"></a>②不阻塞</h5><p>当队列空了之后，如果设置 get 不阻塞，或者等待时长到了之后会报错：<code>_queue.Empty</code></p><h4 id="full-amp-empty"><a href="#full-amp-empty" class="headerlink" title="full &amp; empty"></a>full &amp; empty</h4><p><code>Queue.empty()</code>/<code>Queue.full()</code> 用于判断队列是否为空、满，尽量使用 <code>qsize</code> 代替。</p><h4 id="qsize"><a href="#qsize" class="headerlink" title="qsize"></a>qsize</h4><p><code>Queue.qsize()</code> 用于获取队列中大致的数据量</p><blockquote><p>在多线程的情况下不可靠，因为在获取 qsize 时，其他线程可能又对队列进行操作了。 </p></blockquote><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p><code>join</code> 会在队列存在未完成任务时阻塞，等待队列无未完成任务，需要配合 <code>task_done</code> 使用。</p><h4 id="task-done"><a href="#task-done" class="headerlink" title="task_done"></a>task_done</h4><p>执行一次 <code>put</code> 会让未完成任务 +1 ，但是执行 <code>get</code> 并不会让未完成任务 -1 ，需要使用 <code>task_done</code> 让未完成任务 -1 ，否则 <code>join</code> 就无法判断，队列为空时执行会报错：<code>ValueError: task_done() called too many times</code>。</p><h3 id="5、队列示例"><a href="#5、队列示例" class="headerlink" title="5、队列示例"></a>5、队列示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        q.put(count)</span><br><span class="line">        print(<span class="string">f'Put No.<span class="subst">&#123;count&#125;</span>'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">f'Get No.<span class="subst">&#123;q.get()&#125;</span>'</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = queue.Queue(maxsize=<span class="number">5</span>)</span><br><span class="line">    thread1 = threading.Thread(target=put,)</span><br><span class="line">    thread2 = threading.Thread(target=get,)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br></pre></td></tr></table></figure></div><pre><code>Put No.0Get No.0Put No.1Put No.2Get No.1Put No.3Get No.2Put No.4Put No.5Get No.3Put No.6Put No.7Get No.4Put No.8Put No.9Get No.5Get No.6Get No.7Get No.8Get No.9</code></pre><h2 id="五、GIL全局解释器锁"><a href="#五、GIL全局解释器锁" class="headerlink" title="五、GIL全局解释器锁"></a>五、GIL全局解释器锁</h2><p>在非python环境中，单核情况下，同时只能有一个任务执行，多核时可以支持多个线程同时执行；但是在python中，无论有多少核，同时只能执行一个线程。究其原因，这就是由于GIL的存在导致的。</p><p>GIL的全称是<code>Global Interpreter Lock</code>（全局解释器锁），来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。GIL只在<code>cpython</code>中才有，因为<code>cpython</code>调用的是C语言的原生线程，所以他不能直接操作CPU，只能利用GIL保证同一时间只能有一个线程拿到数据。而在<code>pypy</code>和<code>jpython</code>中是没有GIL的。</p><h3 id="Python多线程的工作过程"><a href="#Python多线程的工作过程" class="headerlink" title="Python多线程的工作过程"></a>Python多线程的工作过程</h3><p>python在使用多线程的时候，调用的是C语言的原生线程。</p><ul><li>拿到公共数据</li><li>申请GIL</li><li>python解释器调用os原生线程</li><li>os操作CPU执行运算</li><li>当该线程执行时间到后，无论运算是否已经执行完，GIL都被要求释放</li><li>进而由其他进程重复上面的过程</li><li>等其他进程执行完后，又会切换到之前的线程（从他记录的上下文继续执行），整个过程是每个线程执行自己的运算，当执行时间到就进行切换（context switch）。</li></ul><h3 id="python针对不同类型的代码执行效率也是不同"><a href="#python针对不同类型的代码执行效率也是不同" class="headerlink" title="python针对不同类型的代码执行效率也是不同"></a>python针对不同类型的代码执行效率也是不同</h3><p>1、CPU密集型代码(各种循环处理、计算等等)，在这种情况下，由于计算工作多，<code>ticks</code>计数很快就会达到阈值，然后触发GIL的释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。</p><p>2、IO密集型代码(文件处理、网络爬虫等涉及文件读写的操作)，多线程能够有效提升效率(单线程下有IO操作会进行IO等待，造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序执行效率)。所以python的多线程对IO密集型代码比较友好。</p><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p>python下想要充分利用多核CPU，就用多进程。因为每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，在python中，多进程的执行效率优于多线程（仅仅针对多核CPU而言）。</p><h3 id="GIL在python中的版本差异"><a href="#GIL在python中的版本差异" class="headerlink" title="GIL在python中的版本差异"></a>GIL在python中的版本差异</h3><p>1、在python2.x里，GIL的释放逻辑是当前线程遇见IO操作或者ticks计数达到100时进行释放。（ticks可以看作是python自身的一个计数器，专门做用于GIL，每次释放后归零，这个计数可以通过sys.setcheckinterval 来调整）。而每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)，这就是为什么在多核CPU上，python的多线程效率并不高。</p><p>2、在python3.x中，GIL不使用ticks计数，改为使用计时器（执行时间达到阈值后，当前线程释放GIL），这样对CPU密集型程序更加友好，但依然没有解决GIL导致的同一时间只能执行一个线程的问题，所以效率依然不尽如人意。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 高级进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> _thread库 </tag>
            
            <tag> threading库 </tag>
            
            <tag> queue库 </tag>
            
            <tag> GIL全局解释器锁 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 线程锁 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬取山东大学医学题库</title>
      <link href="/2020/07/29/Python-%E7%88%AC%E5%8F%96%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6%E5%8C%BB%E5%AD%A6%E9%A2%98%E5%BA%93/"/>
      <url>/2020/07/29/Python-%E7%88%AC%E5%8F%96%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6%E5%8C%BB%E5%AD%A6%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-爬取山东大学医学题库"><a href="#Python-爬取山东大学医学题库" class="headerlink" title="Python 爬取山东大学医学题库"></a>Python 爬取山东大学医学题库</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>啊啊啊，又是期末考试，<code>npy</code>想要刷题，可是学校的题库系统是校内网，所以需要VPN才能打开题库，这就有点麻烦了，对于刷题的<code>npy</code>来说是比较繁琐的，就想到了我，让我整成文本然后打印出来，最后我就必须要写代码来爬取这个题库了(毕竟手动复制粘贴，上万道题我估计得累死……)</p><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><p>首先登录进去就去之后找到题库，发现是通过ajax实现的，所以我就觉得会有一个接口用来获取列表信息，不过果然没有猜错，我找到了接口<code>http://1.51.216.60:99/exam/front-exercise!ajaxSubNode.action</code>，而且该接口仅有一个参数，这个参数对应了文件夹的<code>id</code>，而对于接口返回的列表中的数据，我进行了分析，<code>id</code>是文件/文件夹的<code>id</code>，<code>pId</code>则是其父文件夹的<code>id</code>，至于<code>name</code>一目了然就是文件/文件夹的名称，而<code>isParent</code>则是表示该对象属性，其中<code>true</code>表示是文件夹，<code>false</code>表示是文件/试卷。</p><p><a href="http://image.tooltool.club/image-20200730173524617.png" data-fancybox="group" data-caption="image-20200730173524617" class="fancybox"><img alt="image-20200730173524617" title="image-20200730173524617" data-src="http://image.tooltool.club/image-20200730173524617.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/image-20200730175332654.png" data-fancybox="group" data-caption="image-20200730175332654" class="fancybox"><img alt="image-20200730175332654" title="image-20200730175332654" data-src="http://image.tooltool.club/image-20200730175332654.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/image-20200730175414552.png" data-fancybox="group" data-caption="image-20200730175414552" class="fancybox"><img alt="image-20200730175414552" title="image-20200730175414552" data-src="http://image.tooltool.club/image-20200730175414552.png" class="lazyload"></a></p><p>所以我们接下来就去对文件/试卷进行分析，看一下文件/试卷是否有对应的接口，但是最后没有找到JSON接口，只是找到了一个 html 代码接口，接口中有答题框以及题目，其中答题框的接口为<code>http://1.51.216.60:99/exam/front-exercise!exercise.action</code>，而题目接口为<code>http://1.51.216.60:99/exam/front-exercise!nextItem.action</code>，其中答题框接口需要的参数有三个，只有一个有用参数即文件/试卷<code>id</code>，而在题目接口中则需要五个参数，分别是题目题号、试卷/文件<code>id</code>、随机数、以及两个无用参数。</p><p><a href="http://image.tooltool.club/image-20200730182302261.png" data-fancybox="group" data-caption="image-20200730182302261" class="fancybox"><img alt="image-20200730182302261" title="image-20200730182302261" data-src="http://image.tooltool.club/image-20200730182302261.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/image-20200730182333530.png" data-fancybox="group" data-caption="image-20200730182333530" class="fancybox"><img alt="image-20200730182333530" title="image-20200730182333530" data-src="http://image.tooltool.club/image-20200730182333530.png" class="lazyload"></a></p><p>所以，对于每套试卷的题目爬取只需要进行遍历，遍历次数通过题目数来确定，而在答题框中有题目数，所以只需要先爬取答题框中题目数num，然后遍历range(num)作为题号访问题目接口。但是没有找到答案，而点击查看答案之后就会显示答案，我于是查看了查看答案按钮是否有对应的接口，但是发现查看答案对应的是一个存档接口，而且提交的参数中就包括了正确答案，所以正确答案应该已经传给了客户端，最后我在题目html代码中发现了被隐藏的正确答案。</p><p><a href="http://image.tooltool.club/image-20200730183300502.png" data-fancybox="group" data-caption="image-20200730183300502" class="fancybox"><img alt="image-20200730183300502" title="image-20200730183300502" data-src="http://image.tooltool.club/image-20200730183300502.png" class="lazyload"></a></p><h2 id="爬取思路"><a href="#爬取思路" class="headerlink" title="爬取思路"></a>爬取思路</h2><p>根据上述分析我们便可以写代码来实现相关题目爬取，首先是创建相关类，然后初始化相关参数和属性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,'</span></span><br><span class="line">                  <span class="string">'image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'1.51.216.60:99'</span>,</span><br><span class="line">        <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span></span><br><span class="line">                      <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/80.0.3987.116 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    self.url_login = <span class="string">'http://1.51.216.60:99/exam/front-login!logon.action'</span></span><br><span class="line">    self.url_list = <span class="string">'http://1.51.216.60:99/exam/front-exercise!ajaxSubNode.action'</span></span><br><span class="line">    self.url_index = <span class="string">'http://1.51.216.60:99/exam/front-exercise!exercise.action'</span></span><br><span class="line">    self.url_question = <span class="string">'http://1.51.216.60:99/exam/front-exercise!nextItem.action'</span></span><br><span class="line">    self.path = <span class="string">'.//题库//'</span></span><br><span class="line">    self.login()</span><br></pre></td></tr></table></figure></div><p>其实，在网页分析中并没有说明该题库系统的登录系统，然而登录系统也是十分简单，只需要向登陆接口 post 提交用户名和密码表单即可进行登录，然后获取对应的cookies并添加到请求头参数中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'userName'</span>: <span class="string">'用户名'</span>,</span><br><span class="line">        <span class="string">'passWord'</span>: <span class="string">'密  码'</span></span><br><span class="line">    &#125;</span><br><span class="line">    session = requests.post(self.url_login, data=data)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> session.cookies:</span><br><span class="line">        <span class="keyword">if</span> c.name == <span class="string">'JSESSIONID'</span>:</span><br><span class="line">            cookie = <span class="string">'JSESSIONID='</span> + c.value</span><br><span class="line">            self.header[<span class="string">'Cookie'</span>] = cookie</span><br></pre></td></tr></table></figure></div><p>接下来，是对上述网页分析中的接口和题目进行爬取，并通过BeautifulSoup来解析HTML页面，从而得到想要的数据/题目，并将题目通过文件读写进行保存。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanData</span><span class="params">(self, string)</span>:</span></span><br><span class="line">    response = string.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    response = response.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">    response = response.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">    response = response.replace(<span class="string">'false'</span>, <span class="string">'False'</span>)</span><br><span class="line">    response = response.replace(<span class="string">'true'</span>, <span class="string">'True'</span>)</span><br><span class="line">    response = response.replace(<span class="string">'id'</span>, <span class="string">'"id"'</span>)</span><br><span class="line">    response = response.replace(<span class="string">'pId'</span>, <span class="string">'"pId"'</span>)</span><br><span class="line">    response = response.replace(<span class="string">'name'</span>, <span class="string">'"name"'</span>)</span><br><span class="line">    response = response.replace(<span class="string">'isParent'</span>, <span class="string">'"isParent"'</span>)</span><br><span class="line">    <span class="keyword">return</span> eval(response)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getQuestionsList</span><span class="params">(self, id)</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'param.subjectId'</span>: id,</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(self.url_list, headers=self.header, params=params)</span><br><span class="line">    <span class="keyword">return</span> self.cleanData(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getQuestionsNumber</span><span class="params">(self, id)</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'param.isRepeat'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'param.subjectId'</span>: id,</span><br><span class="line">        <span class="string">'param.typeId'</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(self.url_index, headers=self.header, params=params)</span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    number = soup.find(<span class="string">'span'</span>, &#123;<span class="string">'id'</span>: <span class="string">'itemcount'</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> int(number.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getQuestionsIndex</span><span class="params">(self, id, root)</span>:</span></span><br><span class="line">    number = self.getQuestionsNumber(id)</span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(number):</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'curItemSerial'</span>: num,</span><br><span class="line">            <span class="string">'param.subjectId'</span>: id,</span><br><span class="line">            <span class="string">'param.typeId'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'param.isContinue'</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">'random'</span>: <span class="number">0.22062095701195417</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.get(self.url_question, headers=self.header, params=params)</span><br><span class="line">        soup = BeautifulSoup(res.text, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            strings = soup.find_all(<span class="string">'td'</span>)[<span class="number">0</span>]</span><br><span class="line">            question = strings.text</span><br><span class="line">            question = question.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">            question = question.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            text = text + question + <span class="string">'\n'</span></span><br><span class="line">            strings = soup.find_all(<span class="string">'label'</span>)</span><br><span class="line">            <span class="keyword">for</span> answer_pre <span class="keyword">in</span> strings:</span><br><span class="line">                answer = answer_pre.text</span><br><span class="line">                text = text + answer + <span class="string">'\n'</span></span><br><span class="line">            result = soup.find_all(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'correctresult'</span>&#125;)</span><br><span class="line">            result = result[<span class="number">0</span>].text</span><br><span class="line">            result = result.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">            result = result.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            text = text + result + <span class="string">'\n'</span></span><br><span class="line">            print(res.url, <span class="string">'完成爬取...'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(res.url, <span class="string">"未找到题目..."</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(root, <span class="string">'w'</span>) <span class="keyword">as</span> fb:</span><br><span class="line">            fb.write(text)</span><br><span class="line">            fb.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(text)</span><br></pre></td></tr></table></figure></div><p>最后，我们要编写主方法来对需要的文件夹内容进行调用上述接口爬取，由于我们并无须爬取全部题目，所以暂时不考虑使用数据中的<code>isParent</code>参数值来判断是否是文件夹或者文件，只需要简单的循环遍历一个双层的文件夹即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">    data = self.getQuestionsList(<span class="number">2594</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">        os.mkdir(self.path)</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data[<span class="number">-3</span>:]:</span><br><span class="line">        name = d[<span class="string">'name'</span>]</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">20</span>, name, <span class="string">'-'</span> * <span class="number">20</span>)</span><br><span class="line">        parent_path = self.path + <span class="string">f'//<span class="subst">&#123;name&#125;</span>//'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(parent_path):</span><br><span class="line">            os.mkdir(parent_path)</span><br><span class="line">        child_data = self.getQuestionsList(d[<span class="string">'id'</span>])</span><br><span class="line">        <span class="keyword">for</span> cd <span class="keyword">in</span> child_data:</span><br><span class="line">            name = cd[<span class="string">'name'</span>]</span><br><span class="line">            print(<span class="string">'*'</span> * <span class="number">20</span>, name, <span class="string">'*'</span> * <span class="number">20</span>)</span><br><span class="line">            path = parent_path + <span class="string">f'<span class="subst">&#123;name&#125;</span>.txt'</span></span><br><span class="line">            self.getQuestionsIndex(cd[<span class="string">'id'</span>], path)</span><br></pre></td></tr></table></figure></div><p>虽然这个项目只有挂着VPN才能使用，对于非山东大学的同学无法访问或者使用该项目源代码，但是该项目仍具有一定的学习意义，包括本项目中具体题目并非接口给出，而是html代码方式给出，而且正确答案在html代码中也做了隐藏所以无法正常显示出来，所以更需要我们积累经验，然后解决诸如此类的问题。而且在封装调试过程中，我还发现，由于这是一个题库答题系统，所以必须先访问<code>http://1.51.216.60:99/exam/front-exercise!exercise.action</code>该接口来开始此次考试记录，才能够继续访问<code>http://1.51.216.60:99/exam/front-exercise!nextItem.action</code>接口，不然无法显示对应题目，对于该问题我一开始认为是<code>random</code>参数失效导致的，但是最后发现是答题存档系统的问题，所以即使列表数据中给出题目数量，也要访问答题框接口来获取题目数量，以确保能够正常获取题目，这就是接口访问存在先后顺序的情况。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Questions</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.header = &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,'</span></span><br><span class="line">                      <span class="string">'image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">            <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'1.51.216.60:99'</span>,</span><br><span class="line">            <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">            <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span></span><br><span class="line">                          <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/80.0.3987.116 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.url_login = <span class="string">'http://1.51.216.60:99/exam/front-login!logon.action'</span></span><br><span class="line">        self.url_list = <span class="string">'http://1.51.216.60:99/exam/front-exercise!ajaxSubNode.action'</span></span><br><span class="line">        self.url_index = <span class="string">'http://1.51.216.60:99/exam/front-exercise!exercise.action'</span></span><br><span class="line">        self.url_question = <span class="string">'http://1.51.216.60:99/exam/front-exercise!nextItem.action'</span></span><br><span class="line">        self.path = <span class="string">'.//题库//'</span></span><br><span class="line">        self.login()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'userName'</span>: <span class="string">'201900414007'</span>,</span><br><span class="line">            <span class="string">'passWord'</span>: <span class="string">'201900414007'</span></span><br><span class="line">        &#125;</span><br><span class="line">        session = requests.post(self.url_login, data=data)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> session.cookies:</span><br><span class="line">            <span class="keyword">if</span> c.name == <span class="string">'JSESSIONID'</span>:</span><br><span class="line">                cookie = <span class="string">'JSESSIONID='</span> + c.value</span><br><span class="line">                self.header[<span class="string">'Cookie'</span>] = cookie</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cleanData</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        response = string.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        response = response.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">        response = response.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        response = response.replace(<span class="string">'false'</span>, <span class="string">'False'</span>)</span><br><span class="line">        response = response.replace(<span class="string">'true'</span>, <span class="string">'True'</span>)</span><br><span class="line">        response = response.replace(<span class="string">'id'</span>, <span class="string">'"id"'</span>)</span><br><span class="line">        response = response.replace(<span class="string">'pId'</span>, <span class="string">'"pId"'</span>)</span><br><span class="line">        response = response.replace(<span class="string">'name'</span>, <span class="string">'"name"'</span>)</span><br><span class="line">        response = response.replace(<span class="string">'isParent'</span>, <span class="string">'"isParent"'</span>)</span><br><span class="line">        <span class="keyword">return</span> eval(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQuestionsList</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'param.subjectId'</span>: id,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.get(self.url_list, headers=self.header, params=params)</span><br><span class="line">        <span class="keyword">return</span> self.cleanData(res.text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQuestionsNumber</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'param.isRepeat'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'param.subjectId'</span>: id,</span><br><span class="line">            <span class="string">'param.typeId'</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.get(self.url_index, headers=self.header, params=params)</span><br><span class="line">        soup = BeautifulSoup(res.text, <span class="string">"html.parser"</span>)</span><br><span class="line">        number = soup.find(<span class="string">'span'</span>, &#123;<span class="string">'id'</span>: <span class="string">'itemcount'</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> int(number.text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQuestionsIndex</span><span class="params">(self, id, root)</span>:</span></span><br><span class="line">        number = self.getQuestionsNumber(id)</span><br><span class="line">        text = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(number):</span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">'curItemSerial'</span>: num,</span><br><span class="line">                <span class="string">'param.subjectId'</span>: id,</span><br><span class="line">                <span class="string">'param.typeId'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'param.isContinue'</span>: <span class="literal">None</span>,</span><br><span class="line">                <span class="string">'random'</span>: <span class="number">0.22062095701195417</span></span><br><span class="line">            &#125;</span><br><span class="line">            res = requests.get(self.url_question, headers=self.header, params=params)</span><br><span class="line">            soup = BeautifulSoup(res.text, <span class="string">"html.parser"</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                strings = soup.find_all(<span class="string">'td'</span>)[<span class="number">0</span>]</span><br><span class="line">                question = strings.text</span><br><span class="line">                question = question.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">                question = question.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                text = text + question + <span class="string">'\n'</span></span><br><span class="line">                strings = soup.find_all(<span class="string">'label'</span>)</span><br><span class="line">                <span class="keyword">for</span> answer_pre <span class="keyword">in</span> strings:</span><br><span class="line">                    answer = answer_pre.text</span><br><span class="line">                    text = text + answer + <span class="string">'\n'</span></span><br><span class="line">                result = soup.find_all(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'correctresult'</span>&#125;)</span><br><span class="line">                result = result[<span class="number">0</span>].text</span><br><span class="line">                result = result.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">                result = result.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                text = text + result + <span class="string">'\n'</span></span><br><span class="line">                print(res.url, <span class="string">'完成爬取...'</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                print(res.url, <span class="string">"未找到题目..."</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(root, <span class="string">'w'</span>) <span class="keyword">as</span> fb:</span><br><span class="line">                fb.write(text)</span><br><span class="line">                fb.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.getQuestionsList(<span class="number">2594</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">            os.mkdir(self.path)</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> data[<span class="number">-3</span>:]:</span><br><span class="line">            name = d[<span class="string">'name'</span>]</span><br><span class="line">            print(<span class="string">'-'</span> * <span class="number">20</span>, name, <span class="string">'-'</span> * <span class="number">20</span>)</span><br><span class="line">            parent_path = self.path + <span class="string">f'//<span class="subst">&#123;name&#125;</span>//'</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(parent_path):</span><br><span class="line">                os.mkdir(parent_path)</span><br><span class="line">            child_data = self.getQuestionsList(d[<span class="string">'id'</span>])</span><br><span class="line">            <span class="keyword">for</span> cd <span class="keyword">in</span> child_data:</span><br><span class="line">                name = cd[<span class="string">'name'</span>]</span><br><span class="line">                print(<span class="string">'*'</span> * <span class="number">20</span>, name, <span class="string">'*'</span> * <span class="number">20</span>)</span><br><span class="line">                path = parent_path + <span class="string">f'<span class="subst">&#123;name&#125;</span>.txt'</span></span><br><span class="line">                self.getQuestionsIndex(cd[<span class="string">'id'</span>], path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Questions()</span><br><span class="line">    solution.main()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python QQ空间模拟登陆</title>
      <link href="/2020/07/29/Python-QQ%E7%A9%BA%E9%97%B4%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/"/>
      <url>/2020/07/29/Python-QQ%E7%A9%BA%E9%97%B4%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 你输入的密码有误, 请重新输入." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">由于本篇博客涉及的代码部分尚未完善或者代码中涉及个人数据, 所以该博客暂未对公众开放, 输入博客密码才能访问, 如需技术交流联系博主.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c4780f28f812228176ac6069c7319f9f0abe95f66b79f066d2a330acfe69ad05"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 项目实战 </tag>
            
            <tag> QQ空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬取QQ空间相册</title>
      <link href="/2020/07/29/Python-%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E7%9B%B8%E5%86%8C/"/>
      <url>/2020/07/29/Python-%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E7%9B%B8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-爬取QQ空间相册"><a href="#Python-爬取QQ空间相册" class="headerlink" title="Python 爬取QQ空间相册"></a>Python 爬取QQ空间相册</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>前几天看着QQ相册里的有些年代比较久远还是比较令人怀念的，于是我本想一键导出相册但却发现QQ相册并没有这个功能，还得自己写代码一键导出着实令人头疼，说做就做，还是直接搞吧。</p><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><p>首先应该是找相册列表的接口，这个应该是比较容易找到，接口是<code>https://user.qzone.qq.com/proxy/domain/photo.qzone.qq.com/fcgi-bin/fcg_list_album_v3</code>而其参数中，我们可以剔出不必要的参数，最后剩下<code>g_tk</code>、<code>hostUin</code>、<code>uin</code>、<code>inCharset</code>、<code>outCharset</code>、<code>pageNumModeSort</code>、<code>pageNumModeClass</code>这几个参数值，其中<code>g_tk</code>为加密算法的g_tk值，<code>hostUin</code>和<code>uin</code>是登录QQ账号和被访问QQ账号，因为我们是在下载自己空间相册，所以这两个都是我们的QQ账号，<code>inCharset</code>、<code>outCharset</code>则是输入输出编码格式，这是固定的，<code>pageNumModeSort</code>、<code>pageNumModeClass</code>则是每页的相册信息，保持默认不变即可。</p><p><a href="http://image.tooltool.club/image-20200730152738812.png" data-fancybox="group" data-caption="image-20200730152738812" class="fancybox"><img alt="image-20200730152738812" title="image-20200730152738812" data-src="http://image.tooltool.club/image-20200730152738812.png" class="lazyload"></a></p><p>接下来应该是找相册图片列表的接口，这个也是比较容易找到，接口是<code>https://h5.qzone.qq.com/proxy/domain/photo.qzone.qq.com/fcgi-bin/cgi_list_photo</code>，这个接口最后也有一些参数，去掉不必要的参数，最后剩下<code>g_tk</code>、<code>hostUin</code>、<code>uin</code>、<code>inCharset</code>、<code>outCharset</code>、<code>topicId</code>、<code>pageNum</code>、<code>page</code>这几个参数，而前五个参数与上一个接口相同，而<code>topicId</code>对应的是相册的<code>id</code>，而<code>pageNum</code>和<code>page</code>则是每页相册数以及页码数，直接令<code>pageNum</code>等于该相册内照片数目，<code>page</code>等于0或者取消该参数，即可获得该相册全部照片数据。</p><p><a href="http://image.tooltool.club/image-20200730154848883.png" data-fancybox="group" data-caption="image-20200730154848883" class="fancybox"><img alt="image-20200730154848883" title="image-20200730154848883" data-src="http://image.tooltool.club/image-20200730154848883.png" class="lazyload"></a></p><p>在相册数据集中就会有每张照片所对应的信息，以及URL地址，我们则可以通过该URL链接下载我们所需要的照片，即接下来就可以写代码实现相关需求了。</p><h2 id="爬取思路"><a href="#爬取思路" class="headerlink" title="爬取思路"></a>爬取思路</h2><p>根据以上分析，我们首先定义一个相关的类QQZonePictures，并初始化相关参数和属性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cookies=None, gtk=None, uin=None)</span>:</span></span><br><span class="line">    self.cookies = cookies</span><br><span class="line">    self.gtk = gtk</span><br><span class="line">    self.uin = uin</span><br><span class="line">    self.root = self.Mkdir_path(<span class="string">".//images//"</span>)</span><br><span class="line">    self.url_list = <span class="string">'https://user.qzone.qq.com/proxy/domain/photo.qzone.qq.com/fcgi-bin/fcg_list_album_v3'</span></span><br><span class="line">    self.url_photo = <span class="string">'https://h5.qzone.qq.com/proxy/domain/photo.qzone.qq.com/fcgi-bin/cgi_list_photo'</span></span><br><span class="line">    self.header = &#123;</span><br><span class="line">        <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;'</span></span><br><span class="line">                  <span class="string">'q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">        <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">        <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">        <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'cookie'</span>: self.cookies,</span><br><span class="line">        <span class="string">'pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'sec-fetch-dest'</span>: <span class="string">'document'</span>,</span><br><span class="line">        <span class="string">'sec-fetch-mode'</span>: <span class="string">'navigate'</span>,</span><br><span class="line">        <span class="string">'sec-fetch-site'</span>: <span class="string">'none'</span>,</span><br><span class="line">        <span class="string">'sec-fetch-user'</span>: <span class="string">'?1'</span>,</span><br><span class="line">        <span class="string">'upgrade-insecure-requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span></span><br><span class="line">                      <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/80.0.3987.116 Safari/537.36'</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>然后我们需要写两个方法分别对两个接口进行爬取，但是对两个接口爬取到的信息需要进行清洗才能够使用，所以我们创建了一个数据清洗的方法，对获取的数据进行清洗，并返回清洗后的数据字典。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Clean_data</span><span class="params">(self, string)</span>:</span></span><br><span class="line">    response = string.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    response = response.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">    response = response.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">    response = response.replace(<span class="string">'false'</span>, <span class="string">'"false"'</span>)</span><br><span class="line">    response = response.replace(<span class="string">'true'</span>, <span class="string">'"true"'</span>)</span><br><span class="line">    data = json.loads(response[<span class="number">10</span>:<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_photo_lists</span><span class="params">(self)</span>:</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">'g_tk'</span>: self.gtk,</span><br><span class="line">        <span class="string">'hostUin'</span>: self.uin,</span><br><span class="line">        <span class="string">'uin'</span>: self.uin,</span><br><span class="line">        <span class="string">'inCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        <span class="string">'outCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        <span class="string">'pageNumModeSort'</span>: <span class="string">'40'</span>,</span><br><span class="line">        <span class="string">'pageNumModeClass'</span>: <span class="string">'15'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(self.url_list, headers=self.header, params=param)</span><br><span class="line">    Photo_lists_data = self.Clean_data(res.text)</span><br><span class="line">    <span class="keyword">return</span> Photo_lists_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_photos</span><span class="params">(self, list_id, num)</span>:</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">'g_tk'</span>: self.gtk,</span><br><span class="line">        <span class="string">'hostUin'</span>: self.uin,</span><br><span class="line">        <span class="string">'uin'</span>: self.uin,</span><br><span class="line">        <span class="string">'inCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        <span class="string">'outCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        <span class="string">'topicId'</span>: list_id,</span><br><span class="line">        <span class="string">'pageNum'</span>: num,</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(self.url_photo, headers=self.header, params=param)</span><br><span class="line">    Photos_data = self.Clean_data(res.text)</span><br><span class="line">    <span class="keyword">return</span> Photos_data</span><br></pre></td></tr></table></figure></div><p>到此我们已经能够获取QQ空间所有的相册，以及所有相册中的照片信息，接下来就是对相册中的照片进行下载，我们需要创建一个生成路径文件夹的方法用于以及一个用于图片下载的方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mkdir_path</span><span class="params">(self, path)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">           os.mkdir(path)</span><br><span class="line">       <span class="keyword">return</span> path</span><br><span class="line">       </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Downloads</span><span class="params">(self, data)</span>:</span></span><br><span class="line">       file_name, count = data[<span class="string">"data"</span>][<span class="string">"topic"</span>][<span class="string">'name'</span>], <span class="number">0</span></span><br><span class="line">       root = self.Mkdir_path(self.root + file_name + <span class="string">'//'</span>)</span><br><span class="line">       print(<span class="string">f"相册<span class="subst">&#123;file_name&#125;</span>开始下载..."</span>)</span><br><span class="line">       <span class="keyword">for</span> photo <span class="keyword">in</span> data[<span class="string">"data"</span>][<span class="string">"photoList"</span>]:</span><br><span class="line">           path = root + <span class="string">f"image_<span class="subst">&#123;count&#125;</span>.jpg"</span></span><br><span class="line">           read = requests.get(photo[<span class="string">'url'</span>])</span><br><span class="line">           <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">               file.write(read.content)</span><br><span class="line">           print(<span class="string">f"image_<span class="subst">&#123;count&#125;</span>.jpg 下载成功"</span>)</span><br><span class="line">           count = count + <span class="number">1</span></span><br><span class="line">       print(<span class="string">f"相册<span class="subst">&#123;file_name&#125;</span>下载完成..."</span>)</span><br></pre></td></tr></table></figure></div><p>最后，我们创建主方法，通过上述方法将整个QQ空间相册下载类中的方法和属性整合在一起。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">    photos_lists = self.Get_photo_lists()</span><br><span class="line">    <span class="keyword">for</span> photos_list <span class="keyword">in</span> photos_lists[<span class="string">"data"</span>][<span class="string">"albumListModeSort"</span>]:</span><br><span class="line">        list_id = photos_list[<span class="string">'id'</span>]</span><br><span class="line">        num = photos_list[<span class="string">'total'</span>]</span><br><span class="line">        Photos_data = self.Get_photos(list_id, num)</span><br><span class="line">        self.Downloads(Photos_data)</span><br></pre></td></tr></table></figure></div><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQZonePictures</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cookies=None, gtk=None, uin=None)</span>:</span></span><br><span class="line">        self.cookies = cookies</span><br><span class="line">        self.gtk = gtk</span><br><span class="line">        self.uin = uin</span><br><span class="line">        self.root = self.Mkdir_path(<span class="string">".//images//"</span>)</span><br><span class="line">        self.url_list = <span class="string">'https://user.qzone.qq.com/proxy/domain/photo.qzone.qq.com/fcgi-bin/fcg_list_album_v3'</span></span><br><span class="line">        self.url_photo = <span class="string">'https://h5.qzone.qq.com/proxy/domain/photo.qzone.qq.com/fcgi-bin/cgi_list_photo'</span></span><br><span class="line">        self.header = &#123;</span><br><span class="line">            <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;'</span></span><br><span class="line">                      <span class="string">'q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">            <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">            <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">            <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">            <span class="string">'cookie'</span>: self.cookies,</span><br><span class="line">            <span class="string">'pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">            <span class="string">'sec-fetch-dest'</span>: <span class="string">'document'</span>,</span><br><span class="line">            <span class="string">'sec-fetch-mode'</span>: <span class="string">'navigate'</span>,</span><br><span class="line">            <span class="string">'sec-fetch-site'</span>: <span class="string">'none'</span>,</span><br><span class="line">            <span class="string">'sec-fetch-user'</span>: <span class="string">'?1'</span>,</span><br><span class="line">            <span class="string">'upgrade-insecure-requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">            <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span></span><br><span class="line">                          <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/80.0.3987.116 Safari/537.36'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clean_data</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        response = string.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        response = response.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">        response = response.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        response = response.replace(<span class="string">'false'</span>, <span class="string">'"false"'</span>)</span><br><span class="line">        response = response.replace(<span class="string">'true'</span>, <span class="string">'"true"'</span>)</span><br><span class="line">        data = json.loads(response[<span class="number">10</span>:<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mkdir_path</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Get_photo_lists</span><span class="params">(self)</span>:</span></span><br><span class="line">        param = &#123;</span><br><span class="line">            <span class="string">'g_tk'</span>: self.gtk,</span><br><span class="line">            <span class="string">'hostUin'</span>: self.uin,</span><br><span class="line">            <span class="string">'uin'</span>: self.uin,</span><br><span class="line">            <span class="string">'inCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">            <span class="string">'outCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">            <span class="string">'pageNumModeSort'</span>: <span class="string">'40'</span>,</span><br><span class="line">            <span class="string">'pageNumModeClass'</span>: <span class="string">'15'</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.get(self.url_list, headers=self.header, params=param)</span><br><span class="line">        Photo_lists_data = self.Clean_data(res.text)</span><br><span class="line">        <span class="keyword">return</span> Photo_lists_data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Get_photos</span><span class="params">(self, list_id, num)</span>:</span></span><br><span class="line">        param = &#123;</span><br><span class="line">            <span class="string">'g_tk'</span>: self.gtk,</span><br><span class="line">            <span class="string">'hostUin'</span>: self.uin,</span><br><span class="line">            <span class="string">'uin'</span>: self.uin,</span><br><span class="line">            <span class="string">'inCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">            <span class="string">'outCharset'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">            <span class="string">'topicId'</span>: list_id,</span><br><span class="line">            <span class="string">'pageNum'</span>: num,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.get(self.url_photo, headers=self.header, params=param)</span><br><span class="line">        Photos_data = self.Clean_data(res.text)</span><br><span class="line">        <span class="keyword">return</span> Photos_data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Downloads</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        file_name, count = data[<span class="string">"data"</span>][<span class="string">"topic"</span>][<span class="string">'name'</span>], <span class="number">0</span></span><br><span class="line">        root = self.Mkdir_path(self.root + file_name + <span class="string">'//'</span>)</span><br><span class="line">        print(<span class="string">f"相册<span class="subst">&#123;file_name&#125;</span>开始下载..."</span>)</span><br><span class="line">        <span class="keyword">for</span> photo <span class="keyword">in</span> data[<span class="string">"data"</span>][<span class="string">"photoList"</span>]:</span><br><span class="line">            path = root + <span class="string">f"image_<span class="subst">&#123;count&#125;</span>.jpg"</span></span><br><span class="line">            read = requests.get(photo[<span class="string">'url'</span>])</span><br><span class="line">            <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(read.content)</span><br><span class="line">            print(<span class="string">f"image_<span class="subst">&#123;count&#125;</span>.jpg 下载成功"</span>)</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"相册<span class="subst">&#123;file_name&#125;</span>下载完成..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        photos_lists = self.Get_photo_lists()</span><br><span class="line">        <span class="keyword">for</span> photos_list <span class="keyword">in</span> photos_lists[<span class="string">"data"</span>][<span class="string">"albumListModeSort"</span>]:</span><br><span class="line">            list_id = photos_list[<span class="string">'id'</span>]</span><br><span class="line">            num = photos_list[<span class="string">'total'</span>]</span><br><span class="line">            Photos_data = self.Get_photos(list_id, num)</span><br><span class="line">            self.Downloads(Photos_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Login = QQZone()</span><br><span class="line">    cookies, gtk, uin = Login.login()</span><br><span class="line">    Spider = QQZonePictures(cookies=cookies, gtk=gtk, uin=uin)</span><br><span class="line">    Spider.main()</span><br></pre></td></tr></table></figure></div><h2 id="QQ空间模拟登陆"><a href="#QQ空间模拟登陆" class="headerlink" title="QQ空间模拟登陆"></a>QQ空间模拟登陆</h2><p>虽然大家读完这篇博客已经清楚了，但是对于我给出的完整代码最后的<code>g_tk</code>、<code>cookies</code>、<code>uin</code>这三个参数可能还有较多的疑问，对于<code>g_tk</code>、<code>cookies</code>、<code>uin</code>的获取方法就要涉及到爬虫的模拟登陆，但是QQ空间的模拟登陆是比较复杂的，所以我提供三种解决方案，而这三种解决方案的代码实现将会在后续博客中进行详细描述的解析。</p><h3 id="解决方案①"><a href="#解决方案①" class="headerlink" title="解决方案①"></a>解决方案①</h3><p>我们作为在查找接口时，已经获取过这三个参数<code>g_tk</code>、<code>cookies</code>、<code>uin</code>，所以手动登陆空间然后获取这些参数，手动输入后，便可直接运行上述程序。</p><h3 id="解决方案②"><a href="#解决方案②" class="headerlink" title="解决方案②"></a>解决方案②</h3><p>通过代码用selenium来模拟人的操作来实现模拟登陆，具体来说就是先点击“账号密码登录”，定位账号、密码输入框并输入相应内容，定位登录按钮，点击登录，，要注意的是这个页面是有框架的，在源码里可以看到”login_frame”，所以要先切换到框架。</p><h3 id="解决方案③"><a href="#解决方案③" class="headerlink" title="解决方案③"></a>解决方案③</h3><p>就是通过QQ空间的二维码登陆接口，利用手机QQ扫描二维码然后进行QQ空间的登陆，这种方法也是比较简单、高效、实用的方法，所以其实完整代码中的 QQZone() 类便是通过该方法进行登录的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 项目实战 </tag>
            
            <tag> QQ空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬取东北大学高数题库</title>
      <link href="/2020/07/29/Python-%E7%88%AC%E5%8F%96%E4%B8%9C%E5%8C%97%E5%A4%A7%E5%AD%A6%E9%AB%98%E6%95%B0%E9%A2%98%E5%BA%93/"/>
      <url>/2020/07/29/Python-%E7%88%AC%E5%8F%96%E4%B8%9C%E5%8C%97%E5%A4%A7%E5%AD%A6%E9%AB%98%E6%95%B0%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-爬取东北大学高数题库"><a href="#Python-爬取东北大学高数题库" class="headerlink" title="Python 爬取东北大学高数题库"></a>Python 爬取东北大学高数题库</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>由于疫情在家，而又临近期末考试，高中同学找我帮忙爬取他们学校的高数题库，用于备考期末考试，我稍微看了一下，他喵的服务器竟然不在中国，算了算了，也没那么重要啦，该爬还是照样爬。我又看了一下首页，首页给出了题库的开放题库下载地址，但是下载完后发现仍是html文件，但是同学想要图片，算了废话少说，开始工作。</p><p><a href="http://image.tooltool.club/image-20200729233527149.png" data-fancybox="group" data-caption="image-20200729233527149" class="fancybox"><img alt="image-20200729233527149" title="image-20200729233527149" data-src="http://image.tooltool.club/image-20200729233527149.png" class="lazyload"></a></p><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><p><a href="http://image.tooltool.club/image-20200729234440632.png" data-fancybox="group" data-caption="image-20200729234440632" class="fancybox"><img alt="image-20200729234440632" title="image-20200729234440632" data-src="http://image.tooltool.club/image-20200729234440632.png" class="lazyload"></a></p><p>首先是这个目录列表，点进去就是题目，但是题目是点击才会显示正确答案的，所以这里应该是用JS/CSS实现的，由于页面源代码是动态的，所以直接爬去网页内容解释是不可以的，所以我就寻找是否页面内就隐藏着正确答案，但是没有发现，但是却找到了目录接口，这个接口是<code>https://api.neumathe.xyz:8181/api/clist</code>，而且这个接口目录比我想象的还要全面。</p><p><a href="http://image.tooltool.club/image-20200729234944271.png" data-fancybox="group" data-caption="image-20200729234944271" class="fancybox"><img alt="image-20200729234944271" title="image-20200729234944271" data-src="http://image.tooltool.club/image-20200729234944271.png" class="lazyload"></a></p><p>既然找到目录接口了，而且在这个JSON数据中我们可以发现每个小节的题目都是有id的，而且这个id肯定是对应题目列表的id，于是就接着寻找题目列表的接口，最后找到了接口<code>https://api.neumathe.xyz:8181/api/qlist</code>，以及其参数<code>tk=gs&amp;tid=e624c53dff2d48e6bb1932c1b5e640e0&amp;page=1&amp;per=5</code>，而且不难发现，<code>tk</code>对应高等数学/概率统计/复变函数/线性代数，<code>tid</code>正是正是之前的小节<code>id</code>，<code>page</code>和<code>per</code>则分别表示页数和每页的题目数量。</p><p><a href="http://image.tooltool.club/image-20200730000253087.png" data-fancybox="group" data-caption="image-20200730000253087" class="fancybox"><img alt="image-20200730000253087" title="image-20200730000253087" data-src="http://image.tooltool.club/image-20200730000253087.png" class="lazyload"></a></p><p>但是每个题目给出的知识一堆乱码，肯定是跟<code>id</code>一样的东西，还有一个题目接口去查找具体题目的内容，所以我就继续找题目接口，最后找到题目接口<code>https://api.neumathe.xyz:8181/api/question</code>，以及其对应参数<code>name</code>，但是返回的内容为六个img，而且img应该是图片的base64格式，而且answer应该是正确答案所对应的图片，而img0为题目，img5为题目解析。</p><p><a href="http://image.tooltool.club/image-20200730000226677.png" data-fancybox="group" data-caption="image-20200730000226677" class="fancybox"><img alt="image-20200730000226677" title="image-20200730000226677" data-src="http://image.tooltool.club/image-20200730000226677.png" class="lazyload"></a></p><h2 id="爬取思路"><a href="#爬取思路" class="headerlink" title="爬取思路"></a>爬取思路</h2><p>经过上述分析我们可以进行代码的书写，首先是调用要用到的库并创建一个合适的类。</p><p>初始化，先将我们之前找到的接口初始化相关参数和属性，其次就是在当前目录下创建images的文件夹用来存储接下来爬取到的图片文件。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.menu_url = <span class="string">'https://api.neumathe.xyz:8181/api/clist'</span></span><br><span class="line">    self.page_url = <span class="string">'https://api.neumathe.xyz:8181/api/qlist'</span></span><br><span class="line">    self.question_url = <span class="string">'https://api.neumathe.xyz:8181/api/question'</span></span><br><span class="line">    self.tk_dict = &#123;</span><br><span class="line">        <span class="string">'高等数学'</span>: <span class="string">'gs'</span>,</span><br><span class="line">        <span class="string">'概率统计'</span>: <span class="string">'gl'</span>,</span><br><span class="line">        <span class="string">'复变函数'</span>: <span class="string">'fb'</span>,</span><br><span class="line">        <span class="string">'线性代数'</span>: <span class="string">'xd'</span></span><br><span class="line">    &#125;</span><br><span class="line">    self.path = <span class="string">'.//images//'</span></span><br><span class="line">    self.children_path = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">        os.mkdir(self.path)</span><br></pre></td></tr></table></figure></div><p>紧接着我们创建了一个路径生成创建函数，然后访问目录接口，并对目录进行遍历，生成对应的文件夹目录，并将对应的的章节内容通过调用后面的函数来解决。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir_path</span><span class="params">(self, path, name)</span>:</span></span><br><span class="line">    result = path + name + <span class="string">'//'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(result):</span><br><span class="line">        os.mkdir(result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu_spider</span><span class="params">(self)</span>:</span></span><br><span class="line">    resp = requests.get(self.menu_url)</span><br><span class="line">    js_data = json.loads(resp.text)</span><br><span class="line">    data = js_data[<span class="string">'data'</span>][<span class="string">'trees'</span>]</span><br><span class="line">    <span class="comment"># 读取json中的数据,并创建文件夹</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        tk = self.tk_dict[str(i[<span class="string">'name'</span>])]</span><br><span class="line">        path = self.mkdir_path(self.path, str(i[<span class="string">'name'</span>]))</span><br><span class="line">        c_data = i[<span class="string">'data'</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> c_data:</span><br><span class="line">            c_path = self.mkdir_path(path, str(j[<span class="string">'text'</span>]))</span><br><span class="line">            child_data = j[<span class="string">'children'</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> child_data:</span><br><span class="line">                child_path = self.mkdir_path(c_path, k[<span class="string">'text'</span>])</span><br><span class="line">                self.child_path = child_path</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.page_spider(k[<span class="string">'id'</span>], str(k[<span class="string">'count'</span>]), tk)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                    self.page_spider(k[<span class="string">'id'</span>], str(k[<span class="string">'count'</span>]), tk)</span><br></pre></td></tr></table></figure></div><p>这是一个获取章节内容页问题接口的函数，通过将<code>per</code>参数设置为题目数，则通过一页内容便可以获取全部题目，在该函数中调用了题目接口获取题目的函数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_spider</span><span class="params">(self, Id, count, tk)</span>:</span></span><br><span class="line">    <span class="comment"># 如果count为0时直接返回False</span></span><br><span class="line">    <span class="keyword">if</span> str(count) == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    params = &#123;<span class="string">'tk'</span>: tk, <span class="string">'tid'</span>: Id, <span class="string">'page'</span>: <span class="string">'1'</span>, <span class="string">'per'</span>: count&#125;</span><br><span class="line">    resp = requests.get(self.page_url, params=params)</span><br><span class="line">    js_data = json.loads(resp.text)</span><br><span class="line">    data = js_data[<span class="string">'data'</span>][<span class="string">'list'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        count = data.index(i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.questions_spider(str(i), count)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            self.questions_spider(str(i), count)</span><br></pre></td></tr></table></figure></div><p>最后，是题目获取函数，在该函数中主要是对题目、正确答案、错误答案、注解进行了判断和命名，并对base64格式的图片进行了转化，将其转化为图片格式，以及文件读写。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">questions_spider</span><span class="params">(self, Id, count)</span>:</span></span><br><span class="line">    params = &#123;<span class="string">'name'</span>: Id&#125;</span><br><span class="line">    resp = requests.get(self.question_url, params=params)</span><br><span class="line">    data = json.loads(resp.text)[<span class="string">'data'</span>]</span><br><span class="line">    path = self.mkdir_path(self.child_path, <span class="string">f'question_<span class="subst">&#123;count + <span class="number">1</span>&#125;</span>'</span>)</span><br><span class="line">    <span class="comment"># 读写题目与问题</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            name = <span class="string">'question.jpg'</span></span><br><span class="line">        <span class="keyword">elif</span> i == int(data[<span class="string">'answer'</span>]):</span><br><span class="line">            name = <span class="string">'answer_right.jpg'</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">5</span>:</span><br><span class="line">            name = <span class="string">'tip.jpg'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name = <span class="string">f'answer_wrong<span class="subst">&#123;i&#125;</span>.jpg'</span></span><br><span class="line">        image = base64.b64decode(data[<span class="string">f'img<span class="subst">&#123;i&#125;</span>'</span>])</span><br><span class="line">        <span class="keyword">with</span> open(path + name, <span class="string">"wb"</span>) <span class="keyword">as</span> img:</span><br><span class="line">            img.write(image)</span><br><span class="line">    print(<span class="string">f'问题<span class="subst">&#123;path&#125;</span>下载完成...'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.menu_url = <span class="string">'https://api.neumathe.xyz:8181/api/clist'</span></span><br><span class="line">        self.page_url = <span class="string">'https://api.neumathe.xyz:8181/api/qlist'</span></span><br><span class="line">        self.question_url = <span class="string">'https://api.neumathe.xyz:8181/api/question'</span></span><br><span class="line">        self.tk_dict = &#123;</span><br><span class="line">            <span class="string">'高等数学'</span>: <span class="string">'gs'</span>,</span><br><span class="line">            <span class="string">'概率统计'</span>: <span class="string">'gl'</span>,</span><br><span class="line">            <span class="string">'复变函数'</span>: <span class="string">'fb'</span>,</span><br><span class="line">            <span class="string">'线性代数'</span>: <span class="string">'xd'</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.path = <span class="string">'.//images//'</span></span><br><span class="line">        self.child_path = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">            os.mkdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mkdir_path</span><span class="params">(self, path, name)</span>:</span></span><br><span class="line">        result = path + name + <span class="string">'//'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(result):</span><br><span class="line">            os.mkdir(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">menu_spider</span><span class="params">(self)</span>:</span></span><br><span class="line">        resp = requests.get(self.menu_url)</span><br><span class="line">        js_data = json.loads(resp.text)</span><br><span class="line">        data = js_data[<span class="string">'data'</span>][<span class="string">'trees'</span>]</span><br><span class="line">        <span class="comment"># 读取json中的数据,并创建文件夹</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            tk = self.tk_dict[str(i[<span class="string">'name'</span>])]</span><br><span class="line">            path = self.mkdir_path(self.path, str(i[<span class="string">'name'</span>]))</span><br><span class="line">            c_data = i[<span class="string">'data'</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> c_data:</span><br><span class="line">                c_path = self.mkdir_path(path, str(j[<span class="string">'text'</span>]))</span><br><span class="line">                child_data = j[<span class="string">'children'</span>]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> child_data:</span><br><span class="line">                    child_path = self.mkdir_path(c_path, k[<span class="string">'text'</span>])</span><br><span class="line">                    self.child_path = child_path</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        self.page_spider(k[<span class="string">'id'</span>], str(k[<span class="string">'count'</span>]), tk)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        time.sleep(<span class="number">2</span>)</span><br><span class="line">                        self.page_spider(k[<span class="string">'id'</span>], str(k[<span class="string">'count'</span>]), tk)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">page_spider</span><span class="params">(self, Id, count, tk)</span>:</span></span><br><span class="line">        <span class="comment"># 如果count为0时直接返回False</span></span><br><span class="line">        <span class="keyword">if</span> str(count) == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        params = &#123;<span class="string">'tk'</span>: tk, <span class="string">'tid'</span>: Id, <span class="string">'page'</span>: <span class="string">'1'</span>, <span class="string">'per'</span>: count&#125;</span><br><span class="line">        resp = requests.get(self.page_url, params=params)</span><br><span class="line">        js_data = json.loads(resp.text)</span><br><span class="line">        data = js_data[<span class="string">'data'</span>][<span class="string">'list'</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            count = data.index(i)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.questions_spider(str(i), count)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                self.questions_spider(str(i), count)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">questions_spider</span><span class="params">(self, Id, count)</span>:</span></span><br><span class="line">        params = &#123;<span class="string">'name'</span>: Id&#125;</span><br><span class="line">        resp = requests.get(self.question_url, params=params)</span><br><span class="line">        data = json.loads(resp.text)[<span class="string">'data'</span>]</span><br><span class="line">        path = self.mkdir_path(self.child_path, <span class="string">f'question_<span class="subst">&#123;count + <span class="number">1</span>&#125;</span>'</span>)</span><br><span class="line">        <span class="comment"># 读写题目与问题</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                name = <span class="string">'question.jpg'</span></span><br><span class="line">            <span class="keyword">elif</span> i == int(data[<span class="string">'answer'</span>]):</span><br><span class="line">                name = <span class="string">'answer_right.jpg'</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">5</span>:</span><br><span class="line">                name = <span class="string">'tip.jpg'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                name = <span class="string">f'answer_wrong<span class="subst">&#123;i&#125;</span>.jpg'</span></span><br><span class="line">            image = base64.b64decode(data[<span class="string">f'img<span class="subst">&#123;i&#125;</span>'</span>])</span><br><span class="line">            <span class="keyword">with</span> open(path + name, <span class="string">"wb"</span>) <span class="keyword">as</span> img:</span><br><span class="line">                img.write(image)</span><br><span class="line">        print(<span class="string">f'问题<span class="subst">&#123;path&#125;</span>下载完成...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    spider = Spider()</span><br><span class="line">    spider.menu_spider()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件I/O</title>
      <link href="/2020/07/29/Python-%E6%96%87%E4%BB%B6I-O/"/>
      <url>/2020/07/29/Python-%E6%96%87%E4%BB%B6I-O/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件-I-O-Python"><a href="#文件-I-O-Python" class="headerlink" title="文件 I/O  Python"></a>文件 I/O  Python</h1><h2 id="1、打开文件"><a href="#1、打开文件" class="headerlink" title="1、打开文件"></a>1、打开文件</h2><p>打开一个文件我们可以使用python的open()方法，该方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p><blockquote><p><strong>注意：</strong>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p><p>open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;open(file, mode=<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="open-函数的完整用法及参数"><a href="#open-函数的完整用法及参数" class="headerlink" title="open()函数的完整用法及参数"></a>open()函数的完整用法及参数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open(file, mode=<span class="string">'r'</span>, buffering=<span class="number">-1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">file</td><td align="left">必需，文件路径（相对或者绝对路径）</td></tr><tr><td align="left">mode</td><td align="left">可选，文件打开模式</td></tr><tr><td align="left">buffering</td><td align="left">设置缓冲</td></tr><tr><td align="left">encoding</td><td align="left">编码格式，一般使用<strong>utf-8</strong></td></tr><tr><td align="left">errors</td><td align="left">报错级别</td></tr><tr><td align="left">newline</td><td align="left">区分换行符</td></tr><tr><td align="left">closefd</td><td align="left">传入的file参数类型</td></tr><tr><td align="left">opener</td><td align="left">可以通过调用<em>opener</em>方式，使用自定义的开启器</td></tr></tbody></table><h3 id="mode参数模式及描述"><a href="#mode参数模式及描述" class="headerlink" title="mode参数模式及描述"></a>mode参数模式及描述</h3><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（不推荐）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>默认为文本模式，如果要以二进制模式打开，加上 <strong>b</strong> 。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'.//image//demo.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line">text = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></div><h3 id="with-open-as-f-用法"><a href="#with-open-as-f-用法" class="headerlink" title="with open() as  f 用法"></a>with open() as  f 用法</h3><p>通过该方法打开一个文件对象的好处是无须保证关闭文件对象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'.//image//demo.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br></pre></td></tr></table></figure></div><h2 id="2、file-对象"><a href="#2、file-对象" class="headerlink" title="2、file 对象"></a>2、file 对象</h2><p>file 对象使用 open() 函数来创建，对于 file 对象的属性以及常见的操作方法，将会在下面进行介绍。</p><h3 id="file对象的属性"><a href="#file对象的属性" class="headerlink" title="file对象的属性"></a>file对象的属性</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">closed</td><td align="left">标记文件是否已经关闭，由close()改写</td></tr><tr><td align="left">encoding</td><td align="left">文件的编码格式</td></tr><tr><td align="left">mode</td><td align="left">文件的打开模式</td></tr><tr><td align="left">name</td><td align="left">文件的名称</td></tr></tbody></table><h3 id="file-close-方法"><a href="#file-close-方法" class="headerlink" title="file.close() 方法"></a>file.close() 方法</h3><p><strong>close()</strong> 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作， 否则会触发 <em>ValueError</em> 错误，close() 方法允许调用多次。当 file 对象，被引用到操作另外一个文件时，Python 会自动关闭之前的 file 对象，使用 close() 方法关闭文件是一个好的习惯。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure></div><p>该方法没有返回值。</p><h3 id="file-read-方法"><a href="#file-read-方法" class="headerlink" title="file.read()  方法"></a>file.read()  方法</h3><p><strong>read()</strong> 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read(size)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">从文件中读取的字节数</td></tr></tbody></table><p>该方法的返回值是从字符串中读取的字节。</p><h3 id="file-readline-方法"><a href="#file-readline-方法" class="headerlink" title="file.readline()  方法"></a>file.readline()  方法</h3><p><strong>readline()</strong> 方法用于从文件读取整行，包括 “\n” 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 “\n” 字符。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.readline(size)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">从文件中读取的字节数</td></tr></tbody></table><p>该方法的返回值是从字符串中读取的字节。</p><h3 id="file-readlines-size-方法"><a href="#file-readlines-size-方法" class="headerlink" title="file.readlines(size) 方法"></a>file.readlines(size) 方法</h3><p><strong>readlines()</strong> 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for… in … 结构进行处理。如果碰到结束符 EOF 则返回空字符串。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.readlines()</span><br></pre></td></tr></table></figure></div><p>返回值将会是一个列表，该列表中包含文件所有的行。</p><h3 id="file-write-方法"><a href="#file-write-方法" class="headerlink" title="file.write() 方法"></a>file.write() 方法</h3><p><strong>write()</strong> 方法用于向文件中写入指定字符串。在文件关闭前或缓冲区刷新前，字符串内容存储在缓冲区中，这时你在文件中是看不到写入的内容的。如果文件打开模式带 b，那写入文件内容时，str (参数)要用 encode 方法转为 bytes 形式，否则报错：TypeError: a bytes-like object is required, not ‘str’。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.write(str)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">要写入文件的字符串</td></tr></tbody></table><p>该方法的返回值是写入的字符长度。</p><h3 id="file-writelines-方法"><a href="#file-writelines-方法" class="headerlink" title="file.writelines() 方法"></a>file.writelines() 方法</h3><p><strong>writelines()</strong> 方法用于向文件中写入一序列的字符串。这一序列字符串可以是由迭代对象产生的，如一个字符串列表，换行需要制定换行符 \n。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.writelines(str)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">要写入文件的字符串</td></tr></tbody></table><p>该方法没有返回值。</p><h3 id="file-seek-方法"><a href="#file-seek-方法" class="headerlink" title="file.seek() 方法"></a>file.seek() 方法</h3><p><strong>seek()</strong> 方法用于移动文件读取指针到指定位置。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.seek(offset, whence)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">offset</td><td align="left">开始的偏移量，也就是代表需要移动偏移的字节数</td></tr><tr><td align="left">whence</td><td align="left">可选，默认值为0，给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</td></tr></tbody></table><p>如果操作成功，则返回新的文件位置，如果操作失败，则函数返回-1。</p><h3 id="file-tell-方法"><a href="#file-tell-方法" class="headerlink" title="file.tell() 方法"></a>file.tell() 方法</h3><p><strong>tell()</strong> 方法返回文件的当前位置，即文件指针当前位置。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.tell()</span><br></pre></td></tr></table></figure></div><p>返回文件的当前位置。</p><h3 id="file-truncate-方法"><a href="#file-truncate-方法" class="headerlink" title="file.truncate() 方法"></a>file.truncate() 方法</h3><p><strong>truncate()</strong> 方法用于截断文件，如果指定了可选参数 size，则表示截断文件为 size 个字符。 如果没有指定 size，则从当前位置起截断；截断之后 size 后面的所有字符被删除。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.truncate(size)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">可选，如果存在则文件截断为 size 字节</td></tr></tbody></table><p>该方法没有返回值。</p><h3 id="flie-flush-方法"><a href="#flie-flush-方法" class="headerlink" title="flie.flush() 方法"></a>flie.flush() 方法</h3><p><strong>flush()</strong> 方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区写入。一般情况下，文件关闭后会自动刷新缓冲区，但有时你需要在关闭前刷新它，这时就可以使用 flush() 方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.flush()</span><br></pre></td></tr></table></figure></div><p>该方法没有返回值。</p><h3 id="file-fileno-方法"><a href="#file-fileno-方法" class="headerlink" title="file.fileno() 方法"></a>file.fileno() 方法</h3><p><strong>fileno()</strong> 方法返回一个整型的文件描述符(file descriptor FD 整型)，可用于底层操作系统的 I/O 操作。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.fileno()</span><br></pre></td></tr></table></figure></div><p>返回文件描述符。</p><h3 id="file-isatty-方法"><a href="#file-isatty-方法" class="headerlink" title="file.isatty() 方法"></a>file.isatty() 方法</h3><p><strong>isatty()</strong> 方法检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.isatty()</span><br></pre></td></tr></table></figure></div><p>如果连接到一个终端设备返回 True，否则返回 False。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件I/O </tag>
            
            <tag> File </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值的整数次方</title>
      <link href="/2020/07/26/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
      <url>/2020/07/26/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个double类型的浮点数base和int类型的整数exponent，求base的exponent次方。</p><blockquote><p>保证base和exponent不同时为0</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>第一种方式就是直接通过求base的exponent次方即可，但是直接乘要做998次乘法，这样做显然在效率上是不可以的。<br>$$<br>3 ^{ 999} = 3 * 3 * 3 * …… * 3<br>$$</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Power_1</span><span class="params">(self, base, exponent)</span>:</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(exponent):</span><br><span class="line">        result *= base</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></div><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>先求出2^k次幂：</p><p>$$<br>3 ^ 2 = 3 * 3<br>$$</p><p>$$<br>3 ^ 4 = 3 ^ 2* 3 ^ 2<br>$$</p><p>$$<br>3 ^ 8 = 3 ^ 4* 3 ^ 4<br>$$</p><p>$$<br>3 ^{16} = 3 ^ 8 * 3 ^ 8<br>$$</p><p>$$<br>3 ^ {32} = 3 ^{16} * 3 ^{16}<br>$$</p><p>$$<br>3 ^{64} = 3 ^ {32} * 3 ^ {32}<br>$$</p><p>$$<br>3 ^{128} = 3 ^ {64} * 3 ^ {64}<br>$$</p><p>$$<br>3 ^ {256} = 3 ^ {128} * 3 ^ {128}<br>$$</p><p>$$<br>3 ^ {512} = 3 ^ {256} * 3 ^ {256}<br>$$</p><p>再相乘：<br>$$<br>3 ^ {999}= 3 ^ {(512 + 256 + 128 + 64 + 32 + 4 + 2 + 1)}= 3 ^ {512}* 3 ^ {256} * 3 ^ {128} * 3 ^ {64}* 3 ^ {32} * 3 ^ 4 * 3 ^ 2 * 3<br>$$<br>这样只要做16次乘法，要比直接乘高效得多（尤其如果这里底数是成百上千位的大数据的话），而且我们发现，把999转为2进制数：1111100111，其各位就是要乘的数。</p><blockquote><p>我们只需利用exponent的二进制位即可，同时需要考虑exponent和base的特殊情况，比如0 、正、负等。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Power_2</span><span class="params">(self, base, exponent)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> base == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> exponent == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    sum, tmp, flag = <span class="number">1.0</span>, base, <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> exponent &lt; <span class="number">0</span>:</span><br><span class="line">        exponent, flag = -exponent, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> exponent &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exponent &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            sum *= tmp</span><br><span class="line">        tmp *= tmp</span><br><span class="line">        exponent = exponent &gt;&gt; <span class="number">1</span></span><br><span class="line">    sum = <span class="number">1</span> / sum <span class="keyword">if</span> flag == <span class="number">0</span> <span class="keyword">else</span> sum</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">给定一个double类型的浮点数base和int类型的整数exponent，求base的exponent次方。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Power_1</span><span class="params">(self, base, exponent)</span>:</span></span><br><span class="line">        result = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">if</span> exponent &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(-exponent):</span><br><span class="line">                result = result * base</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> / result</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(exponent):</span><br><span class="line">            result = result * base</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Power_2</span><span class="params">(self, base, exponent)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> base == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> exponent == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        sum, tmp, flag = <span class="number">1.0</span>, base, <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> exponent &lt; <span class="number">0</span>:</span><br><span class="line">            exponent, flag = -exponent, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> exponent &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> exponent &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">                sum *= tmp</span><br><span class="line">            tmp *= tmp</span><br><span class="line">            exponent = exponent &gt;&gt; <span class="number">1</span></span><br><span class="line">        sum = <span class="number">1</span> / sum <span class="keyword">if</span> flag == <span class="number">0</span> <span class="keyword">else</span> sum</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    print(solution.Power_1(<span class="number">3</span>, <span class="number">20</span>))</span><br><span class="line">    print(solution.Power_2(<span class="number">3</span>, <span class="number">20</span>))</span><br><span class="line">    print(solution.Power_1(<span class="number">3</span>, <span class="number">-20</span>))</span><br><span class="line">    print(solution.Power_2(<span class="number">3</span>, <span class="number">-20</span>))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 次方运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 正则表达式</title>
      <link href="/2020/07/23/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/07/23/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正则表达式-Python"><a href="#正则表达式-Python" class="headerlink" title="正则表达式  Python"></a>正则表达式  Python</h1><p>对于字符串的处理，我们就不得不提及正则表达式，他对于程序员来说，是学起来麻烦，用起来“真香”的一款工具。正则表达式是处理字符串的强大工具，它有自己特定的语法结构，对于实现字符串的检索、替换、匹配验证都是轻而易举。</p><p>正则表达式不是Python独有的，它也可以用在其他编程语言中。但Python的re库提供了整个正则表达式的实现，利用这个库，可以在Python中使用正则表达式，在Python中写正则表达式几乎都用这个库，下面列出了常用的匹配规则，然后了解它的一些常用方法。</p><h2 id="1、正则表达式模式"><a href="#1、正则表达式模式" class="headerlink" title="1、正则表达式模式"></a>1、正则表达式模式</h2><a href="http://image.tooltool.club/1574751943179881.png" data-fancybox="group" data-caption="25d033e6df9eb9b76966746df152b3a.png" class="fancybox"><img alt="25d033e6df9eb9b76966746df152b3a.png" style="zoom:150%;" title="25d033e6df9eb9b76966746df152b3a.png" data-src="http://image.tooltool.club/1574751943179881.png" class="lazyload"></a><h2 id="2、正则表达式修饰符（可选标志）"><a href="#2、正则表达式修饰符（可选标志）" class="headerlink" title="2、正则表达式修饰符（可选标志）"></a>2、正则表达式修饰符（可选标志）</h2><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left">re.L</td><td align="left">表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</td></tr><tr><td align="left">re.M</td><td align="left">多行匹配，影响 ^ 和 $</td></tr><tr><td align="left">re.S</td><td align="left">使 <strong>.</strong> 匹配包括换行在内的所有字符</td></tr><tr><td align="left">re.U</td><td align="left">表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</td></tr><tr><td align="left">re.X</td><td align="left">为了增加可读性，忽略空格和 <strong>#</strong> 后面的注释</td></tr></tbody></table><h2 id="3、正则表达式实例"><a href="#3、正则表达式实例" class="headerlink" title="3、正则表达式实例"></a>3、正则表达式实例</h2><h4 id="①-字符匹配"><a href="#①-字符匹配" class="headerlink" title="① 字符匹配"></a>① 字符匹配</h4><table><thead><tr><th align="left">实例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">python</td><td align="left">匹配 “python”</td></tr></tbody></table><p>② 字符类</p><table><thead><tr><th align="left">实例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[Pp]ython</td><td align="left">匹配 “Python” 或 “python”</td></tr><tr><td align="left">rub[ye]</td><td align="left">匹配 “ruby” 或 “rube”</td></tr><tr><td align="left">[aeiou]</td><td align="left">匹配中括号内的任意一个字母</td></tr><tr><td align="left">[0-9]</td><td align="left">匹配任何数字，类似于 [0123456789]</td></tr><tr><td align="left">[a-z]</td><td align="left">匹配任何小写字母</td></tr><tr><td align="left">[A-Z]</td><td align="left">匹配任何大写字母</td></tr><tr><td align="left">[a-zA-Z0-9]</td><td align="left">匹配任何字母及数字</td></tr><tr><td align="left">[^aeiou]</td><td align="left">除了aeiou字母以外的所有字符</td></tr><tr><td align="left">[^0-9]</td><td align="left">匹配除了数字外的字符</td></tr></tbody></table><p>③ 特殊字符类</p><table><thead><tr><th align="left">实例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">匹配除 “\n” 之外的任何单个字符，要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符，等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符，等价于 [^0-9]。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等，等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符，等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\w</td><td align="left">匹配包括下划线的任何单词字符，等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配任何非单词字符，等价于 ‘[^A-Za-z0-9_]’。</td></tr></tbody></table><h2 id="4、正则表达式方法"><a href="#4、正则表达式方法" class="headerlink" title="4、正则表达式方法"></a>4、正则表达式方法</h2><h3 id="re-match-函数"><a href="#re-match-函数" class="headerlink" title="re.match() 函数"></a>re.match() 函数</h3><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p><p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><table><thead><tr><th align="left">匹配对象方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">group(num=0)</td><td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组</td></tr><tr><td align="left">groups()</td><td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号</td></tr></tbody></table><h3 id="re-search-函数"><a href="#re-search-函数" class="headerlink" title="re.search() 函数"></a>re.search() 函数</h3><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p><p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><table><thead><tr><th align="left">匹配对象方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">group(num=0)</td><td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组</td></tr><tr><td align="left">groups()</td><td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号</td></tr></tbody></table><h3 id="re-match-与re-search-的区别"><a href="#re-match-与re-search-的区别" class="headerlink" title="re.match() 与re.search() 的区别"></a>re.match() 与re.search() 的区别</h3><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">string = <span class="string">"This is Pluto's personal blog"</span></span><br><span class="line"> </span><br><span class="line">match = re.match( <span class="string">r'blog'</span>, string, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">   print(<span class="string">"match.group() : "</span>, match.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(<span class="string">"No match!!"</span>)</span><br><span class="line"> </span><br><span class="line">search = re.search( <span class="string">r'blog'</span>, string, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> search:</span><br><span class="line">   print(<span class="string">"search.group() : "</span>, search.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(<span class="string">"No search!!"</span>)</span><br></pre></td></tr></table></figure></div><pre><code>No match!!search.group() :  blog</code></pre><h3 id="re-sub-函数"><a href="#re-sub-函数" class="headerlink" title="re.sub() 函数"></a>re.sub() 函数</h3><p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">repl</td><td align="left">替换的字符串，也可为一个函数</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">count</td><td align="left">模式匹配后替换的最大次数，默认 0 表示替换所有的匹配</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">string = <span class="string">"400-520-1314 # Pluto phone number"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除字符串中的 Python注释 </span></span><br><span class="line">phone = re.sub(<span class="string">r'#.*$'</span>, <span class="string">""</span>, string)</span><br><span class="line">print(<span class="string">"我的电话号码是: "</span>, phone)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除字符串中的 非数字部分</span></span><br><span class="line">phone = re.sub(<span class="string">r'\D'</span>, <span class="string">""</span>, string)</span><br><span class="line">print(<span class="string">"我的电话号码是: "</span>, phone)</span><br></pre></td></tr></table></figure></div><pre><code>我的电话号码是:  400-520-1314 我的电话号码是:  4005201314</code></pre><blockquote><p>当<code>repl</code>参数为一个函数的时候，则将会将匹配到的对象代入函数进行运算，然后将函数返回值作为替代。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字替换为原数字2倍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(matched)</span>:</span></span><br><span class="line">    value = int(matched.group(<span class="string">'value'</span>))</span><br><span class="line">    <span class="keyword">return</span> str(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">string = <span class="string">'A23G4HFD567'</span></span><br><span class="line">print(re.sub(<span class="string">'(?P&lt;value&gt;\d+)'</span>, double, string))</span><br></pre></td></tr></table></figure></div><pre><code>A46G8HFD1134</code></pre><h3 id="re-compile-函数"><a href="#re-compile-函数" class="headerlink" title="re.compile() 函数"></a>re.compile() 函数</h3><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(pattern, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">string = <span class="string">"one12twothree34four"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="comment"># 从'o'的位置开始匹配，没有匹配</span></span><br><span class="line">print(pattern.match(<span class="string">'one12twothree34four'</span>))</span><br><span class="line"><span class="comment"># 从'e'的位置开始匹配，没有匹配</span></span><br><span class="line">print(pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">2</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 从'1'的位置开始匹配，正好匹配</span></span><br><span class="line">print(pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 匹配成功并返回一个 Match 对象</span></span><br><span class="line">object = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">print(object.group())</span><br><span class="line">print(object.start())</span><br><span class="line">print(object.end())</span><br><span class="line">print(object.span())</span><br></pre></td></tr></table></figure></div><pre><code>NoneNone&lt;_sre.SRE_Match object; span=(3, 5), match=&apos;12&apos;&gt;1235(3, 5)</code></pre><blockquote><p>当匹配成功时返回一个 Match 对象，其中：</p><ul><li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li><li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li><li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li><li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code>。</li></ul></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于大小写英文单词/字母</span></span><br><span class="line">pattern = re.compile(<span class="string">r'([a-z]+) ([a-z]+)'</span>, re.I)</span><br><span class="line"><span class="comment"># 匹配成功并返回一个 Match 对象</span></span><br><span class="line">object = pattern.match(<span class="string">'Hello World Wide Web'</span>)</span><br><span class="line">print(object.group(<span class="number">0</span>))</span><br><span class="line">print(object.span(<span class="number">0</span>))</span><br><span class="line">print(object.group(<span class="number">1</span>))</span><br><span class="line">print(object.span(<span class="number">1</span>))</span><br><span class="line">print(object.group(<span class="number">2</span>))</span><br><span class="line">print(object.span(<span class="number">2</span>))</span><br><span class="line">print(object.groups())</span><br><span class="line">print(object.group(<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div><pre><code>Hello World(0, 11)Hello(0, 5)World(6, 11)(&apos;Hello&apos;, &apos;World&apos;)Traceback (most recent call last):    print(object.group(3))IndexError: no such group</code></pre><h3 id="findall-函数"><a href="#findall-函数" class="headerlink" title="findall()函数"></a>findall()函数</h3><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><p><strong>注意：</strong> match 和 search 是匹配一次 findall 匹配所有。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">findall(string, pos, endpos)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">string</td><td align="left">待匹配的字符串</td></tr><tr><td align="left">pos</td><td align="left">可选参数，指定字符串的起始位置，默认为0</td></tr><tr><td align="left">endpos</td><td align="left">可选参数，指定字符串的结束位置，默认为字符串的长度</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line">print(pattern.findall(<span class="string">'pluto 123 blog 456'</span>))</span><br><span class="line">print(pattern.findall(<span class="string">'plu000to123blog456'</span>, <span class="number">0</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></div><pre><code>[&apos;123&apos;, &apos;456&apos;][&apos;000&apos;, &apos;12&apos;]</code></pre><h3 id="re-finditer-函数"><a href="#re-finditer-函数" class="headerlink" title="re.finditer() 函数"></a>re.finditer() 函数</h3><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">objects = re.finditer(<span class="string">r"\d+"</span>,<span class="string">"12a34bc56de7f"</span>) </span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> objects: </span><br><span class="line">    <span class="keyword">print</span> (match.group() )</span><br></pre></td></tr></table></figure></div><pre><code>1234567</code></pre><h3 id="re-split-函数"><a href="#re-split-函数" class="headerlink" title="re.split() 函数"></a>re.split() 函数</h3><p>split 方法按照能够匹配的子串将字符串分割后返回列表。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">maxsplit</td><td align="left">分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.split(<span class="string">'\W+'</span>, <span class="string">'my, pluto, blog.'</span>))</span><br><span class="line">print(re.split(<span class="string">'(\W+)'</span>, <span class="string">' my, pluto, blog.'</span>))</span><br><span class="line">print(re.split(<span class="string">'\W+'</span>, <span class="string">' my, pluto, blog.'</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于一个找不到匹配的字符串而言，split不会对其作出分割</span></span><br><span class="line">re.split(<span class="string">'a*'</span>, <span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure></div><pre><code>[&apos;my&apos;, &apos;pluto&apos;, &apos;blog&apos;, &apos;&apos;][&apos;&apos;, &apos; &apos;, &apos;my&apos;, &apos;, &apos;, &apos;pluto&apos;, &apos;, &apos;, &apos;blog&apos;, &apos;.&apos;, &apos;&apos;][&apos;&apos;, &apos;my, pluto, blog.&apos;][&apos;hello world&apos;]</code></pre><h2 id="5、正则表达式对象"><a href="#5、正则表达式对象" class="headerlink" title="5、正则表达式对象"></a>5、正则表达式对象</h2><h3 id="re-RegexObject"><a href="#re-RegexObject" class="headerlink" title="re.RegexObject"></a>re.RegexObject</h3><p>re.compile() 返回 RegexObject 对象。</p><h3 id="re-MatchObject"><a href="#re-MatchObject" class="headerlink" title="re.MatchObject"></a>re.MatchObject</h3><p>group() 返回被 RE 匹配的字符串。</p><ul><li><strong>start()</strong> 返回匹配开始的位置</li><li><strong>end()</strong> 返回匹配结束的位置</li><li><strong>span()</strong> 返回一个元组包含匹配 (开始,结束) 的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> Re库 </tag>
            
            <tag> 查找 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变态跳台阶</title>
      <link href="/2020/07/23/%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
      <url>/2020/07/23/%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级 …… 也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><blockquote><p>给定一个台阶数number，输出上台阶的跳发F(n)。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>当台阶数为1时，只有一种跳法；</p></li><li><p>当台阶数为2时，则有两种跳法；</p></li><li><p>. . . . . .</p></li><li><p>对于n阶台阶：</p><ul><li>case 1：第一次跳了1个台阶，就有 f(n-1) 种跳法</li><li>case 2：第一次跳个2个台阶，就有 f(n-2) 种跳法</li><li>. . . . . .</li><li>case n：第一次跳了n个台阶，就有 0 种跳法<blockquote><p>将所有情况加起来，对于n级台阶，有：<code>f(n)=f(1)+f(2)+f(3)+..+f(n-1)+1</code>种跳法，如果直接用该式进行计算，每次计算f(n)时需要计算<code>n-1</code>个<code>f</code>，会有很多重复计算，考虑：</p><p>f(1) = 1<br>f(2) = 2<br>f(3) = f(2)+f(1)+1<br>f(4) = f(3)+f(2)+f(1)+1<br>f(5) = f(4)+f(3)+f(2)+f(1)+1 = f(4)+f(4)<br>f(6) = f(5)+f(4)+f(3)+f(2)+f(1)+1 = f(5)+f(5)<br>……<br>f(n) = f(n-1) + f(n-1)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self.jumpFloor(number - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3></li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">一只青蛙一次可以跳上1级台阶，也可以跳上2级 …… 也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">return</span> number</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * self.jumpFloor(number - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    print(solution.jumpFloor(<span class="number">4</span>))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 斐波那契数列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳台阶</title>
      <link href="/2020/07/23/%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
      <url>/2020/07/23/%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><blockquote><p>给定一个台阶数number，输出上台阶的跳发F(n)。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>当台阶数为1时，只有一种跳法；</p></li><li><p>当台阶数为2时，则有两种跳法；</p></li><li><p>. . . . . .</p></li><li><p>当台阶数为n(n&gt;2)时，则可以先假设有F(n)种跳法，如果第一节跳一阶台阶则有F(n) =  F(n-1)种跳法;如果第一节跳两节阶台阶则有F(n) = F(n-2)种跳法，故总共有F(n) = F(n-1) + F(n-2)，即典型的斐波那契数列问题。</p><blockquote><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家<strong>列昂纳多·斐波那契</strong>以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）。</p></blockquote><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4></li></ul><p>第一种方法是通过递归去解决斐波那契数列问题。</p><blockquote><p>但是如果不要过程值而只是需要结果值，不太推荐使用这种方式去求解（例如本题）。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_1</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.jumpFloor_1(number - <span class="number">1</span>) + self.jumpFloor_1(number<span class="number">-2</span>)</span><br></pre></td></tr></table></figure></div><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>第二种方法就是通过循环来解决斐波那契数列问题。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_2</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(number):</span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">    <span class="keyword">return</span> num1</span><br></pre></td></tr></table></figure></div><h4 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h4><p>第三种方法就是直接通过斐波那契数列的通项公式来解决。</p><p><a href="http://image.tooltool.club/image-20200723214205065.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://image.tooltool.club/image-20200723214205065.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_3</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    n = number + <span class="number">1</span></span><br><span class="line">    sqrt = pow(<span class="number">5</span>, <span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line">    result = (pow((<span class="number">1</span> + sqrt) / <span class="number">2</span>, n) - pow((<span class="number">1</span> - sqrt) / <span class="number">2</span>, n)) / sqrt</span><br><span class="line">    <span class="keyword">return</span> int(result)</span><br></pre></td></tr></table></figure></div><h4 id="思路四"><a href="#思路四" class="headerlink" title="思路四"></a>思路四</h4><p>通过矩阵相乘求解，原理是利用二阶矩阵的相乘。</p><p><a href="http://image.tooltool.club/v2-5c30e89ee33f01194bb9359623f51533_720w.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://image.tooltool.club/v2-5c30e89ee33f01194bb9359623f51533_720w.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/image-20200723215652026.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://image.tooltool.club/image-20200723215652026.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_4</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number + <span class="number">1</span>):</span><br><span class="line">        result = pow(np.matrix([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]], dtype=<span class="string">'int64'</span>), i) * np.matrix([[<span class="number">1</span>], [<span class="number">0</span>]])</span><br><span class="line">    <span class="keyword">return</span> int(result[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure></div><ul><li>以上就是斐波那锲数列的四种求解方式。</li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_1</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">return</span> number</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.jumpFloor_1(number - <span class="number">1</span>) + self.jumpFloor_1(number<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_2</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        num1, num2 = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> range(number):</span><br><span class="line">            num1, num2 = num2, num1 + num2</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_3</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        n = number + <span class="number">1</span></span><br><span class="line">        sqrt = pow(<span class="number">5</span>, <span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line">        result = (pow((<span class="number">1</span> + sqrt) / <span class="number">2</span>, n) - pow((<span class="number">1</span> - sqrt) / <span class="number">2</span>, n)) / sqrt</span><br><span class="line">        <span class="keyword">return</span> int(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor_4</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> result</span><br><span class="line">        <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(number + <span class="number">1</span>):</span><br><span class="line">            result = pow(np.matrix([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]], dtype=<span class="string">'int64'</span>), i) * np.matrix([[<span class="number">1</span>], [<span class="number">0</span>]])</span><br><span class="line">        <span class="keyword">return</span> int(result[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    print(solution.jumpFloor_1(<span class="number">4</span>))</span><br><span class="line">    print(solution.jumpFloor_2(<span class="number">4</span>))</span><br><span class="line">    print(solution.jumpFloor_3(<span class="number">4</span>))</span><br><span class="line">    print(solution.jumpFloor_4(<span class="number">4</span>))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 斐波那契数列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组的最小数字</title>
      <link href="/2020/07/23/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
      <url>/2020/07/23/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><blockquote><p>输入一个非递减排序的数组的一个旋转rotateArray，输出旋转数组的最小元素。</p><p>注：给出的所有元素都大于0，若数组大小为0，请返回0。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>直接遍历整个数组，找出其中最小的数。</p><blockquote><p>如果这么做，那还要你干啥……</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray_1</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(rotateArray) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    min = rotateArray[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> rotateArray:</span><br><span class="line">        <span class="keyword">if</span> index &lt; min:</span><br><span class="line">            min = index</span><br><span class="line">    <span class="keyword">return</span> min</span><br></pre></td></tr></table></figure></div><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>输入的数组是一个非递减数组的旋转，即其原数组是一个非递减序列，所以其原数组的第一个值就是这个序列的最小数字。所以，只要从给定的旋转数组中找到第一个上一个值比其大的数，其就是最小数。然后，考虑到效率问题，从后往前找效率更高一些，所以稍微优化了一丢丢。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray_2</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">    length = len(rotateArray)</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> rotateArray[i - <span class="number">1</span>] &gt; rotateArray[i]:</span><br><span class="line">            <span class="keyword">return</span> rotateArray[i]</span><br></pre></td></tr></table></figure></div><h4 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h4><p>第三种思路就是借助二分查找来实现，具体思路如下：</p><p>（1）我们用两个指针left,right分别指向数组的第一个元素和最后一个元素。按照题目的旋转的规则，第一个元素应该是大于最后一个元素的（没有重复的元素时）。  </p><blockquote><p>但是如果没有旋转，第一个元素肯定小于最后一个元素，或者由于后续指针的变化导致范围正好缩小成一个含有最小元素的递增子数组时，子数组的第一个元素小于最后一个元素，所以此时返回数组或者子数组的第一个值即可。</p></blockquote><p>（2）找到数组的中间元素， 如果中间元素大于第一个元素或最后一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面，所以，我们可以让第一个指针left指向中间元素的后一位；如果中间元素小于第一个元素或最后一个元素，则中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面，所以，我们可以让第二个指针right指向中间元素。  </p><p>（3）如果出现中间元素等于于第一个元素或最后一个元素的情况时，则数组中存在重复数组，只需要让第一个指针left增加1即可，然后再去按照以上思路操作，从而避免了数组为[1, 0, 1, 1, 1]这种情况的出现。</p><p>（4）按照以上思路，该旋转数组的范围将会被缩小，如果范围正好为一个递增子数组且最小数字在其中的时候，会直接返回数组或者子数组的第一个值，或者由于一直未符合上述要求，最后第一个指针left和第二个指针right重合，此时会退出循环，而所对应的元素值也正是最小值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray_3</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">    length = len(rotateArray)</span><br><span class="line">    left, right = <span class="number">0</span>, length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">if</span> rotateArray[left] &lt; rotateArray[right]:</span><br><span class="line">            <span class="keyword">return</span> rotateArray[left]</span><br><span class="line">        mid = int(left + (right - left) / <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 如果左半数组为有序数组</span></span><br><span class="line">        <span class="keyword">if</span> rotateArray[left] &lt; rotateArray[mid]:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果右半数组为有序数组</span></span><br><span class="line">        <span class="keyword">elif</span> rotateArray[mid] &lt; rotateArray[right]:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="comment"># 出现重复数字时的操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> rotateArray[left]</span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</span></span><br><span class="line"><span class="string">输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。</span></span><br><span class="line"><span class="string">例如数组&#123;3,4,5,1,2&#125;为&#123;1,2,3,4,5&#125;的一个旋转，该数组的最小值为1。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray_1</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        min = rotateArray[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> rotateArray:</span><br><span class="line">            <span class="keyword">if</span> index &lt; min:</span><br><span class="line">                min = index</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray_2</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        length = len(rotateArray)</span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> rotateArray[i - <span class="number">1</span>] &gt; rotateArray[i]:</span><br><span class="line">                <span class="keyword">return</span> rotateArray[i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray_3</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        length = len(rotateArray)</span><br><span class="line">        left, right = <span class="number">0</span>, length - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> rotateArray[left] &lt; rotateArray[right]:</span><br><span class="line">                <span class="keyword">return</span> rotateArray[left]</span><br><span class="line">            mid = int(left + (right - left) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 如果左半数组为有序数组</span></span><br><span class="line">            <span class="keyword">if</span> rotateArray[left] &lt; rotateArray[mid]:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果右半数组为有序数组</span></span><br><span class="line">            <span class="keyword">elif</span> rotateArray[mid] &lt; rotateArray[right]:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="comment"># 出现重复数字时的操作</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> rotateArray[left]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    rotateArray = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    print(solution.minNumberInRotateArray_1(rotateArray))</span><br><span class="line">    print(solution.minNumberInRotateArray_2(rotateArray))</span><br><span class="line">    print(solution.minNumberInRotateArray_3(rotateArray))</span><br><span class="line">rotateArray = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    print(solution.minNumberInRotateArray_1(rotateArray))</span><br><span class="line">    print(solution.minNumberInRotateArray_2(rotateArray))</span><br><span class="line">    print(solution.minNumberInRotateArray_3(rotateArray))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 查找 </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2020/07/22/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2020/07/22/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作，队列中的元素为int类型。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote><p>明确栈和队列的特点：</p><ul><li><p>栈  ：先入后出</p></li><li><p>队列：先入先出</p></li></ul></blockquote><p>所以本题本质上就是使用两个先入后出实现一个先入先出，负负得正的简单逻辑，即先将元素存储到栈1中，添加的时候直接加入到栈1中，弹出的时候借助栈2，先将栈尾的元素依次存入栈2，此时栈2最后的元素即为最先进入栈的元素，弹出即可，最后将栈2的元素再依次存回栈1中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">       self.stack1.append(node)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="comment"># 将栈1中的元素弹出添加到栈2</span></span><br><span class="line">       <span class="keyword">while</span> self.stack1:</span><br><span class="line">           self.stack2.append(self.stack1.pop())</span><br><span class="line">       <span class="comment"># 将栈2最后一个元素弹出</span></span><br><span class="line">       index = self.stack2.pop()</span><br><span class="line">       <span class="comment"># 将栈2中的剩余元素弹出添加到栈1</span></span><br><span class="line">       <span class="keyword">while</span> self.stack2:</span><br><span class="line">           self.stack1.append(self.stack2.pop())</span><br><span class="line">       <span class="comment"># 返回元素值</span></span><br><span class="line">       <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">用两个栈来实现一个队列，完成队列的Push和Pop操作，队列中的元素为int类型。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack1 = []</span><br><span class="line">        self.stack2 = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.stack1.append(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 将栈1中的元素弹出添加到栈2</span></span><br><span class="line">        <span class="keyword">while</span> self.stack1:</span><br><span class="line">            self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="comment"># 将栈2最后一个元素弹出</span></span><br><span class="line">        index = self.stack2.pop()</span><br><span class="line">        <span class="comment"># 将栈2中的剩余元素弹出添加到栈1</span></span><br><span class="line">        <span class="keyword">while</span> self.stack2:</span><br><span class="line">            self.stack1.append(self.stack2.pop())</span><br><span class="line">        <span class="comment"># 返回元素值</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    solution.push(<span class="number">1</span>)</span><br><span class="line">    solution.push(<span class="number">2</span>)</span><br><span class="line">    solution.push(<span class="number">3</span>)</span><br><span class="line">    solution.push(<span class="number">4</span>)</span><br><span class="line">    print(solution.pop())</span><br><span class="line">    print(solution.pop())</span><br><span class="line">    print(solution.pop())</span><br><span class="line">    print(solution.pop())</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 队列 </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建二叉树</title>
      <link href="/2020/07/22/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/07/22/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><blockquote><p>给定某二叉树的前序遍历和中序遍历的结果，返回重建的二叉树。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote><p>前序遍历：</p><p>访问根节点 — 遍历左子树 — 遍历右子树</p><p>中序遍历：</p><p>遍历左子树 — 访问根节点 — 遍历右子树</p><p>后序遍历：</p><p>后序遍历左子树 — 后序遍历右子树 — 访问根节点</p></blockquote><p>首先根据题目画出两个列表，然后标出节点关系分析！</p><p><a href="http://image.tooltool.club/image-20200722193627355.png" data-fancybox="group" data-caption="image-20200722193627355" class="fancybox"><img alt="image-20200722193627355" title="image-20200722193627355" data-src="http://image.tooltool.club/image-20200722193627355.png" class="lazyload"></a></p><p>1，因为前序遍历序列的第一个节点一定是一个二叉树的根，所以从前序的第一个数据开始也就是1，把1映射到中序遍历序列中，并记下在中序遍历序列中的位置，又因为在中序序列中是按照leftChild—root—rightChild的方式遍历的所以在中序遍历序列中以之前记下的位置为分界，得到以1根的左右子树（分别是472和5386）。</p><p>2，上面第一步只是把整个二叉树分出左右子树，然后再在前序中找到下一个数据也就是2，再把2在中序遍历序列中对应的位置记录下来，此时，2的位置在中序遍历序列的最右端（即2的右子树长度为0），也就说明2还可以继续向下“派生”左子树，那么继续访问前序序列中的下一个元素也就是4。</p><p>3，同样的步骤，4在中序遍历序列中的位置处于最左端（即4的左子树长度为0），这说明4不能够再有左子树，此时便可以把4的左子树置为NULL，这时候再考虑4的右子树是否存在，因为在中序遍历序列中4的右面是7，所以4的右子树是7。</p><p>4，而7在中序遍历序列中，7的左边是4，是7的父节点，所以7的左子树置为NULL，7的右边是2，是7父节点的父节点，所以7的右子树置为NULL。</p><p>5，类似的方式再考虑3的左右子树存在问题，如果右子树长度不是0，那么就在前序中选出相应的数据……</p><p>6，最后，递归求解其leftChild和rightChild对应的二叉树，这样最终即可恢复整棵树……</p><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree_1</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">    <span class="comment"># 通过根创建二叉树</span></span><br><span class="line">    rootNode = TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 记下根在中序遍历序列中的位置</span></span><br><span class="line">    rootIndex = tin.index(pre[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 把整个二叉树分出左右子树</span></span><br><span class="line">    left_pre = pre[<span class="number">1</span>:rootIndex + <span class="number">1</span>]</span><br><span class="line">    right_pre = pre[rootIndex + <span class="number">1</span>:]</span><br><span class="line">    left_tin = tin[<span class="number">0</span>:rootIndex]</span><br><span class="line">    right_tin = tin[rootIndex + <span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># 递归求解其左右子树对应的二叉树</span></span><br><span class="line">    rootNode.left = self.resolution(left_pre, left_tin)</span><br><span class="line">    rootNode.right = self.resolution(right_pre, right_tin)</span><br><span class="line">    <span class="comment"># 返回重建二叉树</span></span><br><span class="line">    <span class="keyword">return</span> rootNode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(tin) == <span class="number">0</span>:</span><br><span class="line">        indexNode = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">elif</span> len(tin) == <span class="number">1</span>:</span><br><span class="line">        indexNode = TreeNode(tin[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        indexNode = self.reConstructBinaryTree_1(pre, tin)</span><br><span class="line">    <span class="keyword">return</span> indexNode</span><br></pre></td></tr></table></figure></div><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree_2</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pre <span class="keyword">or</span> <span class="keyword">not</span> tin:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    rootNode = TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">    rootIndex = tin.index(pre[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> rootIndex &gt; <span class="number">0</span>:</span><br><span class="line">        rootNode.left = self.reConstructBinaryTree_2(pre[<span class="number">1</span>:<span class="number">1</span> + rootIndex], tin[:rootIndex])</span><br><span class="line">    <span class="keyword">if</span> rootIndex &lt; len(tin) - <span class="number">1</span>:</span><br><span class="line">        rootNode.right = self.reConstructBinaryTree_2(pre[rootIndex + <span class="number">1</span>:], tin[rootIndex + <span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> rootNode</span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列&#123;1,2,4,7,3,5,6,8&#125;和中序遍历序列&#123;4,7,2,1,5,3,8,6&#125;，则重建二叉树并返回。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree_1</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">        <span class="comment"># 通过根创建二叉树</span></span><br><span class="line">        rootNode = TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 记下根在中序遍历序列中的位置</span></span><br><span class="line">        rootIndex = tin.index(pre[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 把整个二叉树分出左右子树</span></span><br><span class="line">        left_pre = pre[<span class="number">1</span>:rootIndex + <span class="number">1</span>]</span><br><span class="line">        right_pre = pre[rootIndex + <span class="number">1</span>:]</span><br><span class="line">        left_tin = tin[<span class="number">0</span>:rootIndex]</span><br><span class="line">        right_tin = tin[rootIndex + <span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 递归求解其左右子树对应的二叉树</span></span><br><span class="line">        rootNode.left = self.resolution(left_pre, left_tin)</span><br><span class="line">        rootNode.right = self.resolution(right_pre, right_tin)</span><br><span class="line">        <span class="comment"># 返回重建二叉树</span></span><br><span class="line">        <span class="keyword">return</span> rootNode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(tin) == <span class="number">0</span>:</span><br><span class="line">            indexNode = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(tin) == <span class="number">1</span>:</span><br><span class="line">            indexNode = TreeNode(tin[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            indexNode = self.reConstructBinaryTree_1(pre, tin)</span><br><span class="line">        <span class="keyword">return</span> indexNode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree_2</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pre <span class="keyword">or</span> <span class="keyword">not</span> tin:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        rootNode = TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">        rootIndex = tin.index(pre[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> rootIndex &gt; <span class="number">0</span>:</span><br><span class="line">            rootNode.left = self.reConstructBinaryTree_2(pre[<span class="number">1</span>:<span class="number">1</span> + rootIndex], tin[:rootIndex])</span><br><span class="line">        <span class="keyword">if</span> rootIndex &lt; len(tin) - <span class="number">1</span>:</span><br><span class="line">            rootNode.right = self.reConstructBinaryTree_2(pre[rootIndex + <span class="number">1</span>:], tin[rootIndex + <span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> rootNode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    pre = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">    tin = [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line">    headNode_1 = solution.reConstructBinaryTree_1(pre, tin)</span><br><span class="line">    headNode_2 = solution.reConstructBinaryTree_2(pre, tin)</span><br><span class="line">    print(headNode_1, headNode_2)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从未到头打印链表</title>
      <link href="/2020/07/22/%E4%BB%8E%E6%9C%AA%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/07/22/%E4%BB%8E%E6%9C%AA%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p><blockquote><p>给定一个链表listNode，返回该链表从尾到头的顺序列表arrayList。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题目的解题过程只需要对链表进行遍历，并通过列表的insert插入方法实现对数据的倒序排列即可。</p><blockquote><p>本题还应该注意一下链表的创建、特点和使用。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">       arrayList = []</span><br><span class="line">       <span class="keyword">while</span> listNode != <span class="literal">None</span>:</span><br><span class="line">           arrayList.insert(<span class="number">0</span>, listNode.val)</span><br><span class="line">           listNode = listNode.next</span><br><span class="line">       <span class="keyword">return</span> arrayList</span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        self.val = index</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">        arrayList = []</span><br><span class="line">        <span class="keyword">while</span> listNode != <span class="literal">None</span>:</span><br><span class="line">            arrayList.insert(<span class="number">0</span>, listNode.val)</span><br><span class="line">            listNode = listNode.next</span><br><span class="line">        <span class="keyword">return</span> arrayList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    <span class="comment"># 创建一个简单的链表</span></span><br><span class="line">    node1 = ListNode(<span class="number">1</span>)</span><br><span class="line">    node2 = ListNode(<span class="number">2</span>)</span><br><span class="line">    node3 = ListNode(<span class="number">3</span>)</span><br><span class="line">    node4 = ListNode(<span class="number">4</span>)</span><br><span class="line">    node1.next = node2</span><br><span class="line">    node2.next = node3</span><br><span class="line">    node3.next = node4</span><br><span class="line">    print(solution.Print(node1))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空格替换</title>
      <link href="/2020/07/21/%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/"/>
      <url>/2020/07/21/%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="空格替换"><a href="#空格替换" class="headerlink" title="空格替换"></a>空格替换</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请编写一个方法，将字符串中的空格全部替换为“%20”。假定该字符串有足够的空间存放新增的字符，并且知道字符串的真实长度(小于等于1000)，同时保证字符串由大小写的英文字母组成。</p><blockquote><p>给定一个原始的字符串string，以及字符串的长度length, 返回替换后的string。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><blockquote><p>本题目需要注意的是，本题是要替换字符串，而未规定是否允许重新创建一个字符串，然后在新的字符串上进行赋值操作。</p></blockquote><p>所以在允许创建新的字符串或者说是允许额外开辟空间的情况下，代码实现如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_1</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">       resultString = <span class="string">''</span></span><br><span class="line">       <span class="keyword">for</span> itemChar <span class="keyword">in</span> string:</span><br><span class="line">           <span class="keyword">if</span> itemChar == <span class="string">' '</span>:</span><br><span class="line">               resultString += <span class="string">'%20'</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               resultString += itemChar</span><br><span class="line">       <span class="keyword">return</span> resultString</span><br></pre></td></tr></table></figure></div><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>在不允许创建新的字符串或者说是不允许额外开辟空间的情况下，我们则可以将该字符串进行切片操作并将新生成的字符串重新赋值给原来的字符串，代码实现如下：</p><blockquote><p>在本题目中，题目还给了另外一个参数字符串的长度length，但在第一问中我们并未使用该参数，所以我们可以在遍历的范围选择时使用该参数。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_2</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">       <span class="keyword">for</span> itemChar <span class="keyword">in</span> range(length):</span><br><span class="line">           <span class="keyword">if</span> string[itemChar] == <span class="string">' '</span>:</span><br><span class="line">               string = string[:itemChar] + <span class="string">'%20'</span> + string[itemChar + <span class="number">1</span>:]</span><br><span class="line">       <span class="keyword">return</span> string</span><br></pre></td></tr></table></figure></div><h4 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h4><p>其实，替换字符串我们可以直接用python自带的函数replace来实现，实现代码如下：</p><blockquote><p>此时需要注意的是，replace方法不会改变原字符串，所以本思路在使用过程中是需要注意使用方法的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_3</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">       string.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br><span class="line">       <span class="keyword">return</span> string</span><br></pre></td></tr></table></figure></div></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正确代码</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_3</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> string.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br></pre></td></tr></table></figure></div><h4 id="思路四"><a href="#思路四" class="headerlink" title="思路四"></a>思路四</h4><p>既然提到了python的自带函数实现，那就不得不提及编程中处理字符串的强大工具——正则表达式，它有自己特定的语法结构，实现字符串的检索、替换、匹配验证都不在话下，至于正则表达式的使用将会在后续博客中更新。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">请编写一个方法，将字符串中的空格全部替换为“%20”。假定该字符串有足够的空间存放新增的字符，并且知道字符串的真实长度(小于等于1000)，同时保证字符串由大小写的英文字母组成。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_1</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">        resultString = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> itemChar <span class="keyword">in</span> string:</span><br><span class="line">            <span class="keyword">if</span> itemChar == <span class="string">' '</span>:</span><br><span class="line">                resultString += <span class="string">'%20'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resultString += itemChar</span><br><span class="line">        <span class="keyword">return</span> resultString</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_2</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> itemChar <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">if</span> string[itemChar] == <span class="string">' '</span>:</span><br><span class="line">                string = string[:itemChar] + <span class="string">'%20'</span> + string[itemChar + <span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace_3</span><span class="params">(self, string, length)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> string.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    soulution = Solution()</span><br><span class="line">    string = <span class="string">'We are family!'</span></span><br><span class="line">    length = len(string)</span><br><span class="line">    print(soulution.replaceSpace_1(string, length))</span><br><span class="line">    print(soulution.replaceSpace_2(string, length))</span><br><span class="line">    print(soulution.replaceSpace_3(string, length))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="/2020/07/21/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/07/21/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><blockquote><p>给定要匹配的整数target，以及二维数组array，返回布尔值。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>按照行列通过for循环对每行每列进行遍历即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find_1</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> array:</span><br><span class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> row:</span><br><span class="line">            <span class="keyword">if</span> column == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></div><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>由于数组按照行列都是递增的，从数组的左下角看，向上是递减的，向右是递增的，所以可以从数组的左下角开始遍历，如果target比当前数字小就向上走，否则就向右边走。</p><blockquote><p>主要是找准起始点，该点所对的两个方向，往一个方向是递增的，往另一个方向走是递减的。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find_2</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">    <span class="comment"># rowLen表示列数arrayRowLength</span></span><br><span class="line">    rowLen = len(array)</span><br><span class="line">    <span class="comment"># colLen表示行数arrayColumnLength</span></span><br><span class="line">    colLen = len(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># rowIndex表示当前行数</span></span><br><span class="line">    rowIndex = rowLen - <span class="number">1</span></span><br><span class="line">    <span class="comment"># colIndex表示当前列数</span></span><br><span class="line">    colIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rowLen &gt; rowIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> colLen &gt;= colIndex &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> target &lt; array[rowIndex][colIndex]:</span><br><span class="line">            rowIndex -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> target &gt; array[rowIndex][colIndex]:</span><br><span class="line">            colIndex += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> target == array[rowIndex][colIndex]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></div><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序，请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find_1</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> array:</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> row:</span><br><span class="line">                <span class="keyword">if</span> column == target:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find_2</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        <span class="comment"># rowLen表示列数arrayRowLength</span></span><br><span class="line">        rowLen = len(array)</span><br><span class="line">        <span class="comment"># colLen表示行数arrayColumnLength</span></span><br><span class="line">        colLen = len(array[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># rowIndex表示当前行数</span></span><br><span class="line">        rowIndex = rowLen - <span class="number">1</span></span><br><span class="line">        <span class="comment"># colIndex表示当前列数</span></span><br><span class="line">        colIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> rowLen &gt; rowIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> colLen &gt;= colIndex &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> target &lt; array[rowIndex][colIndex]:</span><br><span class="line">                rowIndex -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &gt; array[rowIndex][colIndex]:</span><br><span class="line">                colIndex += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target == array[rowIndex][colIndex]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    array = [[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], </span><br><span class="line">             [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>], </span><br><span class="line">             [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>], </span><br><span class="line">             [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">25</span>]]</span><br><span class="line">    target = <span class="number">10</span></span><br><span class="line">    solution = Solution()</span><br><span class="line">    result_1 = solution.Find_1(target, array)</span><br><span class="line">    print(result_1)</span><br><span class="line">    result_2 = solution.Find_1(target, array)</span><br><span class="line">    print(result_2)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 查找 </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 结构体</title>
      <link href="/2020/05/24/C++%20%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2020/05/24/C++%20%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="1、结构体基本概念"><a href="#1、结构体基本概念" class="headerlink" title="1、结构体基本概念"></a>1、结构体基本概念</h2><p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型</p><h2 id="2、结构体定义和使用"><a href="#2、结构体定义和使用" class="headerlink" title="2、结构体定义和使用"></a>2、结构体定义和使用</h2><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">stu1.name = <span class="string">"张三"</span>;</span><br><span class="line">stu1.age = <span class="number">18</span>;</span><br><span class="line">stu1.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu1.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式2</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> = &#123;</span> <span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu2.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu3.name = <span class="string">"王五"</span>;</span><br><span class="line">stu3.age = <span class="number">18</span>;</span><br><span class="line">stu3.score = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu3.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p><p>总结2：创建结构体变量时，关键字struct可以省略</p><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h2 id="3、结构体数组"><a href="#3、结构体数组" class="headerlink" title="3、结构体数组"></a>3、结构体数组</h2><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#123;<span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">&#123;<span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">&#123;<span class="string">"王五"</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; arr[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="4、结构体指针"><a href="#4、结构体指针" class="headerlink" title="4、结构体指针"></a>4、结构体指针</h2><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> = &#123;</span> <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> = &amp;<span class="title">stu</span>;</span></span><br><span class="line"></span><br><span class="line">p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h2 id="5、结构体嵌套结构体"><a href="#5、结构体嵌套结构体" class="headerlink" title="5、结构体嵌套结构体"></a>5、结构体嵌套结构体</h2><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line"><span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//教师姓名</span></span><br><span class="line"><span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">t1.id = <span class="number">10000</span>;</span><br><span class="line">t1.name = <span class="string">"老王"</span>;</span><br><span class="line">t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">t1.stu.name = <span class="string">"张三"</span>;</span><br><span class="line">t1.stu.age = <span class="number">18</span>;</span><br><span class="line">t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"教师 职工编号： "</span> &lt;&lt; t1.id &lt;&lt; <span class="string">" 姓名： "</span> &lt;&lt; t1.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; t1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"辅导学员 姓名： "</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">" 考试分数： "</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h2 id="6、结构体做函数参数"><a href="#6、结构体做函数参数" class="headerlink" title="6、结构体做函数参数"></a>6、结构体做函数参数</h2><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu.age = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"子函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu-&gt;age = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"子函数中 姓名："</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">student stu = &#123; <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line">printStudent(stu);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"主函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line">printStudent2(&amp;stu);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"主函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h2 id="7、结构体中-const使用场景"><a href="#7、结构体中-const使用场景" class="headerlink" title="7、结构体中 const使用场景"></a>7、结构体中 const使用场景</h2><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line"><span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">student stu = &#123; <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">printStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="8、结构体案例"><a href="#8、结构体案例" class="headerlink" title="8、结构体案例"></a>8、结构体案例</h2><h2 id="8-1、案例1"><a href="#8-1、案例1" class="headerlink" title="8.1、案例1"></a>8.1、案例1</h2><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> tName = <span class="string">"教师"</span>;</span><br><span class="line"><span class="built_in">string</span> sName = <span class="string">"学生"</span>;</span><br><span class="line"><span class="built_in">string</span> nameSeed = <span class="string">"ABCDE"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">tArray[i].name = tName + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">tArray[i].sArray[j].score = rand() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\t姓名："</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">allocateSpace(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">printTeachers(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="8-2、案例2"><a href="#8-2、案例2" class="headerlink" title="8.2、案例2"></a>8.2、案例2</h2><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"刘备"</span>,<span class="number">23</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"关羽"</span>,<span class="number">22</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"张飞"</span>,<span class="number">20</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"赵云"</span>,<span class="number">21</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"貂蝉"</span>,<span class="number">19</span>,<span class="string">"女"</span>&#125;,</span><br></pre></td></tr></table></figure></div><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">&#123;</span><br><span class="line">hero temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名： "</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">" 性别： "</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; arr[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#123;<span class="string">"刘备"</span>,<span class="number">23</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"关羽"</span>,<span class="number">22</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"张飞"</span>,<span class="number">20</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"赵云"</span>,<span class="number">21</span>,<span class="string">"男"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"貂蝉"</span>,<span class="number">19</span>,<span class="string">"女"</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">bubbleSort(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">printHeros(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> 结构体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 指针</title>
      <link href="/2020/05/17/C++%20%E6%8C%87%E9%92%88/"/>
      <url>/2020/05/17/C++%20%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-指针"><a href="#C-指针" class="headerlink" title="C++ 指针"></a>C++ 指针</h1><h2 id="1、指针的基本概念"><a href="#1、指针的基本概念" class="headerlink" title="1、指针的基本概念"></a>1、指针的基本概念</h2><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li>内存编号是从0开始记录的，一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h2 id="2、指针变量的定义和使用"><a href="#2、指针变量的定义和使用" class="headerlink" title="2、指针变量的定义和使用"></a>2、指针变量的定义和使用</h2><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、指针的定义</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line"><span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量赋值</span></span><br><span class="line">p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印数据a的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、指针的使用</span></span><br><span class="line"><span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*p = "</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h2 id="3、指针所占内存空间"><a href="#3、指针所占内存空间" class="headerlink" title="3、指针所占内存空间"></a>3、指针所占内存空间</h2><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * p;</span><br><span class="line">p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//* 解引用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h2 id="4、空指针和野指针"><a href="#4、空指针和野指针" class="headerlink" title="4、空指针和野指针"></a>4、空指针和野指针</h2><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line"><span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问空指针报错 </span></span><br><span class="line"><span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line"><span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问野指针报错 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h2 id="5、const修饰指针"><a href="#5、const修饰指针" class="headerlink" title="5、const修饰指针"></a>5、const修饰指针</h2><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line"><span class="comment">//*p1 = 100;  报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line"><span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line"><span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line"><span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h2 id="6、指针和数组"><a href="#6、指针和数组" class="headerlink" title="6、指针和数组"></a>6、指针和数组</h2><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第一个元素： "</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"指针访问第一个元素： "</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用指针遍历数组</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="7、指针和函数"><a href="#7、指针和函数" class="headerlink" title="7、指针和函数"></a>7、指针和函数</h2><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b; </span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">swap1(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">swap2(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h2 id="8、指针、数组、函数"><a href="#8、指针、数组、函数" class="headerlink" title="8、指针、数组、函数"></a>8、指针、数组、函数</h2><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">bubbleSort(arr, len);</span><br><span class="line"></span><br><span class="line">printArray(arr, len);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 函数</title>
      <link href="/2020/05/10/C++%20%E5%87%BD%E6%95%B0/"/>
      <url>/2020/05/10/C++%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-函数"><a href="#C-函数" class="headerlink" title="C++ 函数"></a>C++ 函数</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h2 id="2、函数的定义"><a href="#2、函数的定义" class="headerlink" title="2、函数的定义"></a>2、函数的定义</h2><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3、函数的调用"><a href="#3、函数的调用" class="headerlink" title="3、函数的调用"></a>3、函数的调用</h2><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code>函数名（参数）</code></p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//调用add函数</span></span><br><span class="line"><span class="keyword">int</span> sum = add(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">sum = add(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h2 id="4、值传递"><a href="#4、值传递" class="headerlink" title="4、值传递"></a>4、值传递</h2><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，如果形参发生，并不会影响实参</li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"mian中的 a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"mian中的 b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h2 id="5、函数的常见样式"><a href="#5、函数的常见样式" class="headerlink" title="5、函数的常见样式"></a>5、函数的常见样式</h2><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"this is test01"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"this is test02"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"this is test03 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"this is test04 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> sum = a + b;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="6、函数的声明"><a href="#6、函数的声明" class="headerlink" title="6、函数的声明"></a>6、函数的声明</h2><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="7、函数的分文件编写"><a href="#7、函数的分文件编写" class="headerlink" title="7、函数的分文件编写"></a>7、函数的分文件编写</h2><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"swap.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;main函数文件</span><br><span class="line">#include &quot;swap.h&quot;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">int a &#x3D; 100;</span><br><span class="line">int b &#x3D; 200;</span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数 </tag>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猴子排序</title>
      <link href="/2020/05/04/%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/04/%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="猴子排序"><a href="#猴子排序" class="headerlink" title="猴子排序"></a>猴子排序</h1><blockquote><p>猴子算法，就像猴子与打字机所描述的那样，一只猴子随机敲打打字机键盘，如果时间足够长，总是能打出特定的文本，比如莎士比亚全集。所以对于一个乱序数组，随机打乱数组，检查是否排好序，若是，则输出，否则再次打乱，再检查…最佳情况O(n)，平均O(n*n!)，最坏可执行直到世界的尽头，反正应该可以输出正确的排序后的数组。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>随机打乱数组，检查是否排好序；</li><li>若排序完成，则输出，否则再次打乱。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/timg" data-fancybox="group" data-caption="猴子排序" class="fancybox"><img alt="猴子排序" title="猴子排序" data-src="http://image.tooltool.club/timg" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bogoSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        random.shuffle(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[i + <span class="number">1</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(bogoSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre><blockquote><p>别问我结果出来等了多久，我才不会傻到去跑这种代码，结果是目测出来的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 猴子排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 数组</title>
      <link href="/2020/05/03/C++%20%E6%95%B0%E7%BB%84/"/>
      <url>/2020/05/03/C++%20%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="C-数组"><a href="#C-数组" class="headerlink" title="C++ 数组"></a>C++ 数组</h2><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个数据元素都是相同的数据类型</p><p><strong>特点2：</strong>数组是由连续的内存位置组成的</p><h2 id="2、一维数组"><a href="#2、一维数组" class="headerlink" title="2、一维数组"></a>2、一维数组</h2><h3 id="2-1、一维数组定义方式"><a href="#2-1、一维数组定义方式" class="headerlink" title="2.1、一维数组定义方式"></a>2.1、一维数组定义方式</h3><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li></ol><p>示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式1</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line"><span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标赋值</span></span><br><span class="line">score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义方式</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line"><span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line"><span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个输出</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line"><span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h3 id="2-2、一维数组数组名"><a href="#2-2、一维数组数组名" class="headerlink" title="2.2、一维数组数组名"></a>2.2、一维数组数组名</h3><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名用途</span></span><br><span class="line"><span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"整个数组所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"每个元素所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组的元素个数为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组首地址为： "</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组中第一个元素地址为： "</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数组中第二个元素地址为： "</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><h3 id="2-3、冒泡排序"><a href="#2-3、冒泡排序" class="headerlink" title="2.3、冒泡排序"></a>2.3、冒泡排序</h3><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><a href="http://image.tooltool.club/1541905327273.png" data-fancybox="group" data-caption="1541905327273" class="fancybox"><img alt="1541905327273" title="1541905327273" data-src="http://image.tooltool.club/1541905327273.png" class="lazyload"></a></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3、二维数组"><a href="#3、二维数组" class="headerlink" title="3、二维数组"></a>3、二维数组</h2><p>二维数组就是在一维数组上，多加一个维度。</p><h3 id="3-1、二维数组定义方式"><a href="#3-1、二维数组定义方式" class="headerlink" title="3.1、二维数组定义方式"></a>3.1、二维数组定义方式</h3><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code>数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol><blockquote><p>建议：以上4种定义方式，利用第二种更加直观，提高代码的可读性</p></blockquote><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1  </span></span><br><span class="line"><span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line"><span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line"><span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h3 id="3-2、二维数组数组名"><a href="#3-2、二维数组数组名" class="headerlink" title="3.2、二维数组数组名"></a>3.2、二维数组数组名</h3><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组数组名</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组大小： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组一行大小： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组元素大小： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组行数： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组列数： "</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组首地址："</span> &lt;&lt; arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第一行地址："</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第二行地址："</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第一个元素地址："</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二维数组第二个元素地址："</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>珠排序</title>
      <link href="/2020/05/02/%E7%8F%A0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/02/%E7%8F%A0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="珠排序"><a href="#珠排序" class="headerlink" title="珠排序"></a>珠排序</h1><blockquote><p>珠排序是一种自然排序算法，由Joshua J. Arulanandham, Cristian S. Calude 和 Michael J. Dinneen 在2002年发展而来，并且在欧洲理论计算机协会（European Association for Theoretical Computer Science，简称EATCS）的新闻简报上发表了该算法。无论是电子还是实物上的实现，珠排序都能在O(n)时间内完成；然而，该算法在电子上的实现明显比实物要慢很多，并且只能用于对正整数序列进行排序。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>用二维数组来模拟算盘，有珠子的位置设为1，没有珠子的位置设为0，那么，一个无序的整型数组就可以转化成二维数组；</li><li>接下来，模拟算盘珠子掉落的过程，让所有的元素1都落到二维数组的最底部；</li><li>最后，把掉落后的 “算盘” 转化成一维有序数组。</li></ol><h2 id="详细图解"><a href="#详细图解" class="headerlink" title="详细图解"></a>详细图解</h2><p><a href="http://image.tooltool.club/91a95887497b4d2699513d8c83c3a3cc.png" data-fancybox="group" data-caption="珠排序" class="fancybox"><img alt="珠排序" title="珠排序" data-src="http://image.tooltool.club/91a95887497b4d2699513d8c83c3a3cc.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/4a40fe44bc9f44f081537beba8045301.png" data-fancybox="group" data-caption="珠排序" class="fancybox"><img alt="珠排序" title="珠排序" data-src="http://image.tooltool.club/4a40fe44bc9f44f081537beba8045301.png" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beadSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    arr_up = [[<span class="number">0</span>] * max(arr) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr))]</span><br><span class="line">    arr_down = [[<span class="number">0</span>] * max(arr) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(arr[i]):</span><br><span class="line">            arr_up[i][j] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(max(arr)):</span><br><span class="line">        index = len(arr) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr_up[i][j] == <span class="number">1</span>:</span><br><span class="line">                arr_down[index][j] = <span class="number">1</span></span><br><span class="line">                index -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        count = arr_down[i].count(<span class="number">1</span>)</span><br><span class="line">        arr[i] = count</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(beadSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre><blockquote><p>只能对正数进行排序，输入负数可能会导致执行错误。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 珠排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡眠排序</title>
      <link href="/2020/05/02/%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/02/%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="睡眠排序"><a href="#睡眠排序" class="headerlink" title="睡眠排序"></a>睡眠排序</h1><blockquote><p>睡眠排序，构造n个线程，它们和这n个数一一对应。初始化后，线程们开始睡眠，等到对应的数那么多个时间单位后各自醒来，然后输出它对应的数。这样最小的数对应的线程最早醒来，这个数最早被输出。等所有线程都醒来，排序就结束了。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>对于待排序数组中的每一个元素，都要去开启一个线程，元素值是多少，就让线程睡眠多久；</li><li>当这些线程陆续醒来的时候，一定是睡得少的线程先醒来，睡得多的线程后醒来；</li><li>然后，按照醒来的顺序添加到新的数组或者列表中即可。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/timg" data-fancybox="group" data-caption="睡眠排序" class="fancybox"><img alt="睡眠排序" title="睡眠排序" data-src="http://image.tooltool.club/timg" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleepSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    thread_list, new_arr = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        temp = threading.Thread(target=Sleep, args=(arr[i], new_arr))</span><br><span class="line">        thread_list.append(temp)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="keyword">return</span> new_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sleep</span><span class="params">(func, arr)</span>:</span></span><br><span class="line">    index = <span class="number">0.02</span></span><br><span class="line">    time.sleep(index * pow(<span class="number">1.1</span>, float(func)))</span><br><span class="line">    arr.append(func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(sleepSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre><blockquote><p>我给的数据可能有点大，你可能得等几个小时(10353s)才能有结果输出。</p><p>为什么要用幂函数，这是为了防止负数的排序导致程序出错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 睡觉排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2020/05/01/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/01/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><p>堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/1496041-20190817183203660-468046990.gif" data-fancybox="group" data-caption="堆排序" class="fancybox"><img alt="堆排序" title="堆排序" data-src="http://image.tooltool.club/1496041-20190817183203660-468046990.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> range(len(arr), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        heapify(arr, len(arr), start)</span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        arr[<span class="number">0</span>], arr[end] = arr[end], arr[<span class="number">0</span>]</span><br><span class="line">        heapify(arr, end, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(arr, n, item)</span>:</span></span><br><span class="line">    root = item</span><br><span class="line">    left = <span class="number">2</span> * item + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span> * item + <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> arr[item] &lt; arr[left]:</span><br><span class="line">        root = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> arr[root] &lt; arr[right]:</span><br><span class="line">        root = right</span><br><span class="line">    <span class="keyword">if</span> root != item:</span><br><span class="line">        arr[item], arr[root] = arr[root], arr[item]</span><br><span class="line">        heapify(arr, n, root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(heapSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桶排序</title>
      <link href="/2020/05/01/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/01/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><blockquote><p>桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（O (n））。但桶排序并不是比较排序，他不受到 O(n log n) 下限的影响。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。 </li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/%E6%A1%B6%E6%8E%92%E5%BA%8F_1.gif" data-fancybox="group" data-caption="桶排序" class="fancybox"><img alt="桶排序" title="桶排序" data-src="http://image.tooltool.club/%E6%A1%B6%E6%8E%92%E5%BA%8F_1.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucketSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    bucketLength = len(arr) - <span class="number">1</span></span><br><span class="line">    Min, MAx = min(arr), max(arr)</span><br><span class="line">    bucketSize = ((MAx - Min) // bucketLength)</span><br><span class="line">    buckets = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(bucketLength)]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        number = arr.pop()</span><br><span class="line">        index = (number - Min) // bucketSize - <span class="number">1</span></span><br><span class="line">        index = <span class="number">0</span> <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">else</span> index</span><br><span class="line">        buckets[index].append(number)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bucketLength):</span><br><span class="line">        buckets[i].sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(buckets)):</span><br><span class="line">        arr.extend(buckets[i])</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(bucketSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 桶排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 程序流程结构</title>
      <link href="/2020/04/26/C++%20%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/"/>
      <url>/2020/04/26/C++%20%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-程序流程结构"><a href="#C-程序流程结构" class="headerlink" title="C++ 程序流程结构"></a>C++ 程序流程结构</h1><p>C/C++支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h2 id="1、选择结构"><a href="#1、选择结构" class="headerlink" title="1、选择结构"></a>1、选择结构</h2><h3 id="1-1、if语句"><a href="#1-1、if语句" class="headerlink" title="1.1、if语句"></a>1.1、if语句</h3><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code></p><p><a href="http://image.tooltool.club/clip_image002.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://image.tooltool.club/clip_image002.png" class="lazyload"></a></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择结构-单行if语句</span></span><br><span class="line"><span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个分数："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"您输入的分数为： "</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if语句</span></span><br><span class="line"><span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了一本大学！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li></ol><p><a href="http://image.tooltool.club/clip_image002-1541662519170.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://image.tooltool.club/clip_image002-1541662519170.png" class="lazyload"></a></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入考试分数："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了一本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我未考上一本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li></ol><p><a href="http://image.tooltool.club/clip_image002-1541662566808.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://image.tooltool.club/clip_image002-1541662566808.png" class="lazyload"></a></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入考试分数："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了一本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了二本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了三本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我未考上本科"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入考试分数："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了一本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了北大"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了清华"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了人大"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了二本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我考上了三本大学"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我未考上本科"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-2、三目运算符"><a href="#1-2、三目运算符" class="headerlink" title="1.2、三目运算符"></a>1.2、三目运算符</h3><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c = a &gt; b ? a : b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h3 id="1-3、switch语句"><a href="#1-3、switch语句" class="headerlink" title="1.3、switch语句"></a>1.3、switch语句</h3><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请给电影评分 </span></span><br><span class="line"><span class="comment">//10 ~ 9   经典   </span></span><br><span class="line"><span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line"><span class="comment">// 6 ~ 5   一般</span></span><br><span class="line"><span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请给电影打分"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"经典"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"非常好"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一般"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"烂片"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h2 id="2-、循环结构"><a href="#2-、循环结构" class="headerlink" title="2 、循环结构"></a>2 、循环结构</h2><h3 id="2-1、while循环语句"><a href="#2-1、while循环语句" class="headerlink" title="2.1、while循环语句"></a>2.1、while循环语句</h3><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code>while(循环条件){ 循环语句 }</code></p><p><strong>解释：</strong>只要循环条件的结果为真，就执行循环语句</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num = "</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><h3 id="2-2、do…while循环语句"><a href="#2-2、do…while循环语句" class="headerlink" title="2.2、do…while循环语句"></a>2.2、do…while循环语句</h3><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于do…while会先执行一次循环语句，再判断循环条件</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><h3 id="2-3、for循环语句"><a href="#2-3、for循环语句" class="headerlink" title="2.3、for循环语句"></a>2.3、for循环语句</h3><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><h3 id="2-4、嵌套循环"><a href="#2-4、嵌套循环" class="headerlink" title="2.4、嵌套循环"></a>2.4、嵌套循环</h3><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3、跳转语句"><a href="#3、跳转语句" class="headerlink" title="3、跳转语句"></a>3、跳转语句</h2><h3 id="3-1、break语句"><a href="#3-1、break语句" class="headerlink" title="3.1、break语句"></a>3.1、break语句</h3><p><strong>作用:</strong> 用于跳出选择结构或者循环结构</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请选择您挑战副本的难度："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1、普通"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2、中等"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3、困难"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"您选择的是普通难度"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"您选择的是中等难度"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"您选择的是困难难度"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>示例2：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//2、在循环语句中用break</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>示例3：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-2、continue语句"><a href="#3-2、continue语句" class="headerlink" title="3.2、continue语句"></a>3.2、continue语句</h3><p><strong>作用：</strong>在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h3 id="3-3、goto语句"><a href="#3-3、goto语句" class="headerlink" title="3.3、goto语句"></a>3.3、goto语句</h3><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"4"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">FLAG:</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"5"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> 程序流程结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数排序</title>
      <link href="/2020/04/25/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/25/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><blockquote><p>计数排序是一个非基于比较的排序算法，它的优势在于在对一定范围内的整数排序时，它的复杂度为Ο(n+k)（其中k是整数的范围），快于任何比较排序算法。 当然这是一种牺牲空间换取时间的做法，而且当O(k)&gt;O(n<em>log(n))的时候其效率反而不如基于比较的排序（基于比较的排序的时间复杂度在理论上的下限是O(n</em>log(n)), 如归并排序，堆排序）。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/countingSort.gif" data-fancybox="group" data-caption="计数排序" class="fancybox"><img alt="计数排序" title="计数排序" data-src="http://image.tooltool.club/countingSort.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countingSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    bucketLen = max(arr) + <span class="number">1</span></span><br><span class="line">    bucket = [<span class="number">0</span>] * bucketLen</span><br><span class="line">    sortedIndex = <span class="number">0</span></span><br><span class="line">    arrLen = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arrLen):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bucket[arr[i]]:</span><br><span class="line">            bucket[arr[i]] = <span class="number">0</span></span><br><span class="line">        bucket[arr[i]] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(bucketLen):</span><br><span class="line">        <span class="keyword">while</span> bucket[j] &gt; <span class="number">0</span>:</span><br><span class="line">            arr[sortedIndex] = j</span><br><span class="line">            sortedIndex += <span class="number">1</span></span><br><span class="line">            bucket[j] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(countingSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 计数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2020/04/25/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/25/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><blockquote><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些”桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" data-fancybox="group" data-caption="基数排序" class="fancybox"><img alt="基数排序" title="基数排序" data-src="http://image.tooltool.club/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radixSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    k = len(str(max(arr)))</span><br><span class="line">    <span class="keyword">for</span> radix <span class="keyword">in</span> range(k):</span><br><span class="line">        bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> arr:</span><br><span class="line">            num = (item % pow(<span class="number">10</span>, radix + <span class="number">1</span>)) // pow(<span class="number">10</span>, radix)</span><br><span class="line">            bucket[num].append(item)</span><br><span class="line">        arr = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> bucket[i]:</span><br><span class="line">                arr.append(j)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(radixSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 运算符</title>
      <link href="/2020/04/19/C++%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/04/19/C++%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C++ 运算符"></a>C++ 运算符</h1><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h2 id="1、算术运算符"><a href="#1、算术运算符" class="headerlink" title="1、算术运算符"></a>1、算术运算符</h2><p><strong>作用</strong>：用于处理四则运算</p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数可以相除</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数不可以取模</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置递增</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置递增</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">++b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line"><span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h2 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h2><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// %=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h2><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：C和C++ 语言的比较运算中，“真”用数字“1”来表示， “假”用数字“0”来表示。</p></blockquote><h2 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h2><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; !a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; !!a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：逻辑与运算符总结： 同真为真，其余为假</p></blockquote><p><strong>示例3：</strong>逻辑或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>逻辑或运算符总结： 同假为假，其余为真</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/2020/04/18/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/18/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><blockquote><p>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本，希尔排序是非稳定排序算法，希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" data-fancybox="group" data-caption="希尔排序" class="fancybox"><img alt="希尔排序" title="希尔排序" data-src="http://image.tooltool.club/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &lt; len(arr) / <span class="number">3</span>:</span><br><span class="line">        gap = gap * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, len(arr)):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i - gap</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; temp:</span><br><span class="line">                arr[j + gap] = arr[j]</span><br><span class="line">                j -= gap</span><br><span class="line">            arr[j + gap] = temp</span><br><span class="line">        gap = gap // <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(shellSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 希尔排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2020/04/18/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/18/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><blockquote><p>归并排序（Merge Sort）是建立在归并操作上的一种有效，稳定的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/mergeSort.gif" data-fancybox="group" data-caption="归并排序" class="fancybox"><img alt="归并排序" title="归并排序" data-src="http://image.tooltool.club/mergeSort.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    middle = len(arr) // <span class="number">2</span></span><br><span class="line">    left, right = arr[<span class="number">0</span>:middle], arr[middle:]</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">            result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> left:</span><br><span class="line">        result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> right:</span><br><span class="line">        result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(mergeSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 数据类型</title>
      <link href="/2020/04/12/C++%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/04/12/C++%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C++ 数据类型"></a>C++ 数据类型</h1><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存。</p><h2 id="1、整型"><a href="#1、整型" class="headerlink" title="1、整型"></a>1、整型</h2><p><strong>作用</strong>：整型变量表示的是整数类型的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h2 id="2、sizeof关键字"><a href="#2、sizeof关键字" class="headerlink" title="2、sizeof关键字"></a>2、sizeof关键字</h2><p><strong>作用：</strong>利用sizeof关键字可以统计数据类型所占内存大小。</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"short 类型所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(short) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int 类型所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"long 类型所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"long long 类型所占内存空间为： "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h2 id="3、实型（浮点型）"><a href="#3、实型（浮点型）" class="headerlink" title="3、实型（浮点型）"></a>3、实型（浮点型）</h2><p><strong>作用</strong>：用于表示小数。</p><p>浮点型变量分为两种：</p><ol><li>单精度float</li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"float  sizeof = "</span> &lt;&lt; <span class="keyword">sizeof</span>(f1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"double sizeof = "</span> &lt;&lt; <span class="keyword">sizeof</span>(d1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"f2 = "</span> &lt;&lt; f2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"f3 = "</span> &lt;&lt; f3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="4、字符型"><a href="#4、字符型" class="headerlink" title="4、字符型"></a>4、字符型</h2><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ch = "abcde"; //错误，不可以用双引号</span></span><br><span class="line"><span class="comment">//ch = 'abcde'; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h2 id="5、转义字符"><a href="#5、转义字符" class="headerlink" title="5、转义字符"></a>5、转义字符</h2><p><strong>作用：</strong>用于表示一些不能显示出来的ASCII字符。</p><p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>&#39;</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\\"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\tHello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="6、字符串型"><a href="#6、字符串型" class="headerlink" title="6、字符串型"></a>6、字符串型</h2><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol start="2"><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h2 id="7、布尔类型-bool"><a href="#7、布尔类型-bool" class="headerlink" title="7、布尔类型 bool"></a>7、布尔类型 bool</h2><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占1个字节大小</strong></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of bool = "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="8、数据的输入"><a href="#8、数据的输入" class="headerlink" title="8、数据的输入"></a>8、数据的输入</h2><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整型输入</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入整型变量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点型输入</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入浮点型变量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符型输入</span></span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入字符型变量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串型输入</span></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入字符串型变量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类型输入</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入布尔型变量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; flag;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2020/04/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><blockquote><p>快速排序（Quicksort）是对冒泡排序的一种改进，通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/quickSort.gif" data-fancybox="group" data-caption="快速排序" class="fancybox"><img alt="快速排序" title="快速排序" data-src="http://image.tooltool.club/quickSort.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(arr, left=None, right=None)</span>:</span></span><br><span class="line">    left = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> isinstance(left, (int, float)) <span class="keyword">else</span> left</span><br><span class="line">    right = len(arr) - <span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> isinstance(right, (int, float)) <span class="keyword">else</span> right</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        partitionIndex = partition(arr, left, right)</span><br><span class="line">        quickSort(arr, left, partitionIndex - <span class="number">1</span>)</span><br><span class="line">        quickSort(arr, partitionIndex + <span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(arr, left, right)</span>:</span></span><br><span class="line">    pivot = left</span><br><span class="line">    index = pivot + <span class="number">1</span></span><br><span class="line">    item = index</span><br><span class="line">    <span class="keyword">while</span> item &lt;= right:</span><br><span class="line">        <span class="keyword">if</span> arr[item] &lt; arr[pivot]:</span><br><span class="line">            swap(arr, item, index)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        item += <span class="number">1</span></span><br><span class="line">    swap(arr, pivot, index - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(arr, i, j)</span>:</span></span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(quickSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2020/04/11/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/11/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><blockquote><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/selectionSort.gif" data-fancybox="group" data-caption="选择排序" class="fancybox"><img alt="选择排序" title="选择排序" data-src="http://image.tooltool.club/selectionSort.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="keyword">if</span> i != minIndex:</span><br><span class="line">            arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(selectionSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2020/04/06/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/06/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><blockquote><p>插入排序，一般也被称为直接插入排序。对于少量元素的排序，它是一个有效的算法，插入排序是一种最简单的排序方法，它的基本思想是将一个记录插入到已经排好序的有序表中，从而一个新的、记录数增1的有序表。在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/insertionSort.gif" data-fancybox="group" data-caption="插入排序" class="fancybox"><img alt="插入排序" title="插入排序" data-src="http://image.tooltool.club/insertionSort.gif" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        preIndex = i - <span class="number">1</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        <span class="keyword">while</span> preIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[preIndex] &gt; current:</span><br><span class="line">            arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line">            preIndex -= <span class="number">1</span></span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = current</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(insertionSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2020/04/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。</p><p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ol><h2 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h2><p><a href="http://image.tooltool.club/9916080-f0605d250bd43468" data-fancybox="group" data-caption="冒泡排序" class="fancybox"><img alt="冒泡排序" title="冒泡排序" data-src="http://image.tooltool.club/9916080-f0605d250bd43468" class="lazyload"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(arr)-i):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numbers = [<span class="number">45</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">97</span>]</span><br><span class="line">    print(bubbleSort(numbers))</span><br></pre></td></tr></table></figure></div><pre><code>[2, 5, 8, 12, 19, 22, 32, 33, 45, 85, 97]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 初始</title>
      <link href="/2020/04/05/C++%20%E5%88%9D%E5%A7%8B/"/>
      <url>/2020/04/05/C++%20%E5%88%9D%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-初识"><a href="#C-初识" class="headerlink" title="C++ 初识"></a>C++ 初识</h1><h2 id="1-、第一个C-程序"><a href="#1-、第一个C-程序" class="headerlink" title="1 、第一个C++程序"></a>1 、第一个C++程序</h2><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开。</p><p><a href="http://image.tooltool.club/image-20200731184621443.png" data-fancybox="group" data-caption="image-20200731184621443" class="fancybox"><img alt="image-20200731184621443" title="image-20200731184621443" data-src="http://image.tooltool.club/image-20200731184621443.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/image-20200731184724644.png" data-fancybox="group" data-caption="image-20200731184724644" class="fancybox"><img alt="image-20200731184724644" title="image-20200731184724644" data-src="http://image.tooltool.club/image-20200731184724644.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/image-20200731184804396.png" data-fancybox="group" data-caption="image-20200731184804396" class="fancybox"><img alt="image-20200731184804396" title="image-20200731184804396" data-src="http://image.tooltool.club/image-20200731184804396.png" class="lazyload"></a></p><h3 id="1-2、创建文件"><a href="#1-2、创建文件" class="headerlink" title="1.2、创建文件"></a>1.2、创建文件</h3><p>右键源文件，选择添加—&gt;新建项</p><p><a href="http://image.tooltool.club/image-20200731185007303.png" data-fancybox="group" data-caption="image-20200731185007303" class="fancybox"><img alt="image-20200731185007303" title="image-20200731185007303" data-src="http://image.tooltool.club/image-20200731185007303.png" class="lazyload"></a></p><p>给C++文件起个名称，然后点击添加即可。</p><p><a href="http://image.tooltool.club/image-20200731185121170.png" data-fancybox="group" data-caption="image-20200731185121170" class="fancybox"><img alt="image-20200731185121170" title="image-20200731185121170" data-src="http://image.tooltool.club/image-20200731185121170.png" class="lazyload"></a></p><h3 id="1-3-、编写代码"><a href="#1-3-、编写代码" class="headerlink" title="1.3 、编写代码"></a>1.3 、编写代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-4、-运行程序"><a href="#1-4、-运行程序" class="headerlink" title="1.4、 运行程序"></a>1.4、 运行程序</h3><p><a href="http://image.tooltool.club/1541384818688.png" data-fancybox="group" data-caption="1541384818688" class="fancybox"><img alt="1541384818688" title="1541384818688" data-src="http://image.tooltool.club/1541384818688.png" class="lazyload"></a></p><h2 id="2、注释"><a href="#2、注释" class="headerlink" title="2、注释"></a>2、注释</h2><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，对该行代码说明</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，对该段代码做整体说明</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h2 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h2><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的定义</span></span><br><span class="line"><span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h2 id="4-、常量"><a href="#4-、常量" class="headerlink" title="4 、常量"></a>4 、常量</h2><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul><li>通常在文件上方定义，表示一个常量</li></ul></li></ol><ol start="2"><li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul><li>通常在变量定义前加关键字const，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一周里总共有 "</span> &lt;&lt; day &lt;&lt; <span class="string">" 天"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、const修饰变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一年里总共有 "</span> &lt;&lt; month &lt;&lt; <span class="string">" 个月份"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="5、关键字"><a href="#5、关键字" class="headerlink" title="5、关键字"></a>5、关键字</h2><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h2 id="6、标识符命名规则"><a href="#6、标识符命名规则" class="headerlink" title="6、标识符命名规则"></a>6、标识符命名规则</h2><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础入门 </tag>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 函数装饰器</title>
      <link href="/2020/04/05/Python-%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2020/04/05/Python-%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-函数装饰器"><a href="#Python-函数装饰器" class="headerlink" title="Python 函数装饰器"></a>Python 函数装饰器</h1><p>装饰器(Decorators)是 Python 的一个重要部分，简单地说：他们是修改其他函数的功能的函数，也就是他们是以函数作为参数的函数，但是在讲函数装饰器之前，我们首先来回顾一下函数，并且了解闭包的概念，然后再来讨论函数装饰器，。</p><h2 id="一、函数与闭包"><a href="#一、函数与闭包" class="headerlink" title="一、函数与闭包"></a>一、函数与闭包</h2><h3 id="1、函数"><a href="#1、函数" class="headerlink" title="1、函数"></a>1、函数</h3><p>在python中，函数通过def关键字、函数名和可选的参数列表定义，最后通过return关键字返回值。</p><h4 id="①-函数作用域"><a href="#①-函数作用域" class="headerlink" title="① 函数作用域"></a>① 函数作用域</h4><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p><p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称，Python的作用域一共有4种，分别是：</p><ul><li>L （Local） 局部作用域</li><li>E （Enclosing） 闭包函数外的函数中</li><li>G （Global） 全局作用域</li><li>B （Built-in） 内建作用域</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b_count = int(<span class="number">6.6</span>)  <span class="comment"># 内建作用域</span></span><br><span class="line"> </span><br><span class="line">g_count = <span class="number">8</span>  <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    e_count = <span class="number">6</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        l_count = <span class="number">3</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure></div><p>我们目前只需要了解全局作用域和局部作用域即可，而且python有内置函数globals()，该函数会以字典类型返回当前位置的全部全局变量。</p><h4 id="②-变量解析规则"><a href="#②-变量解析规则" class="headerlink" title="② 变量解析规则"></a>② 变量解析规则</h4><p>我们在函数里面并不是不能访问外面的全局变量，在python的作用域规则里面，创建变量一定会一定会在当前作用域里创建一个变量，但是访问或者修改变量时会先在当前作用域查找变量，没有找到匹配变量的话会依次向上在闭合的作用域里面进行查看找。</p><p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g_print</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 无局部变量，所以打印全局变量</span></span><br><span class="line">    print(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l_print</span><span class="params">()</span>:</span></span><br><span class="line">    string = <span class="string">'This is a dog!'</span></span><br><span class="line">    <span class="comment"># 有局部变量，所以打印局部变量</span></span><br><span class="line">    print(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    string = <span class="string">'This is a cat!'</span></span><br><span class="line">    g_print()</span><br><span class="line">    l_print()</span><br></pre></td></tr></table></figure></div><pre><code>This is a cat!This is a dog!</code></pre><h4 id="③-变量生存周期"><a href="#③-变量生存周期" class="headerlink" title="③ 变量生存周期"></a>③ 变量生存周期</h4><p>变量不仅是生存在一个个的命名空间内，他们都有自己的生存周期。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_string</span><span class="params">()</span>:</span></span><br><span class="line">    string = <span class="string">'This is a dog!'</span></span><br><span class="line">    print(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_string()</span><br><span class="line">    print(string)</span><br></pre></td></tr></table></figure></div><pre><code>This is a dog!Traceback (most recent call last):  File &quot;demo.py&quot;, line 8, in &lt;module&gt;    print(string)NameError: name &apos;string&apos; is not defined</code></pre><p>发生的错误不仅仅是因为作用域规则导致的（尽管这是抛出了NameError的错误的原因）它还和python以及其它很多编程语言中函数调用实现的机制有关。在这个地方这个执行时间点并没有什么有效的语法让我们能够获取变量x的值，因为它这个时候压根不存在！函数print_string()的命名空间随着函数调用开始而开始，结束而销毁。</p><h4 id="④-函数参数"><a href="#④-函数参数" class="headerlink" title="④ 函数参数"></a>④ 函数参数</h4><p>python允许我们向函数传递参数，参数会变成本地变量存在于函数内部，函数参数主要包括：必备参数、关键字参数、默认参数、不定长参数。在函数使用的过程中还需要了解实参与形参的区别，切记不要因为命名相同而搞混。</p><ul><li>必备参数须以正确的顺序传入函数，调用时的数量必须和声明时的一样。</li><li>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值，使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</li><li>默认参数，在调用函数时，默认参数的值如果没有传入，则被认为是默认值。</li><li>不定长参数，有时候我们可能需要一个函数能处理比当初声明时更多的参数。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_to_json</span><span class="params">(state=<span class="string">"success"</span>, messages=<span class="string">"访问提交成功"</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    my_data = &#123;</span><br><span class="line">        <span class="string">"state"</span>: state,</span><br><span class="line">        <span class="string">"messages"</span>: messages,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> args:</span><br><span class="line">        my_data.update(args)</span><br><span class="line">    <span class="keyword">elif</span> kwargs:</span><br><span class="line">        my_data.update(kwargs)</span><br><span class="line">    <span class="keyword">return</span> my_data</span><br></pre></td></tr></table></figure></div><h4 id="⑤-函数嵌套"><a href="#⑤-函数嵌套" class="headerlink" title="⑤ 函数嵌套"></a>⑤ 函数嵌套</h4><p>Python允许创建嵌套函数，这意味着我们可以在函数里面定义函数而且现有的作用域和变量生存周期依旧适用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_function</span><span class="params">()</span>:</span></span><br><span class="line">    string = <span class="string">'This is a dog!'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_function</span><span class="params">()</span>:</span></span><br><span class="line">        print(string)</span><br><span class="line">    <span class="keyword">return</span> in_function()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    out_function()</span><br></pre></td></tr></table></figure></div><pre><code>This is a dog!</code></pre><p>在这个例子里面发生了什么：python解释器需找一个叫string的本地变量，查找失败之后会继续在上层的作用域里面寻找，这个上层的作用域定义在另外一个函数里面。对函数out_function()来说，变量string是一个本地变量，但是如先前提到的一样，函数in_function可以访问封闭的作用域（至少可以读和修改）。当函数return的时候，我们调用in_function()函数，非常重要的一点是，函数in_function()也仅仅是一个遵循python变量解析规则的变量名，python解释器会优先在函数out_function()的作用域里面对变量名string查找匹配的变量。</p><h3 id="2、闭包"><a href="#2、闭包" class="headerlink" title="2、闭包"></a>2、闭包</h3><blockquote><p>在计算机科学中，闭包（Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p></blockquote><p>在函数嵌套的例子中，我们可以发现in_function()是可以被运行的，这是为什么呢，其实在变量解析规则中我们是可以大概了解原理的，Python支持一个叫做函数闭包的特性，用人话来讲就是，嵌套定义在非全局作用域里面的函数能够记住它在被定义的时候它所处的封闭命名空间。这能够通过查看函数的func_closure属性得出结论，这个属性里面包含封闭作用域里面的值（只会包含被捕捉到的值，比如string，如果在out_function()函数里面还定义了其他的值，封闭作用域里面是不会有的)。</p><p>在了解完闭包之后，我们就可以来了解学习函数装饰器了，并写一个高大上的函数装饰器应用中以后的项目之中。</p><h2 id="二、函数装饰器"><a href="#二、函数装饰器" class="headerlink" title="二、函数装饰器"></a>二、函数装饰器</h2><h3 id="1、函数装饰器"><a href="#1、函数装饰器" class="headerlink" title="1、函数装饰器"></a>1、函数装饰器</h3><p>装饰器其实就是一个闭包，把一个函数当做参数然后返回一个替代版函数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_function</span><span class="params">(function)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_function</span><span class="params">()</span>:</span></span><br><span class="line">        string = function()</span><br><span class="line">        print(<span class="string">'string: '</span>, string)</span><br><span class="line">    <span class="keyword">return</span> in_function()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">    string = <span class="string">'This is a dog!'</span></span><br><span class="line">    print(string)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    out_function(function)</span><br></pre></td></tr></table></figure></div><pre><code>This is a dog!string:  This is a dog!</code></pre><p>然后，看到这个例子之后你会恍然大悟，原来这就是函数装饰器，但是你却仍会保持疑惑，为什么要用函数装饰器呢，函数和类不是已经很方便好用了吗，接下来我们举个例子，例如我们想要计算一个函数的运行时间，我们可以通过以下代码实现，先在函数开头记录起始时间，在函数结尾记录结束时间即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">6666666</span>):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(<span class="string">"run time:&#123;:.4&#125;s"</span>.format(t2 - t1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count_numuber()</span><br></pre></td></tr></table></figure></div><pre><code>run time:0.8769s</code></pre><p>这是计算一个函数的运行时间，但是如果我们需要计算更多的函数运行时间，是否需要对每个函数的开头和结尾添加都要添加代码，但是借助函数装饰器我们是不需要这样做的，不过我们需要先了解<code>@</code>标识符。</p><h3 id="2、-标识符"><a href="#2、-标识符" class="headerlink" title="2、@ 标识符"></a>2、@ 标识符</h3><p>使用标识符@将装饰器应用在函数上，只需要在函数的定义前加上@和装饰器的名称，这种方式能够在任何时候对任意方法进行包装。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        func()</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        print(<span class="string">"run time:&#123;:.4&#125;s"</span>.format(t2 - t1))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">6666666</span>):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count = count_numuber()</span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure></div><pre><code>run time:0.7479sNone</code></pre><p>但是我们发现此时的count_number()函数是没有返回值的，但是我们的count是有return返回值的，是因为在装饰器中我们没有对函数中的结果进行返回导致的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func()</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        print(<span class="string">"run time:&#123;:.4&#125;s"</span>.format(t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">6666666</span>):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count = count_numuber()</span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure></div><pre><code>run time:0.7774s11111105555556</code></pre><p>我们现在给装饰器添加返回值之后，就可以看到函数的返回值了，所以对于有返回值的函数一定不要忘记加return将函数的返回值返回。此时有返回值了，但是如果我们将count_number()函数改成一个有参数的函数，会发现该装饰器还是依旧不能使用的，但是我们想要这个装饰器能够适用于有参数的函数上，所以我们需要对我们的装饰器做一些修改。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(max_number, tag)</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func(max_number, tag)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        print(<span class="string">"run time:&#123;:.4&#125;s"</span>.format(t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber</span><span class="params">(max_number, tag)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(max_number):</span><br><span class="line">        <span class="keyword">if</span> item % tag == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count = count_numuber(<span class="number">6666666</span>, <span class="number">2</span>)</span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure></div><pre><code>run time:1.063s11111105555556</code></pre><p>此时的装饰器是只能适用于两个参数的函数，但却又无法适用于一个参数或者无参的函数，装饰器还要随函数参数的变化而变化是否会有些麻烦，接下来我们需要解决这个问题。</p><h3 id="3、args-和-kwargs"><a href="#3、args-和-kwargs" class="headerlink" title="3、args 和 *kwargs"></a>3、<em>args 和 *</em>kwargs</h3><p>我们已经完成了一个有用的装饰器，但是由于硬编码的原因它只能应用在一类具体的方法上，这类方法接收两个参数，传递给闭包捕获的函数。如果我们想实现一个能够应用在任何方法上的装饰器要怎么做呢？再比如，如果我们要实现一个能应用在任何方法上的装饰器，不需要改变原有方法的任何逻辑，这意味着装饰器能够接受拥有任何签名的函数作为自己的被装饰方法，同时能够用传递给它的参数对被装饰的方法进行调用，此时我们就要用到<code>*args</code>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func(*args)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        print(<span class="string">"run time:&#123;:.4&#125;s"</span>.format(t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber_3</span><span class="params">(max_number, tag)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(max_number):</span><br><span class="line">        <span class="keyword">if</span> item % tag == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber_2</span><span class="params">(max_number)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(max_number):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber_1</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">6666666</span>):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count_numuber_1()</span><br><span class="line">    count_numuber_2(<span class="number">6666666</span>)</span><br><span class="line">    count_numuber_3(<span class="number">6666666</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><pre><code>run time:0.7551srun time:0.8637srun time:0.7812s</code></pre><p>此时，对于多少个参数的问题，我们都已经解决了，但是我们好像发生对于无名参数是可以的，但是对于关键字参数是无法传参的，所以为了我们的装饰器更加万能，此时需要用到<code>**kwargs</code>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        print(<span class="string">"run time:&#123;:.4&#125;s"</span>.format(t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber_3</span><span class="params">(max_number, tag)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(max_number):</span><br><span class="line">        <span class="keyword">if</span> item % tag == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber_2</span><span class="params">(max_number)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(max_number):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_numuber_1</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">6666666</span>):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += item</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count_numuber_1()</span><br><span class="line">    count_numuber_2(<span class="number">6666666</span>)</span><br><span class="line">    count_numuber_3(<span class="number">6666666</span>, <span class="number">2</span>)</span><br><span class="line">    count_numuber_2(max_number=<span class="number">6666666</span>)</span><br><span class="line">    count_numuber_3(max_number=<span class="number">6666666</span>, tag=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><pre><code>run time:0.7723srun time:0.7593srun time:0.753srun time:0.7585srun time:0.742s</code></pre><p>总结一下，这两个是python中的可变参数，<code>*args</code>表示任何多个无名参数，它是一个tuple；<code>**kwargs</code>表示关键字参数，它是一个dict，并且同时使用<code>*args</code>和<code>**kwargs</code>时，必须<code>*args</code>参数列要在<code>**kwargs</code>前，下面是最后一个例子。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noName</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">f'*args: '</span>, args)</span><br><span class="line">        print(<span class="string">f'**kwargs: '</span>, kwargs)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@noName</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a, b, c, num, string)</span>:</span></span><br><span class="line">    result = <span class="string">f'<span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span> <span class="subst">&#123;c&#125;</span> <span class="subst">&#123;num&#125;</span> <span class="subst">&#123;string&#125;</span>'</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, num=<span class="number">123</span>, string=<span class="string">'function'</span>)</span><br></pre></td></tr></table></figure></div><pre><code>*args:  (1, 2, 3)**kwargs:  {&apos;num&apos;: 123, &apos;string&apos;: &apos;function&apos;}</code></pre><p>剩下的就自己慢慢品吧 . . . . . .</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 高级进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Python </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议与HTTPS协议</title>
      <link href="/2020/04/04/HTTP%E5%8D%8F%E8%AE%AE%E4%B8%8EHTTPS%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/04/04/HTTP%E5%8D%8F%E8%AE%AE%E4%B8%8EHTTPS%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTTP协议与HTTPS协议"><a href="#HTTP协议与HTTPS协议" class="headerlink" title="HTTP协议与HTTPS协议"></a>HTTP协议与HTTPS协议</h1><h3 id="HTTP和HTTPS是什么？"><a href="#HTTP和HTTPS是什么？" class="headerlink" title="HTTP和HTTPS是什么？"></a>HTTP和HTTPS是什么？</h3><p>我们使用浏览器访问一个网站页面，在浏览器的地址栏中我们会看到一串URL，例如：<code>https://blog.plutozone.site/</code>，网站的URL会分为两部分：通信协议和域名地址。</p><p>域名地址都很好理解，不同的域名地址表示网站中不同的页面，而通信协议，简单来说就是浏览器和服务器之间沟通的语言，网站中的通信协议一般就是HTTP协议和HTTPS协议。</p><h2 id="一、HTTP-协议"><a href="#一、HTTP-协议" class="headerlink" title="一、HTTP 协议"></a>一、HTTP 协议</h2><h3 id="1、HTTP协议是什么？"><a href="#1、HTTP协议是什么？" class="headerlink" title="1、HTTP协议是什么？"></a>1、HTTP协议是什么？</h3><p>HTTP协议是<strong>超文本传输协议</strong>的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</p><p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p><p>HTPP有多个版本，目前广泛使用的是HTTP/1.1版本。</p><h3 id="2、HTTP协议原理"><a href="#2、HTTP协议原理" class="headerlink" title="2、HTTP协议原理"></a>2、HTTP协议原理</h3><p>HTTP是一个基于TCP/IP通信协议来传递数据的协议，传输的数据类型为HTML 文件,、图片文件, 查询结果等。</p><p>HTTP协议一般用于B/S架构，浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p><p><a href="http://image.tooltool.club/image-20200802002412543.png" data-fancybox="group" data-caption="image-20200802002412543" class="fancybox"><img alt="image-20200802002412543" title="image-20200802002412543" data-src="http://image.tooltool.club/image-20200802002412543.png" class="lazyload"></a></p><h3 id="3、HTTP的特点"><a href="#3、HTTP的特点" class="headerlink" title="3、HTTP的特点"></a>3、HTTP的特点</h3><ol><li>http协议支持客户端/服务端模式，也是一种请求/响应模式的协议。</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。</li><li>灵活：HTTP允许传输任意类型的数据对象。传输的类型由Content-Type加以标记。</li><li>无连接：限制每次连接只处理一个请求。服务器处理完请求，并收到客户的应答后，即断开连接，但是却不利于客户端与服务器保持会话连接，为了弥补这种不足，产生了两项记录http状态的技术，一个叫做Cookie,一个叫做Session。</li><li>无状态：无状态是指协议对于事务处理没有记忆，后续处理需要前面的信息，则必须重传。</li></ol><h3 id="4、URI和URL的区别"><a href="#4、URI和URL的区别" class="headerlink" title="4、URI和URL的区别"></a>4、URI和URL的区别</h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p><ul><li>URI：Uniform Resource Identifier 统一资源标识符</li><li>URL：Uniform Resource Location 统一资源定位符</li></ul><p>URI 是用来标示 一个具体的资源的，我们可以通过 URI 知道一个资源是什么。</p><p>URL 则是用来定位具体的资源的，标示了一个具体的资源位置。互联网上的每个文件都有一个唯一的URL。</p><h3 id="5、HTTP报文组成"><a href="#5、HTTP报文组成" class="headerlink" title="5、HTTP报文组成"></a>5、HTTP报文组成</h3><h5 id="请求报文构成"><a href="#请求报文构成" class="headerlink" title="请求报文构成"></a>请求报文构成</h5><ol><li>请求行：包括请求方法、URL、协议/版本</li><li>请求头(Request Header)</li><li>请求正文</li></ol><h5 id="响应报文构成"><a href="#响应报文构成" class="headerlink" title="响应报文构成"></a>响应报文构成</h5><ol><li>状态行</li><li>响应头</li><li>响应正文</li></ol><h3 id="6、常见请求方法"><a href="#6、常见请求方法" class="headerlink" title="6、常见请求方法"></a>6、常见请求方法</h3><ul><li>GET: 请求指定的页面信息，并返回实体主体。</li><li>POST: 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</li><li>HEAD: 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li>PUT: 从客户端向服务器传送的数据取代指定的文档的内容。</li><li>DELETE: 请求服务器删除指定的页面。</li></ul><p><strong>post和get的区别：</strong></p><ul><li>都包含请求头请求行，post多了请求body。</li><li>get多用来查询，请求参数放在url中，不会对服务器上的内容产生作用。post用来提交，如把账号密码放入body中。</li><li>GET是直接添加到URL后面的，直接就可以在URL中看到内容，而POST是放在报文内部的，用户无法直接看到。</li><li>GET提交的数据长度是有限制的，因为URL长度有限制，具体的长度限制视浏览器而定。而POST没有。</li></ul><h3 id="7、响应状态码"><a href="#7、响应状态码" class="headerlink" title="7、响应状态码"></a>7、响应状态码</h3><p>访问一个网页时，浏览器会向web服务器发出请求。此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。</p><p><strong>状态码分类</strong>：</p><ul><li>1XX - 信息型，服务器收到请求，需要请求者继续操作。</li><li>2XX - 成功型，请求成功收到，理解并处理。</li><li>3XX - 重定向，需要进一步的操作以完成请求。</li><li>4XX - 客户端错误，请求包含语法错误或无法完成请求。</li><li>5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</li></ul><p><strong>常见状态码</strong>：</p><ul><li>200 - OK - 客户端请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>302 - 临时跳转</li><li>400 - Bad Request - 客户端请求有语法错误，不能被服务器所理解</li><li>401 - Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</li><li>404 - 请求资源不存在，可能是输入了错误的URL</li><li>500 - 服务器内部发生了不可预期的错误</li><li>503 - Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li></ul><h2 id="二、HTTPS-协议"><a href="#二、HTTPS-协议" class="headerlink" title="二、HTTPS 协议"></a>二、HTTPS 协议</h2><p>HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了数据加密。在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。</p><p><strong>一般http中存在如下问题：</strong></p><ul><li>请求信息明文传输，容易被窃听截取。</li><li>数据的完整性未校验，容易被篡改</li><li>没有验证对方身份，存在冒充危险</li></ul><h3 id="1、HTTPS协议是什么"><a href="#1、HTTPS协议是什么" class="headerlink" title="1、HTTPS协议是什么?"></a>1、HTTPS协议是什么?</h3><p>为了解决上述HTTP存在的问题，就用到了HTTPS。</p><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。</p><h3 id="2、SSL是什么？"><a href="#2、SSL是什么？" class="headerlink" title="2、SSL是什么？"></a>2、SSL是什么？</h3><p>SSL（Secure Socket Layer，安全套接字层）：1994年为 Netscape 所研发，SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。</p><p>TLS（Transport Layer Security，传输层安全）：其前身是 SSL，它最初的几个版本（SSL 1.0、SSL 2.0、SSL 3.0）由网景公司开发，1999年从 3.1 开始被 IETF 标准化并改名，发展至今已经有 TLS 1.0、TLS 1.1、TLS 1.2 三个版本。SSL3.0和TLS1.0由于存在安全漏洞，已经很少被使用到。TLS 1.3 改动会比较大，目前还在草案阶段，目前使用最广泛的是TLS 1.1、TLS 1.2。</p><h3 id="3、SSL发展史（互联网加密通信）"><a href="#3、SSL发展史（互联网加密通信）" class="headerlink" title="3、SSL发展史（互联网加密通信）"></a>3、SSL发展史（互联网加密通信）</h3><ol><li>1994年NetSpace公司设计SSL协议（Secure Sockets Layout）1.0版本，但未发布。</li><li>1995年NetSpace发布SSL/2.0版本，很快发现有严重漏洞</li><li>1996年发布SSL/3.0版本，得到大规模应用</li><li>1999年，发布了SSL升级版TLS/1.0版本，目前应用最广泛的版本</li><li>2006年和2008年，发布了TLS/1.1版本和TLS/1.2版本</li></ol><h3 id="4、HTTPS传输数据的流程"><a href="#4、HTTPS传输数据的流程" class="headerlink" title="4、HTTPS传输数据的流程"></a>4、HTTPS传输数据的流程</h3><p><a href="http://image.tooltool.club/image-20200802003945237.png" data-fancybox="group" data-caption="image-20200802003945237" class="fancybox"><img alt="image-20200802003945237" title="image-20200802003945237" data-src="http://image.tooltool.club/image-20200802003945237.png" class="lazyload"></a></p><ol><li>首先客户端通过URL访问服务器建立SSL连接。</li><li>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端。</li><li>客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li><li>服务器利用自己的私钥解密出会话密钥。</li><li>服务器利用会话密钥加密与客户端之间的通信。</li></ol><h3 id="5、HTTPS的缺点"><a href="#5、HTTPS的缺点" class="headerlink" title="5、HTTPS的缺点"></a>5、HTTPS的缺点</h3><ul><li>HTTPS协议多次握手，导致页面的加载时间延长近50%；</li><li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗；</li><li>申请SSL证书需要钱，功能越强大的证书费用越高。</li><li>SSL涉及到的安全算法会消耗 CPU 资源，对服务器资源消耗较大。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Python </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie与Session</title>
      <link href="/2020/04/04/Cookie%E4%B8%8ESession/"/>
      <url>/2020/04/04/Cookie%E4%B8%8ESession/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Cookie-与-Session"><a href="#Cookie-与-Session" class="headerlink" title="Cookie 与 Session"></a>Cookie 与 Session</h1><h2 id="一、Cookie"><a href="#一、Cookie" class="headerlink" title="一、Cookie"></a>一、Cookie</h2><h3 id="Cookie的含义"><a href="#Cookie的含义" class="headerlink" title="Cookie的含义"></a>Cookie的含义</h3><p>HTTP被设计为”无状态”，也就是俗称“脸盲”。这一次请求和下一次请求之间没有任何状态保持，我们无法根据请求的任何方面(<code>IP</code>地址，用户代理等)来识别来自同一人的连续请求。<br>cookies 是浏览器为 Web 服务器存储在本地的一小段信息。 每次浏览器从某个服务器请求页面时，都会自动带上以前收到的cookie。</p><p><a href="http://image.tooltool.club/image-20200801203336206.png" data-fancybox="group" data-caption="image-20200801203336206" class="fancybox"><img alt="image-20200801203336206" title="image-20200801203336206" data-src="http://image.tooltool.club/image-20200801203336206.png" class="lazyload"></a></p><h3 id="Cookie的用法"><a href="#Cookie的用法" class="headerlink" title="Cookie的用法"></a>Cookie的用法</h3><h4 id="设置-cookie"><a href="#设置-cookie" class="headerlink" title="设置 cookie"></a>设置 cookie</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HttpResponse.set_cookie(key, value=<span class="string">''</span>, max_age=<span class="literal">None</span>, expires=<span class="literal">None</span>, path=<span class="string">'/'</span>, domain=<span class="literal">None</span>, secure=<span class="literal">None</span>, httponly=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 同set_cookie, 不同点在于设置salt，即加盐，加密存储cookie数据</span></span><br><span class="line">HttpResponse.set_signed_cookie(key, value, salt=<span class="string">''</span>, max_age=<span class="literal">None</span>, expires=<span class="literal">None</span>, path=<span class="string">'/'</span>, domain=<span class="literal">None</span>, secure=<span class="literal">None</span>, httponly=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td>cookie的名称，必填</td></tr><tr><td>value</td><td>cookie的值,默认是空字符</td></tr><tr><td>max_age</td><td>cookies的持续有效时间（以秒计），如果设置为 <code>None</code>，cookies 在浏览器关闭的时候就失效了。</td></tr><tr><td>expires</td><td>cookies的过期时间，格式:<code>&quot;Wdy, DD-Mth-YY HH:MM:SS GMT&quot;</code> 如果设置这个参数，它将覆盖max_age。</td></tr><tr><td>path</td><td>cookie生效的路径前缀，浏览器只会把cookie回传给带有该路径的页面，这样你可以避免将cookie传给站点中的其他的应用。<code>/</code>表示根路径，特殊的：根路径的cookie可以被任何url的页面访问</td></tr><tr><td>domain</td><td>cookie生效的站点。你可用这个参数来构造一个跨站cookie。如， domain<code>=</code>“.plutozone.site”所构造的cookie对下面这些站点都是可读的： blog.plutozone.site 、<a href="http://www.plutozone.site，如果该参数设置为``None``，cookie只能由设置它的站点读取。" target="_blank" rel="noopener">www.plutozone.site，如果该参数设置为``None``，cookie只能由设置它的站点读取。</a></td></tr><tr><td>secure</td><td>如果设置为 <code>True</code>，浏览器将通过HTTPS来回传cookie。</td></tr><tr><td>httponly</td><td>仅http传输，不能使用js获取cookie</td></tr></tbody></table><h4 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.COOKIES.get(key)</span><br></pre></td></tr></table></figure></div><h4 id="删除-cookie"><a href="#删除-cookie" class="headerlink" title="删除 cookie"></a>删除 cookie</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep = HttpResponse || render || redirect </span><br><span class="line">rep.delete_cookie(key)</span><br></pre></td></tr></table></figure></div><h2 id="二、Session"><a href="#二、Session" class="headerlink" title="二、Session"></a>二、Session</h2><h3 id="Session的含义"><a href="#Session的含义" class="headerlink" title="Session的含义"></a>Session的含义</h3><p>cookie看似解决了HTTP（短连接、无状态）的会话保持问题，但把全部用户数据保存在客户端，存在安全隐患，于是session出现了，我们可以 把关于用户的数据保存在服务端，在客户端cookie里加一个sessionID（随机字符串）。其工作流程：</p><p>(1)、当用户来访问服务端时,服务端会生成一个随机字符串；</p><p>(2)、当用户登录成功后 把 {sessionID :随机字符串} 组织成键值对加到cookie里发送给用户；</p><p>(3)、服务器以发送给客户端 cookie中的随机字符串做键，用户信息做值，保存用户信息；</p><p>(4)、再访问服务时客户端会带上sessionid，服务器根据sessionid来确认用户是否访问过网站</p><p><a href="http://image.tooltool.club/image-20200801203610241.png" data-fancybox="group" data-caption="image-20200801203610241" class="fancybox"><img alt="image-20200801203610241" title="image-20200801203610241" data-src="http://image.tooltool.club/image-20200801203610241.png" class="lazyload"></a></p><h3 id="Session的用法"><a href="#Session的用法" class="headerlink" title="Session的用法"></a>Session的用法</h3><h4 id="设置-session"><a href="#设置-session" class="headerlink" title="设置 session"></a>设置 session</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">"key"</span>] = value</span><br></pre></td></tr></table></figure></div><ul><li>a. 生成随机字符串。</li><li>b. 把随机字符串和设置的键值对保存到 django_session 表的 session_key 和 session_data 里。</li><li>b. 把随机字符串和设置的键值对保存到 django_session 表的 session_key 和 session_data 里</li><li>c. 设置 <strong>cookie：set_cookie(“sessionid”,随机字符串)</strong> 响应给浏览器。</li></ul><h4 id="获取-session"><a href="#获取-session" class="headerlink" title="获取 session"></a>获取 session</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.get(<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure></div><ul><li>a. 从 cookie 中获取 sessionid 键的值，即随机字符串。</li><li>b. 根据随机字符串从 django_session 表过滤出记录。</li><li>c. 取出 session_data 字段的数据。</li></ul><h4 id="删除-session"><a href="#删除-session" class="headerlink" title="删除 session"></a>删除 session</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除整条记录（包括 session_key、session_data、expire_date 三个字段）</span></span><br><span class="line">request.session.flush()</span><br><span class="line"><span class="comment"># 删除 session_data 里的其中一组键值对</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">"key"</span>]</span><br></pre></td></tr></table></figure></div><ul><li>a. 从 cookie 中获取 sessionid 键的值，即随机字符串。</li><li>b. 根据随机字符串从 django_session 表过滤出记录。</li><li>c. 删除过滤出来的记录。</li></ul><h2 id="三、Cookie与Session的比较"><a href="#三、Cookie与Session的比较" class="headerlink" title="三、Cookie与Session的比较"></a>三、Cookie与Session的比较</h2><ol><li>cookie数据存放在客户的浏览器上，session数据放在服务器上。</li><li>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗<br>考虑到安全应当使用session，所以一般登录信息都会采用session进行存储。</li><li>session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能<br>考虑到减轻服务器性能方面，应当使用cookie。</li><li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup库—详细解析</title>
      <link href="/2020/03/15/BeautifulSoup%E5%BA%93/"/>
      <url>/2020/03/15/BeautifulSoup%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BeautifulSoup库入门"><a href="#BeautifulSoup库入门" class="headerlink" title="BeautifulSoup库入门"></a>BeautifulSoup库入门</h1><ul><li>点击进入<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/" target="_blank" rel="noopener">BeautifulSoup库官方文档</a><br></li></ul><h2 id="1、Beautiful-Soup库的基本元素"><a href="#1、Beautiful-Soup库的基本元素" class="headerlink" title="1、Beautiful  Soup库的基本元素"></a>1、Beautiful  Soup库的基本元素</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;title&quot;&gt;标签树 &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></div><ul><li>Beautiful Soup库是解析、遍历、维护“标签树”的功能库</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;title&quot;&gt; 标签树 &lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure></div><ul><li><code>p</code>:名称 Name 成对出现</li><li><code>class=&quot;title&quot;</code>:属性 Attributes 0个或多个</li><li><code>&lt;p&gt;…&lt;/p&gt;</code>:标签 Tag</li></ul><h4 id="基本元素——说明"><a href="#基本元素——说明" class="headerlink" title="基本元素——说明"></a>基本元素——说明</h4><ul><li>Tag: 标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</li><li>Name: 标签的名字，<code>&lt;p&gt;…&lt;/p&gt;</code>的名字是’p’，格式：<code>&lt;tag&gt;.name</code></li><li>Attributes: 标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code></li><li>NavigableString: 标签内非属性字符串，<code>&lt;p&gt;…&lt;/p&gt;</code>中字符串，格式：<code>&lt;tag&gt;.string</code></li><li>Comment: 标签内字符串的注释部分，一种特殊的Comment类型</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">html = requests.get(<span class="string">"https://python123.io/ws/demo.html"</span>).text</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">print(<span class="string">"1、Tag 标签示例："</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.a)</span><br><span class="line">print(<span class="string">"2、Name 标签名字示例："</span>)</span><br><span class="line">print(<span class="string">"a标签名称:"</span>, soup.a.name)</span><br><span class="line">print(<span class="string">"a的父标签名称:"</span>, soup.a.parent.name)</span><br><span class="line">print(<span class="string">"a的父标签的父标签名称:"</span>, soup.a.parent.parent.name)</span><br><span class="line">print(<span class="string">"3、Attributes 标签的属性："</span>)</span><br><span class="line">print(soup.a.attrs)</span><br><span class="line">print(soup.a.attrs[<span class="string">"class"</span>])</span><br><span class="line">print(soup.a.attrs[<span class="string">"id"</span>])</span><br><span class="line">print(<span class="string">"4、NavigableString 标签内非属性字符串示例："</span>)</span><br><span class="line">print(soup.a.string)</span><br><span class="line">print(soup.p.string)</span><br><span class="line">print(<span class="string">"5、Comment 标签内字符串的注释部分示例："</span>)</span><br><span class="line">print(type(soup.a.string))</span><br><span class="line">print(type(soup.p.string))</span><br></pre></td></tr></table></figure></div><pre><code>1、Tag 标签示例：&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;2、Name 标签名字示例：a标签名称: aa的父标签名称: pa的父标签的父标签名称: body3、Attributes 标签的属性：{&apos;href&apos;: &apos;http://www.icourse163.org/course/BIT-268001&apos;, &apos;class&apos;: [&apos;py1&apos;], &apos;id&apos;: &apos;link1&apos;}[&apos;py1&apos;]link14、NavigableString 标签内非属性字符串示例：Basic PythonThe demo python introduces several python courses.5、Comment 标签内字符串的注释部分示例：&lt;class &apos;bs4.element.NavigableString&apos;&gt;&lt;class &apos;bs4.element.NavigableString&apos;&gt;</code></pre><h2 id="2、Beautiful-Soup库的HTML内容遍历方法"><a href="#2、Beautiful-Soup库的HTML内容遍历方法" class="headerlink" title="2、Beautiful  Soup库的HTML内容遍历方法"></a>2、Beautiful  Soup库的HTML内容遍历方法</h2><p>Beautiful Soup库，也叫beautifulsoup4 或 bs4<br>约定引用方式如下，即主要是用BeautifulSoup类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br></pre></td></tr></table></figure></div><p>BeautifulSoup库的HTML内容遍历方法包括：下行遍历、上行遍历和平行遍历</p><h4 id="下行遍历"><a href="#下行遍历" class="headerlink" title="下行遍历"></a>下行遍历</h4><ul><li><code>.contents</code>: 子节点的列表，将<tag>所有儿子节点存入列表</tag></li><li><code>.children</code>: 子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</li><li><code>.descendants</code>: 子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</li></ul><h4 id="上行遍历"><a href="#上行遍历" class="headerlink" title="上行遍历"></a>上行遍历</h4><ul><li><code>.parent</code>: 节点的父亲标签</li><li><code>.parents</code>: 节点先辈标签的迭代类型，用于循环遍历先辈节点</li></ul><h4 id="平行遍历"><a href="#平行遍历" class="headerlink" title="平行遍历"></a>平行遍历</h4><ul><li><code>.next_sibling</code>: 返回按照HTML文本顺序的下一个平行节点标签</li><li><code>.previous_sibling</code>: 返回按照HTML文本顺序的上一个平行节点标签</li><li><code>.next_siblings</code>: 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</li><li><code>.previous_siblings</code>: 迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</li></ul><p>BeautifulSoup库的prettify()方法:使查看更加友好</p><ul><li><code>.prettify()</code>: 为HTML文本&lt;&gt;及其内容增加更加’\n’</li><li><code>.prettify()</code>: 可用于标签，方法：<code>&lt;tag&gt;.prettify()</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = requests.get(<span class="string">"https://python123.io/ws/demo.html"</span>).text</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure></div><pre><code>&lt;html&gt; &lt;head&gt;  &lt;title&gt;   This is a python demo page  &lt;/title&gt; &lt;/head&gt; &lt;body&gt;  &lt;p class=&quot;title&quot;&gt;   &lt;b&gt;    The demo python introduces several python courses.   &lt;/b&gt;  &lt;/p&gt;  &lt;p class=&quot;course&quot;&gt;   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:   &lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;    Basic Python   &lt;/a&gt;   and   &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;    Advanced Python   &lt;/a&gt;   .  &lt;/p&gt; &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="3、Beautiful-Soup库解析器"><a href="#3、Beautiful-Soup库解析器" class="headerlink" title="3、Beautiful Soup库解析器"></a>3、Beautiful Soup库解析器</h2><h4 id="解析器——使用方法——条件"><a href="#解析器——使用方法——条件" class="headerlink" title="解析器——使用方法——条件"></a>解析器——使用方法——条件</h4><ul><li>bs4的HTML解析器——BeautifulSoup(mk,’html.parser’)——安装bs4库</li><li>lxml的HTML解析器——BeautifulSoup(mk,’lxml’)——pip install lxml</li><li>lxml的XML解析器——BeautifulSoup(mk,’xml’)——pip install lxml</li><li>html5lib的解析器——BeautifulSoup(mk,’html5lib’)——pip install html5lib</li></ul><h2 id="4、信息标记与提取方法"><a href="#4、信息标记与提取方法" class="headerlink" title="4、信息标记与提取方法"></a>4、信息标记与提取方法</h2><h3 id="①信息的标记"><a href="#①信息的标记" class="headerlink" title="①信息的标记"></a>①信息的标记</h3><ul><li>标记后的信息可形成信息组织结构，增加了信息维度</li><li>标记的结构与信息一样具有重要价值</li><li>标记后的信息可用于通信、存储或展示</li><li>标记后的信息更利于程序理解和运用</li></ul><h4 id="信息标记的三种形式：XML-、JSON-、YAML"><a href="#信息标记的三种形式：XML-、JSON-、YAML" class="headerlink" title="信息标记的三种形式：XML 、JSON 、YAML"></a>信息标记的三种形式：XML 、JSON 、YAML</h4><ul><li><a href="https://baike.baidu.com/item/XML" target="_blank" rel="noopener">XML</a>: 最早的通用信息标记语言，可扩展性好，但繁琐;Internet上的信息交互与传递</li><li><a href="https://baike.baidu.com/item/JSON" target="_blank" rel="noopener">JSON</a>: 信息有类型，适合程序处理(js)，较XML简洁;移动应用云端和节点的信息通信，无注释</li><li><a href="https://baike.baidu.com/item/YAML" target="_blank" rel="noopener">YAML</a>: 信息无类型，文本信息比例最高，可读性好;各类系统的配置文件，有注释易读</li></ul><h3 id="②信息的提取"><a href="#②信息的提取" class="headerlink" title="②信息的提取"></a>②信息的提取</h3><ul><li>从标记后的信息中提取所关注的内容</li></ul><h4 id="1-完整解析信息的标记形式，再提取关键信息-XML-JSON-YAML"><a href="#1-完整解析信息的标记形式，再提取关键信息-XML-JSON-YAML" class="headerlink" title="(1)完整解析信息的标记形式，再提取关键信息(XML JSON YAML)"></a>(1)完整解析信息的标记形式，再提取关键信息(XML JSON YAML)</h4><ul><li>需要标记解析器，例如：bs4库的标签树遍历</li><li>优点：信息解析准确</li><li>缺点：提取过程繁琐，速度慢</li></ul><h4 id="2-无视标记形式，直接搜索关键信息-搜索"><a href="#2-无视标记形式，直接搜索关键信息-搜索" class="headerlink" title="(2)无视标记形式，直接搜索关键信息(搜索)"></a>(2)无视标记形式，直接搜索关键信息(搜索)</h4><ul><li>对信息的文本查找函数即可</li><li>优点：提取过程简洁，速度较快</li><li>缺点：提取结果准确性与信息内容相关</li></ul><h4 id="3-结合形式解析与搜索方法，提取关键信息-XML-JSON-YAML-搜索"><a href="#3-结合形式解析与搜索方法，提取关键信息-XML-JSON-YAML-搜索" class="headerlink" title="(3)结合形式解析与搜索方法，提取关键信息(XML JSON YAML 搜索)"></a>(3)结合形式解析与搜索方法，提取关键信息(XML JSON YAML 搜索)</h4><ul><li>需要标记解析器及文本查找函数</li></ul><h2 id="5、Beautiful-Soup库的HTML内容查找方法"><a href="#5、Beautiful-Soup库的HTML内容查找方法" class="headerlink" title="5、Beautiful  Soup库的HTML内容查找方法"></a>5、Beautiful  Soup库的HTML内容查找方法</h2><h4 id="lt-gt-find-all-name-attrs-recursive-string-kwargs"><a href="#lt-gt-find-all-name-attrs-recursive-string-kwargs" class="headerlink" title="&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs) :"></a><code>&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs)</code> :</h4><ul><li><code>name</code> : 对标签名称的检索字符串</li><li><code>attrs</code>: 对标签属性值的检索字符串，可标注属性检索</li><li><code>recursive</code>: 是否对子孙全部检索，默认True</li><li><code>string</code>: &lt;&gt;…&lt;/&gt;中字符串区域的检索字符串</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">a = soup.find_all(<span class="string">"a"</span>)</span><br><span class="line">b = soup.find_all(<span class="string">"a"</span>, &#123;<span class="string">"class"</span>: <span class="string">"py1"</span>&#125;)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></div><pre><code>[&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;, &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;][&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;]</code></pre><ul><li><code>&lt;&gt;.find()</code>: 搜索且只返回一个结果，同.find_all()参数</li><li><code>&lt;&gt;.find_parents()</code>: 在先辈节点中搜索，返回列表类型，同.find_all()参数</li><li><code>&lt;&gt;.find_parent()</code>: 在先辈节点中返回一个结果，同.find()参数</li><li><code>&lt;&gt;.find_next_siblings()</code>: 在后续平行节点中搜索，返回列表类型，同.find_all()参数</li><li><code>&lt;&gt;.find_next_sibling()</code>: 在后续平行节点中返回一个结果，同.find()参数</li><li><code>&lt;&gt;.find_previous_siblings()</code>: 在前序平行节点中搜索，返回列表类型，同.find_all()参数</li><li><code>&lt;&gt;.find_previous_sibling()</code>: 在前序平行节点中返回一个结果，同.find()参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> BeautifulSoup </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request库—详细解析</title>
      <link href="/2020/03/10/Request%E5%BA%93/"/>
      <url>/2020/03/10/Request%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Requests库的入门"><a href="#Requests库的入门" class="headerlink" title="Requests库的入门"></a>Requests库的入门</h1><p>点击进入<a href="https://2.python-requests.org//zh_CN/latest/user/install.html" target="_blank" rel="noopener">requests库官方文档</a><br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></div><pre><code>200</code></pre><h2 id="一、Requests库的基本方法"><a href="#一、Requests库的基本方法" class="headerlink" title="一、Requests库的基本方法"></a>一、Requests库的基本方法</h2><ul><li>requests.request() 构造一个请求，支撑以下各方法的基础方法</li><li>requests.get() 获取HTML网页的主要方法，对应于HTTP的GET</li><li>requests.head() 获取HTML网页头信息的方法，对应于HTTP的HEAD</li><li>requests.post() 向HTML网页提交POST请求的方法，对应于HTTP的POST</li><li>requests.put() 向HTML网页提交PUT请求的方法，对应于HTTP的PUT</li><li>requests.patch() 向HTML网页提交局部修改请求，对应于HTTP的PATCH</li><li>requests.delete() 向HTML页面提交删除请求，对应于HTTP的DELETE</li></ul><h3 id="1-requests-request-method-url-kwargs"><a href="#1-requests-request-method-url-kwargs" class="headerlink" title="(1) requests.request(method, url, **kwargs)"></a>(1) requests.request(method, url, **kwargs)</h3><ul><li>method :  请求方式，对应get/put/post等7种</li><li>url :  拟获取页面的url链接</li><li>**kwargs :  控制访问的参数，共13个</li></ul><h4 id="method-请求方式"><a href="#method-请求方式" class="headerlink" title="method : 请求方式"></a>method : 请求方式</h4><ul><li>r = requests.request(‘GET’, url, **kwargs) </li><li>r = requests.request(‘HEAD’, url, **kwargs) </li><li>r = requests.request(‘POST’, url, **kwargs) </li><li>r = requests.request(‘PUT’, url, **kwargs) </li><li>r = requests.request(‘PATCH’, url, **kwargs) </li><li>r = requests.request(‘delete’, url, **kwargs) </li><li>r = requests.request(‘OPTIONS’, url, **kwargs)</li></ul><h4 id="kwargs-控制访问的参数，均为可选项"><a href="#kwargs-控制访问的参数，均为可选项" class="headerlink" title="**kwargs: 控制访问的参数，均为可选项"></a>**kwargs: 控制访问的参数，均为可选项</h4><ul><li>params : 字典或字节序列，作为参数增加到url中</li><li>data : 字典、字节序列或文件对象，作为Request的内容</li><li>json : JSON格式的数据，作为Request的内容</li><li>headers : 字典，HTTP定制头</li><li>cookies : 字典或CookieJar，Request中的cookie</li><li>auth : 元组，支持HTTP认证功能</li><li>files : 字典类型，传输文件</li><li>timeout : 设定超时时间，秒为单位</li><li>proxies : 字典类型，设定访问代理服务器，可以增加登录认证</li><li>allow_redirects : True/False，默认为True，重定向开关</li><li>stream : True/False，默认为True，获取内容立即下载开关</li><li>verify : True/False，默认为True，认证SSL证书开关</li><li>cert : 本地SSL证书路径</li></ul><h3 id="2-requests-get-url-params-None-kwargs"><a href="#2-requests-get-url-params-None-kwargs" class="headerlink" title="(2) requests.get(url, params=None, **kwargs)"></a>(2) requests.get(url, params=None, **kwargs)</h3><ul><li>url :  拟获取页面的url链接</li><li>params :  url中的额外参数，字典或字节流格式，可选</li><li>**kwargs :  12个控制访问的参数</li></ul><h3 id="3-requests-head-url-kwargs"><a href="#3-requests-head-url-kwargs" class="headerlink" title="(3) requests.head(url, **kwargs)"></a>(3) requests.head(url, **kwargs)</h3><ul><li>url :  拟获取页面的url链接</li><li>**kwargs :  12个控制访问的参数</li></ul><h3 id="4-requests-post-url-data-None-json-None-kwargs"><a href="#4-requests-post-url-data-None-json-None-kwargs" class="headerlink" title="(4) requests.post(url, data=None, json=None, **kwargs)"></a>(4) requests.post(url, data=None, json=None, **kwargs)</h3><ul><li>url : 拟更新页面的url链接</li><li>data : 字典、字节序列或文件，Request的内容</li><li>json : JSON格式的数据，Request的内容</li><li>**kwargs : 12个控制访问的参数</li></ul><h3 id="5-requests-put-url-data-None-kwargs"><a href="#5-requests-put-url-data-None-kwargs" class="headerlink" title="(5) requests.put(url, data=None, **kwargs)"></a>(5) requests.put(url, data=None, **kwargs)</h3><ul><li>url : 拟更新页面的url链接</li><li>data : 字典、字节序列或文件，Request的内容</li><li>**kwargs : 12个控制访问的参数</li></ul><h3 id="6-requests-patch-url-data-None-kwargs"><a href="#6-requests-patch-url-data-None-kwargs" class="headerlink" title="(6) requests.patch(url, data=None, **kwargs)"></a>(6) requests.patch(url, data=None, **kwargs)</h3><ul><li>url : 拟更新页面的url链接</li><li>data : 字典、字节序列或文件，Request的内容</li><li>**kwargs : 12个控制访问的参数</li></ul><h3 id="7-requests-delete-url-kwargs"><a href="#7-requests-delete-url-kwargs" class="headerlink" title="(7) requests.delete(url, **kwargs)"></a>(7) requests.delete(url, **kwargs)</h3><ul><li>url : 拟删除页面的url链接</li><li>**kwargs : 12个控制访问的参数</li></ul><h2 id="二、理解response对象"><a href="#二、理解response对象" class="headerlink" title="二、理解response对象"></a>二、理解response对象</h2><h3 id="1-Response对象包含服务器返回的所有信息，也包含请求的Request信息"><a href="#1-Response对象包含服务器返回的所有信息，也包含请求的Request信息" class="headerlink" title="(1) Response对象包含服务器返回的所有信息，也包含请求的Request信息"></a>(1) Response对象包含服务器返回的所有信息，也包含请求的Request信息</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(type(r))</span><br><span class="line">print(r.headers)</span><br></pre></td></tr></table></figure></div><pre><code>200&lt;class &apos;requests.models.Response&apos;&gt;{&apos;Cache-Control&apos;: &apos;private, no-cache, no-store, proxy-revalidate, no-transform&apos;, &apos;Connection&apos;: &apos;Keep-Alive&apos;, &apos;Content-Encoding&apos;: &apos;gzip&apos;, &apos;Content-Type&apos;: &apos;text/html&apos;, &apos;Date&apos;: &apos;Fri, 22 Nov 2019 00:25:29 GMT&apos;, &apos;Last-Modified&apos;: &apos;Mon, 23 Jan 2017 13:27:36 GMT&apos;, &apos;Pragma&apos;: &apos;no-cache&apos;, &apos;Server&apos;: &apos;bfe/1.0.8.18&apos;, &apos;Set-Cookie&apos;: &apos;BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&apos;, &apos;Transfer-Encoding&apos;: &apos;chunked&apos;}</code></pre><h3 id="2-Response对象的属性"><a href="#2-Response对象的属性" class="headerlink" title="(2) Response对象的属性"></a>(2) Response对象的属性</h3><ul><li>r.status_code HTTP请求的返回状态，200表示连接成功，404表示失败</li><li>r.text HTTP响应内容的字符串形式，即，url对应的页面内容</li><li>r.encoding 从HTTP header中猜测的响应内容编码方式</li><li>r.apparent_encoding 从内容中分析出的响应内容编码方式（备选编码方式）</li><li>r.content HTTP响应内容的二进制形式</li></ul><h3 id="3-理解Response的编码"><a href="#3-理解Response的编码" class="headerlink" title="(3) 理解Response的编码"></a>(3) 理解Response的编码</h3><ul><li>r.encoding：如果header中不存在charset，则认为编码为ISO‐8859‐1</li><li>r.text根据r.encoding显示网页内容</li><li>r.apparent_encoding：根据网页内容分析出的编码方式（可以看作是r.encoding的备选）</li></ul><h3 id="4-理解Response异常"><a href="#4-理解Response异常" class="headerlink" title="(4) 理解Response异常"></a>(4) 理解Response异常</h3><ul><li>r.raise_for_status() 如果不是200，产生异常 requests.HTTPError</li><li>r.raise_for_status()在方法内部判断r.status_code是否等于200，不需要增加额外的if语句，该语句便于利用try‐except进行异常处理</li></ul><h2 id="三、Requests库的常见异常"><a href="#三、Requests库的常见异常" class="headerlink" title="三、Requests库的常见异常"></a>三、Requests库的常见异常</h2><ul><li>requests.ConnectionError 网络连接错误异常，如DNS查询失败、拒绝连接等</li><li>requests.HTTPError HTTP错误异常</li><li>requests.URLRequired URL缺失异常</li><li>requests.TooManyRedirects 超过最大重定向次数，产生重定向异常</li><li>requests.ConnectTimeout 连接远程服务器超时异常</li><li>requests.Timeout 请求URL超时，产生超时异常</li></ul><h2 id="四、爬取网页的通用代码框架"><a href="#四、爬取网页的通用代码框架" class="headerlink" title="四、爬取网页的通用代码框架"></a>四、爬取网页的通用代码框架</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">100</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"访问异常"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">print(request(url))</span><br></pre></td></tr></table></figure></div><pre><code>&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class=&quot;bg s_btn_wr&quot;&gt;&lt;input type=submit id=su value=百度一下 class=&quot;bg s_btn&quot;&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;登录&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write(&apos;&lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=&apos;+ encodeURIComponent(window.location.href+ (window.location.search === &quot;&quot; ? &quot;?&quot; : &quot;&amp;&quot;)+ &quot;bdorz_come=1&quot;)+ &apos;&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&gt;登录&lt;/a&gt;&apos;);&lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style=&quot;display: block;&quot;&gt;更多产品&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;关于百度&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;使用百度前必读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;</code></pre><p>​    </p><h2 id="五、HTTP协议"><a href="#五、HTTP协议" class="headerlink" title="五、HTTP协议"></a>五、HTTP协议</h2><h3 id="1-HTTP-URL的理解"><a href="#1-HTTP-URL的理解" class="headerlink" title="(1) HTTP URL的理解"></a>(1) HTTP URL的理解</h3><ul><li>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源</li></ul><h3 id="2-HTTP协议对资源的操作"><a href="#2-HTTP协议对资源的操作" class="headerlink" title="(2) HTTP协议对资源的操作"></a>(2) HTTP协议对资源的操作</h3><ul><li>GET 请求获取URL位置的资源</li><li>HEAD 请求获取URL位置资源的响应消息报告，即获得该资源的头部信息</li><li>POST 请求向URL位置的资源后附加新的数据</li><li>PUT 请求向URL位置存储一个资源，覆盖原URL位置的资源</li><li>PATCH 请求局部更新URL位置的资源，即改变该处资源的部分内容</li><li>DELETE 请求删除URL位置存储的资源</li></ul><h3 id="3-PATCH和PUT的区别"><a href="#3-PATCH和PUT的区别" class="headerlink" title="(3) PATCH和PUT的区别"></a>(3) PATCH和PUT的区别</h3><p>假设URL位置有一组数据UserInfo，包括UserID、UserName等20个字段,</p><p>需求：用户修改了UserName，其他不变</p><ul><li>采用PATCH，仅向URL提交UserName的局部更新请求</li><li>采用PUT，必须将所有20个字段一并提交到URL，未提交字段被删除</li></ul><p>PATCH的最主要好处：节省网络带宽</p><h2 id="六、Robot协议（网络爬虫排除标准）"><a href="#六、Robot协议（网络爬虫排除标准）" class="headerlink" title="六、Robot协议（网络爬虫排除标准）"></a>六、Robot协议（网络爬虫排除标准）</h2><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p><a href="http://www.baidu.com/robots.txt" target="_blank" rel="noopener">百度Robot协议</a><br><br><a href="http://news.sina.com.cn/robots.txt" target="_blank" rel="noopener">新浪新闻Robot协议</a><br><br><a href="http://www.qq.com/robots.txt" target="_blank" rel="noopener">腾讯Robot协议</a><br><br><a href="http://news.qq.com/robots.txt" target="_blank" rel="noopener">腾讯新闻Robot协议</a><br></p><ul><li>*代表所有，/代表根目录</li><li>User‐agent: *</li><li>Disallow: /</li></ul><h4 id="网络爬虫："><a href="#网络爬虫：" class="headerlink" title="网络爬虫："></a>网络爬虫：</h4><ul><li>自动或人工识别robots.txt，再进行内容爬取</li></ul><h4 id="约束性："><a href="#约束性：" class="headerlink" title="约束性："></a>约束性：</h4><ul><li>Robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险</li></ul><h1 id="七、爬虫实战项目"><a href="#七、爬虫实战项目" class="headerlink" title="七、爬虫实战项目"></a>七、爬虫实战项目</h1><h3 id="实例1：京东商品页面的爬取"><a href="#实例1：京东商品页面的爬取" class="headerlink" title="实例1：京东商品页面的爬取"></a>实例1：京东商品页面的爬取</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://item.jd.com/2967929.html"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;    &lt;!-- shouji --&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gbk&quot; /&gt;    &lt;title&gt;【华为荣耀8】荣耀8 4GB+64GB 全网通4G手机 魅海蓝【行情 报价 价格 评测】-京东&lt;/title&gt;    &lt;meta name=&quot;keywords&quot; content=&quot;HUAWEI荣耀8,华为荣耀8,华为荣耀8报价,HUAWEI荣耀8报价&quot;/&gt;    &lt;meta name=&quot;description&quot; content=&quot;【华为荣耀8】京东JD.COM提供华为荣耀8正品行货，并包括HUAWEI荣耀8网购指南，以及华为荣耀8图片、荣耀8参数、荣耀8评论、荣耀8心得、荣耀8技巧等信息，网购华为荣耀8上京东,放心又轻松&quot; /&gt;    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;    &lt;meta http-equiv=&quot;mobile-agent&quot; content=&quot;format=xhtml; url=//item.m.jd.com/product/2967929.html&quot;&gt;    &lt;meta http-equiv=&quot;mobile-agent&quot; content=&quot;format=html5; url=//item.m.jd.com/product/2967929.html&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;    &lt;link rel=&quot;canonical&quot; href=&quot;//item.jd.com/2967929.html&quot;/&gt;        &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//misc.360buyimg.com&quot;/&gt;    &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//static.360buyimg.com&quot;/&gt;    &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img10.360buyimg.com&quot;/&gt;    &lt;link rel=&quot;dns</code></pre><h3 id="实例2：亚马逊商品页面的爬取-已经失效了"><a href="#实例2：亚马逊商品页面的爬取-已经失效了" class="headerlink" title="实例2：亚马逊商品页面的爬取(已经失效了)"></a>实例2：亚马逊商品页面的爬取(已经失效了)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://www.amazon.cn/gp/product/B01M8L5Z3Y"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">    r = requests.get(url,headers=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[<span class="number">1000</span>:<span class="number">2000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div><pre><code>       ue_sid = (document.cookie.match(/session-id=([0-9-]+)/) || [])[1],        ue_sn = &quot;opfcaptcha.amazon.cn&quot;,        ue_id = &apos;7F04678RW7QQ93SA4R06&apos;;}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;!--        To discuss automated access to Amazon data please contact api-services-support@amazon.com.        For information about migrating to our APIs refer to our Marketplace APIs at https://developer.amazonservices.com.cn/index.html/ref=rm_c_sv, or our Product Advertising API at https://associates.amazon.cn/gp/advertising/api/detail/main.html/ref=rm_c_ac for advertising use cases.--&gt;&lt;!--Correios.DoNotSend--&gt;&lt;div class=&quot;a-container a-padding-double-large&quot; style=&quot;min-width:350px;padding:44px 0 !important&quot;&gt;    &lt;div class=&quot;a-row a-spacing-double-large&quot; style=&quot;width: 350px; margin: 0 auto&quot;&gt;        &lt;div class=&quot;a-row a-spacing-medium a-text-center&quot;&gt;&lt;i class=&quot;a-icon a-logo&quot;&gt;&lt;/i&gt;&lt;/div&gt;        &lt;div class=&quot;a-box a-alert a-alert-info a-spacing-base&quot;&gt;            &lt;div class=&quot;a-box-inner&quot;&gt;</code></pre><p>​    </p><h3 id="实例3：百度-360搜索关键字提交"><a href="#实例3：百度-360搜索关键字提交" class="headerlink" title="实例3：百度/360搜索关键字提交"></a>实例3：百度/360搜索关键字提交</h3><ul><li>百度的关键词接口：<br><a href="http://www.baidu.com/s?wd=keyword" target="_blank" rel="noopener">http://www.baidu.com/s?wd=keyword</a></li><li>360的关键词接口：<br><a href="http://www.so.com/s?q=keyword" target="_blank" rel="noopener">http://www.so.com/s?q=keyword</a></li></ul><h4 id="①百度搜索关键字提交"><a href="#①百度搜索关键字提交" class="headerlink" title="①百度搜索关键字提交"></a>①百度搜索关键字提交</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'wd'</span>:keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(len(r.text))</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div><pre><code>https://wappass.baidu.com/static/captcha/tuxing.html?&amp;ak=c27bbc89afca0463650ac9bde68ebe06&amp;backurl=https%3A%2F%2Fwww.baidu.com%2Fs%3Fwd%3DPython&amp;logid=7645345012099045417&amp;signature=710863db7c7bfd3155daac5cf6b5ed22&amp;timestamp=15744019461469&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;百度安全验证&lt;/title&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0&quot;&gt;    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no, email=no&quot;&gt;    &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://www.baidu.com/favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;    &lt;link rel=&quot;icon&quot; sizes=&quot;any&quot; mask href=&quot;https://www.baidu.com/img/baidu.svg&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;    &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://wappass.bdimg.com/static/touch/css/api/mkdjump_8befa48.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;timeout hide&quot;&gt;        &lt;div class=&quot;timeout-img&quot;&gt;&lt;</code></pre><h4 id="②360搜索关键字提交"><a href="#②360搜索关键字提交" class="headerlink" title="②360搜索关键字提交"></a>②360搜索关键字提交</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'q'</span>:keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.so.com/s"</span>,params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(len(r.text))</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div><pre><code>https://www.so.com/s?q=Python308919&lt;!DOCTYPE html&gt;&lt;!--[if lt IE 7 ]&gt;&lt;html class=&quot;ie6&quot;&gt;&lt;![endif]--&gt;&lt;!--[if IE 7 ]&gt;&lt;html class=&quot;ie7&quot;&gt;&lt;![endif]--&gt;&lt;!--[if IE 8 ]&gt;&lt;html class=&quot;ie8&quot;&gt;&lt;![endif]--&gt;&lt;!--[if IE 9 ]&gt;&lt;html class=&quot;ie9&quot;&gt;&lt;![endif]--&gt;&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html&gt;&lt;!--&lt;![endif]--&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta content=&quot;always&quot; name=&quot;referrer&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;title&gt;Python_360搜索&lt;/title&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//p.ssl.qhimg.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//s.ssl.qhimg.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//s.ssl.qhres.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//p418.ssl.qhimgs4.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//p419.ssl.qhimgs4.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//p420.ssl.qhimgs4.com&quot;&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;https://s.ssl.qhimg.com/static/121a1737750aa53d.ico&quot; type=&quot;image/x-icon&quot;&gt;&lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; href=&quot;https://www.so.com/soopensearch.xml&quot; title=&quot;360搜索&quot;&gt;&lt;style type=&quot;text/css&quot;&gt;body{background</code></pre><h3 id="实例4：网络图片的爬取和存储"><a href="#实例4：网络图片的爬取和存储" class="headerlink" title="实例4：网络图片的爬取和存储"></a>实例4：网络图片的爬取和存储</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">"http://image.nationalgeographic.com.cn/2017/0211/20170211061910157.jpg"</span></span><br><span class="line"><span class="comment"># url = "https://images.pexels.com/photos/373488/pexels-photo-373488.jpeg?auto=compress&amp;cs=tinysrgb&amp;h=750&amp;w=1260"</span></span><br><span class="line">root = <span class="string">"E://photo//"</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">        r = requests.get(url,headers=kv)</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"文件已存在"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div><pre><code>文件保存成功</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8、设置Nginx和uWSGI——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/8%E3%80%81%E8%AE%BE%E7%BD%AENginx%E5%92%8CuWSGI/"/>
      <url>/2020/03/08/8%E3%80%81%E8%AE%BE%E7%BD%AENginx%E5%92%8CuWSGI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：安装Nginx和uWSGI"><a href="#第一步：安装Nginx和uWSGI" class="headerlink" title="第一步：安装Nginx和uWSGI"></a>第一步：安装Nginx和uWSGI</h2><ul><li>首先，我们需要先登录远程服务器；然后，我们使用命令<code>sudo pip3 install uwsgi</code>安装<code>uWSGI</code>；接下来，我们需要给<code>uWSGI</code>创建一个链接，执行命令<code>sudo ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi3</code>来创建一个链接，我们就完成了<code>uWSGI</code>安装和设置工作；最后，我们使用命令<code>sudo yum -y install nginx</code>安装<code>Nginx</code>，安装完成后，我们就可以退出远程登录了。<br><a href="http://image.tooltool.club/19858366-b895f48e39acb100.png" data-fancybox="group" data-caption="安装Nginx和uWSGI" class="fancybox"><img alt="安装Nginx和uWSGI" title="安装Nginx和uWSGI" data-src="http://image.tooltool.club/19858366-b895f48e39acb100.png" class="lazyload"></a></li></ul><h2 id="第二步：配置settings-py文件"><a href="#第二步：配置settings-py文件" class="headerlink" title="第二步：配置settings.py文件"></a>第二步：配置settings.py文件</h2><ul><li><p>首先，我们用VS Code打开<code>mysite</code>这个文件夹；然后，打开<code>setiings.py</code>文件进行一些设置。</p></li><li><p>我们要将<code>DEBUG = True</code>修改为<code>DEBUG = False</code>；然后，找到<code>TEMPLATES</code>并将里面的<code>&#39;DIRS&#39;: []</code>修改为<code>&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;),]</code>，并在主目录下创建名为<code>templates</code>的文件夹；最后，我们要在文件的末尾加上两行代码，分别是<code>STATIC_ROOT = os.path.join(BASE_DIR, &#39;../collected_static&#39;)</code>和<code>STATICFILES_DIRS = (os.path.join(BASE_DIR, &#39;static&#39;),)</code>两行代码，并在主目录下创建名为<code>static</code>的文件夹，按<code>Ctrl + S</code>保存对<code>settings.py</code>文件的修改。<br><a href="http://image.tooltool.club/19858366-547d684c44093ff4.png" data-fancybox="group" data-caption="配置settings.py文件" class="fancybox"><img alt="配置settings.py文件" title="配置settings.py文件" data-src="http://image.tooltool.club/19858366-547d684c44093ff4.png" class="lazyload"></a></p></li><li><p>然后，回到终端，登录远程服务器，执行命令<code>cd /home/programs/</code>进入到<code>/home/programs/</code>路径下，然后执行命令<code>sudo mkdir collected_static</code>创建一个名为<code>collected_static</code>的文件夹；最后，我们通过命令<code>cd mysite</code>进入项目主目录，执行命令<code>sudo python3 manage.py collectstatic</code>打包静态文件到<code>collected_static</code>文件夹中，打包完成后退出服务器。<br><a href="http://image.tooltool.club/19858366-651dbb538c03e987.png" data-fancybox="group" data-caption="打包静态文件" class="fancybox"><img alt="打包静态文件" title="打包静态文件" data-src="http://image.tooltool.club/19858366-651dbb538c03e987.png" class="lazyload"></a></p></li></ul><h2 id="第三步：配置uWSGI"><a href="#第三步：配置uWSGI" class="headerlink" title="第三步：配置uWSGI"></a>第三步：配置uWSGI</h2><ul><li>在项目主目录下创建<code>uwsgi.ini</code>文件，然后在<code>uwsgi.ini</code>中写入图示代码，按<code>Ctrl + S</code>保存对<code>uwsgi.ini</code>文件的修改，并在主目录下创建名为<code>uwsgi</code>的文件夹。<br><a href="http://image.tooltool.club/19858366-56669643f7e6bf85.png" data-fancybox="group" data-caption="配置uWSGI" class="fancybox"><img alt="配置uWSGI" title="配置uWSGI" data-src="http://image.tooltool.club/19858366-56669643f7e6bf85.png" class="lazyload"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制以下代码即可</span><br><span class="line">[uwsgi]</span><br><span class="line">socket &#x3D; 127.0.0.1:8080</span><br><span class="line">chdir &#x3D; &#x2F;home&#x2F;programs&#x2F;mysite</span><br><span class="line">module &#x3D; mysite.wsgi</span><br><span class="line">master &#x3D; ture</span><br><span class="line">processes &#x3D; 1</span><br><span class="line">threads &#x3D; 2</span><br><span class="line">max-requests &#x3D; 2000</span><br><span class="line">chmod-socket &#x3D; 664</span><br><span class="line">vacuum &#x3D; ture</span><br><span class="line"></span><br><span class="line">stats &#x3D; %(chdir)&#x2F;uwsgi&#x2F;uwsgi.status</span><br><span class="line">pidfile &#x3D; %(chdir)&#x2F;uwsgi&#x2F;uwsgi.pid</span><br><span class="line">daemonize &#x3D; %(chdir)&#x2F;uwsgi&#x2F;uwsgi.log</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="第四步：配置Nginx"><a href="#第四步：配置Nginx" class="headerlink" title="第四步：配置Nginx"></a>第四步：配置Nginx</h2><ul><li>首先，我们再次登录远程服务器，执行命令<code>sudo vim /etc/nginx/nginx.conf</code>进入<code>nginx.conf</code>配置文件内，先删除<code>server</code>上面的一行代码，然后在修改<code>server</code>内的代码内容即可。<br><a href="http://image.tooltool.club/19858366-be05bd4d84d75ab3.png" data-fancybox="group" data-caption="配置Nginx" class="fancybox"><img alt="配置Nginx" title="配置Nginx" data-src="http://image.tooltool.club/19858366-be05bd4d84d75ab3.png" class="lazyload"></a></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制以下代码即可</span><br><span class="line"> server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                uwsgi_pass 127.0.0.1:8000;</span><br><span class="line">                include &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F;static &#123;</span><br><span class="line">                alias &#x2F;home&#x2F;programs&#x2F;collected_static&#x2F;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 &#x2F;404.html;</span><br><span class="line">            location &#x3D; &#x2F;40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">            location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h2 id="第五步：启动Nginx和uWSGI"><a href="#第五步：启动Nginx和uWSGI" class="headerlink" title="第五步：启动Nginx和uWSGI"></a>第五步：启动Nginx和uWSGI</h2><ul><li>首先，通过指令<code>cd /home/programs/mysite/</code>进入到<code>/home/programs/mysite/</code>路径下。</li><li>然后，执行命令<code>sudo uwsgi3 --ini uwsgi.ini</code>启动<code>uWSGI</code>。</li><li>接下来，执行命令<code>sudo systemctl start nginx</code>启动<code>Nginx</code>。</li><li>最后，我们可以在浏览器中输入我们的<code>公网ip</code>就可以查看我们的项目啦！<br><a href="http://image.tooltool.club/19858366-49289a7131170cff.png" data-fancybox="group" data-caption="启动Nginx和uWSGI" class="fancybox"><img alt="启动Nginx和uWSGI" title="启动Nginx和uWSGI" data-src="http://image.tooltool.club/19858366-49289a7131170cff.png" class="lazyload"></a></li></ul><h2 id="第六步：更新Django项目"><a href="#第六步：更新Django项目" class="headerlink" title="第六步：更新Django项目"></a>第六步：更新Django项目</h2><ul><li>当我们对我们的项目进行更改是，网页内容不会发生变化，此时我们需要重启我们的<code>uWSGI</code>服务。首先，登录远程服务器；然后，通过命令<code>cd /home/programs/mysite/uwsgi</code>进入到<code>/home/programs/mysite/uwsgi</code>路径下；最后，执行命令<code>sudo uwsgi3 --reload uwsgi.pid</code>即可重启我们的<code>uWSGI</code>服务。<br><a href="http://image.tooltool.club/19858366-771db904cdb09e84.png" data-fancybox="group" data-caption="重启uWSGI" class="fancybox"><img alt="重启uWSGI" title="重启uWSGI" data-src="http://image.tooltool.club/19858366-771db904cdb09e84.png" class="lazyload"></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Nginx </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7、配置Django项目——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/7%E3%80%81%E9%85%8D%E7%BD%AEDjango%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/03/08/7%E3%80%81%E9%85%8D%E7%BD%AEDjango%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：安装SFTP"><a href="#第一步：安装SFTP" class="headerlink" title="第一步：安装SFTP"></a>第一步：安装SFTP</h2><ul><li>首先，在桌面新建文件夹<code>mysite</code>，然后在VS Code中打开该文件夹，并按照相应操作安装<code>SFTP</code>，安装完成后，重启VS Code。<br><a href="http://image.tooltool.club/19858366-7f6219ca2ca7cca5.png" data-fancybox="group" data-caption="安装sftp" class="fancybox"><img alt="安装sftp" title="安装sftp" data-src="http://image.tooltool.club/19858366-7f6219ca2ca7cca5.png" class="lazyload"></a></li></ul><h2 id="第二步：修改文件夹权限"><a href="#第二步：修改文件夹权限" class="headerlink" title="第二步：修改文件夹权限"></a>第二步：修改文件夹权限</h2><ul><li>由于，我们使用learn用户对项目文件修改需要root权限，所以我们需要修改项目所在文件夹的访问权限。首先，我们使用learn用户远程登录服务器；然后，通过命令<code>cd /home/programs/</code>进入到<code>/home/programs/</code>路径下，我们可以通过<code>ls -al</code>查看文件的详细信息；最后，我们使用命令<code>sudo chown -R learn mysite</code>修改<code>mysite</code>文件夹及文件夹内所有文件的所有者。<br><a href="http://image.tooltool.club/19858366-1f24abe4f5dda6f8.png" data-fancybox="group" data-caption="修改文件夹权限" class="fancybox"><img alt="修改文件夹权限" title="修改文件夹权限" data-src="http://image.tooltool.club/19858366-1f24abe4f5dda6f8.png" class="lazyload"></a></li></ul><h2 id="第三步：同步本地和服务器"><a href="#第三步：同步本地和服务器" class="headerlink" title="第三步：同步本地和服务器"></a>第三步：同步本地和服务器</h2><ul><li><p>首先，按<code>Ctrl + Shift + P</code>或者在上方<code>View</code>选项中选择<code>Command Palette</code>进入命令面板，然后在命令面板中输入命令<code>SFTP:Config</code>，然后VS Code就会给我们自动正在<code>.vscode</code>文件夹中创建一个<code>sftp.json</code>的文件(如果没有显示的话可以刷新一下)。</p></li><li><p>接下来，我们要对<code>sftp.json</code>文件中的一些键值对进行设置，其中对一些键值也对进行说明，修改完后别忘了按<code>Ctrl + S</code>进行保存一下。<br><a href="http://image.tooltool.club/19858366-10b63eb3eb7b5f6c.png" data-fancybox="group" data-caption="修改sftp.json文件" class="fancybox"><img alt="修改sftp.json文件" title="修改sftp.json文件" data-src="http://image.tooltool.club/19858366-10b63eb3eb7b5f6c.png" class="lazyload"></a></p></li></ul><ul><li><p>键值对<code>&quot;host&quot;</code>后填写的是你服务器的公网ip。</p></li><li><p>键值对<code>&quot;port&quot;</code>后填写的端口号默认为<code>22</code>，但是由于我在之前修改了端口号为<code>12345</code>，所以我填写的端口号为<code>12345</code>。</p></li><li><p>键值对<code>&quot;username&quot;</code>后需要填写的是我们用来登录的用户名。</p></li><li><p>键值对<code>&quot;password&quot;</code>和键值对<code>&quot;privateKeyPath&quot;</code>两个需要自己进行创建，其中键值对<code>&quot;password&quot;</code>后需要填写用户密码，由于密码为明文，所以不是很安全，而键值对<code>&quot;privateKeyPath&quot;</code>后需要填写的是我们之前创建的私钥<code>learnfile</code>的路径，而这两个键值对只要添加一个就可以，也就是密码登录或者私钥登录均可。</p></li><li><p>键值对<code>&quot;ignore&quot;</code>需要自己创建，其后是一个列表，列表中包括一些同步过程中忽视同步的文件和文件夹。例如：<code>.vscode</code>文件夹内保存的使我们的本地配置文件，只需要存在本地即可，不需要从本地同步到服务器；<code>__pycache__</code>文件夹内保存的是python编译后的文件，只需要存在于服务器即可，不需要从服务器同步到本地。</p></li><li><p>键值对<code>&quot;syncOption&quot;</code>需要自己创建，其后是一个字典，字典中我们添加了一个<code>&quot;delete&quot;: true</code>的键值对，意思是，原本服务器为了防止本地误删文件，所以添加文件可以同步到服务器，删除文件无法同步到服务器，添加了此键值对后，删除的文件也可以同步到服务器，使服务器对应的文件也会删除。此键值对是否添加，完全取决于个人意愿。</p></li><li><p>键值对<code>&quot;watcher&quot;</code>需要自己创建，其后也是一个字典，由于每次对文件操作完成后，都需要右键选择同步本地到服务器或者同步服务器到本地，所以我们添加此键值对是为了方便，让系统监视我们所有操作，自动同步本地到服务器或者同步服务器到本地，字典中的默认键值对<code>&quot;autoUpload&quot;: true</code>表示我们修改或者添加文件都会自动同步到服务器上，默认键值对<code>&quot;autoDelete&quot;: false</code>则表示我们删除文件不会自动同步到服务器上，我们可以将<code>false</code>修改为<code>true</code>，当然也可以不修改。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> SFTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6、安装测试Django——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/6%E3%80%81%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95Django/"/>
      <url>/2020/03/08/6%E3%80%81%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95Django/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：安装Django"><a href="#第一步：安装Django" class="headerlink" title="第一步：安装Django"></a>第一步：安装Django</h2><ul><li>首先，我们登录服务器，然后使用<code>pip3</code>来进行安装，每次learn账户使用<code>pip3</code>命令需要<code>sudo</code>以超级管理员身份来执行，执行命令<code>sudo pip3 install django</code>就可以将Django安装成功啦！<a href="http://image.tooltool.club/19858366-ffdc60c552e5bd1c.png" data-fancybox="group" data-caption="安装Django" class="fancybox"><img alt="安装Django" title="安装Django" data-src="http://image.tooltool.club/19858366-ffdc60c552e5bd1c.png" class="lazyload"></a></li></ul><h2 id="第二步：将django-admin添加到环境变量"><a href="#第二步：将django-admin添加到环境变量" class="headerlink" title="第二步：将django-admin添加到环境变量"></a>第二步：将django-admin添加到环境变量</h2><ul><li>我们执行命令<code>sudo ln -s /usr/local/python3/bin/django-admin /usr/bin</code>创建链接，然后我们就可以使用<code>django-admin</code>命令了。<a href="http://image.tooltool.club/19858366-efd3571d08e92c7d.png" data-fancybox="group" data-caption="将django-admin添加到环境变量" class="fancybox"><img alt="将django-admin添加到环境变量" title="将django-admin添加到环境变量" data-src="http://image.tooltool.club/19858366-efd3571d08e92c7d.png" class="lazyload"></a></li></ul><h2 id="第三步：创建Django项目"><a href="#第三步：创建Django项目" class="headerlink" title="第三步：创建Django项目"></a>第三步：创建Django项目</h2><ul><li><p>首先，我们执行命令<code>cd /home/</code>进入到<code>/home/</code>路径下；然后，执行命令<code>sudo mkdir programs</code>创建一个文件夹<code>programs</code>用来存放我们的Django项目，通过命令<code>cd programs</code>进入<code>programs</code>路径下；最后，执行命令<code>sudo django-admin startproject mysite</code>创建Django项目，我们就成功创建了mysite的Django项目。<a href="http://image.tooltool.club/19858366-df5887eb9973b484.png" data-fancybox="group" data-caption="创建Django项目" class="fancybox"><img alt="创建Django项目" title="创建Django项目" data-src="http://image.tooltool.club/19858366-df5887eb9973b484.png" class="lazyload"></a></p></li><li><p>为了方便查看项目的目录结构，我们要用<code>yum</code>来安装一个工具<code>tree</code>，执行命令<code>sudo yum -y install tree</code>进行安装。安装完成后，我们就可以通过<code>tree</code>命令来查看我们项目的目录结构，命令行就会以树状结构显示我们当前文件夹下所有内容以及子文件夹的内容。<a href="http://image.tooltool.club/19858366-1f115d148cd53f03.png" data-fancybox="group" data-caption="安装tree" class="fancybox"><img alt="安装tree" title="安装tree" data-src="http://image.tooltool.club/19858366-1f115d148cd53f03.png" class="lazyload"></a></p></li><li><p>接下来，我们写一个简单地Django项目，测试一下我们安装的Django。首先，我们通过命令<code>cd mysite/mysite/</code>进入到<code>mysite/mysite/</code>路径下；然后，使用命令<code>sudo vim views.py</code>来创建一个<code>views.py</code>文件，并按照图示写入相关内容(其中<code>from</code>和<code>import</code>没有显示出来)；使用命令<code>sudo vim urls.py</code>进入<code>urls.py</code>文件中并修改部分图示内容(其中<code>from</code>和<code>import</code>没有显示出来)；使用命令使用命令<code>sudo vim settings.py</code>进入<code>settings.py</code>文件中，找到<code>ALLOWED_HOSTS = []</code>一行代码，然后修改为<code>ALLOWED_HOSTS = [&#39;localhost&#39;,&#39;你的公网ip&#39;]</code>在找到<code>DATABASES</code>也就是数据库相关的代码修改为如图所示。<br><a href="http://image.tooltool.club/19858366-cd2f0929c4664636.png" data-fancybox="group" data-caption="写一个简单地Django项目" class="fancybox"><img alt="写一个简单地Django项目" title="写一个简单地Django项目" data-src="http://image.tooltool.club/19858366-cd2f0929c4664636.png" class="lazyload"></a><br><a href="https://upload-images.jianshu.io/upload_images/19858366-4b68a48b131ad5b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="views.py文件" class="fancybox"><img alt="views.py文件" title="views.py文件" data-src="https://upload-images.jianshu.io/upload_images/19858366-4b68a48b131ad5b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></a><br><a href="https://upload-images.jianshu.io/upload_images/19858366-edf5866db0d8d148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="urls.py文件" class="fancybox"><img alt="urls.py文件" title="urls.py文件" data-src="https://upload-images.jianshu.io/upload_images/19858366-edf5866db0d8d148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></a><br><a href="https://upload-images.jianshu.io/upload_images/19858366-f149b8064c5cccc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="settings.py文件" class="fancybox"><img alt="settings.py文件" title="settings.py文件" data-src="https://upload-images.jianshu.io/upload_images/19858366-f149b8064c5cccc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></a></p></li><li><p>最后，我们需要通过命令<code>cd ..</code>返回父目录，然后执行命令<code>sudo python3 manage.py migrate</code>进行迁移数据库，迁移完成之后，我们可以通过命令<code>sudo python3 manage.py runserver 0.0.0.0:80</code>启动我们的项目，在浏览器直接输入我们的公网ip就可以查看我们的项目了，最后，可以通过<code>Ctrl + C</code>退出我们的项目。<br><a href="http://image.tooltool.club/19858366-315d1a74867ce497.png" data-fancybox="group" data-caption="启动Django项目" class="fancybox"><img alt="启动Django项目" title="启动Django项目" data-src="http://image.tooltool.club/19858366-315d1a74867ce497.png" class="lazyload"></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5、安装python3——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/5%E3%80%81%E5%AE%89%E8%A3%85python3/"/>
      <url>/2020/03/08/5%E3%80%81%E5%AE%89%E8%A3%85python3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：查看python版本"><a href="#第一步：查看python版本" class="headerlink" title="第一步：查看python版本"></a>第一步：查看python版本</h2><ul><li>首先，我们远程登录服务器，由于CentOS本身是带有python的，所以我们可以通过命令<code>python --version</code>来查看当前CentOS中python的版本。<br><a href="http://image.tooltool.club/19858366-8dae1d3481c01940.png" data-fancybox="group" data-caption="查看python版本" class="fancybox"><img alt="查看python版本" title="查看python版本" data-src="http://image.tooltool.club/19858366-8dae1d3481c01940.png" class="lazyload"></a></li></ul><h2 id="第二步：下载并安装python3"><a href="#第二步：下载并安装python3" class="headerlink" title="第二步：下载并安装python3"></a>第二步：下载并安装python3</h2><ul><li><p>首先，我们需要使用命令<code>mkdir py3</code>在主目录下创建<code>py3</code>的文件夹，用来存放python3，然后，我们使用命令<code>cd py3</code>进入到<code>py3</code>文件夹路径中，接下来，在正式下载安装python3之前，我们还需要安装python的依赖环境，执行命令<code>sudo yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel zlib-devel libffi-devel MySQL-python mysql-devel</code>就可以安装，由于要安装的依赖环境比较多，所以大家要细心一点不要落下任何一个，不然后期安装python3过程中会出现一些错误。<a href="http://image.tooltool.club/19858366-d101e519474fb147.png" data-fancybox="group" data-caption="安装python的依赖环境" class="fancybox"><img alt="安装python的依赖环境" title="安装python的依赖环境" data-src="http://image.tooltool.club/19858366-d101e519474fb147.png" class="lazyload"></a></p></li><li><p>接下来，我们来正式安装python，我们首先进入python的官网<a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">python的官网</a>，在这个网站中我们可以看到python的所有版本，我们找到我们需要下载的版本号。然后我们点击进入该版本的详情页，我们找到<a href="https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz" target="_blank" rel="noopener">Python-3.x.x.tgz</a>，然后单击鼠标右键选择<code>复制链接地址</code>。<br><a href="http://image.tooltool.club/19858366-2dbe2dea9c523439.png" data-fancybox="group" data-caption="复制下载链接地址" class="fancybox"><img alt="复制下载链接地址" title="复制下载链接地址" data-src="http://image.tooltool.club/19858366-2dbe2dea9c523439.png" class="lazyload"></a></p></li></ul><ul><li><p>然后，我们在<code>py3</code>路径下执行命令<code>wget 链接地址</code>就可以下载python3了，紧接着我们对下载的python3进行解压，执行解压命令<code>tar -zxvf Python-3.8.1.tgz</code>就可以进行解压，解压完成文件夹中就会多了一个文件夹<code>Python-3.8.1</code>。<a href="http://image.tooltool.club/19858366-275514593363e4d9.png" data-fancybox="group" data-caption="下载python3" class="fancybox"><img alt="下载python3" title="下载python3" data-src="http://image.tooltool.club/19858366-275514593363e4d9.png" class="lazyload"></a></p></li><li><p>接下来，我们要安装python3，所以我们先执行命令<code>cd /usr/local</code>进入<code>/usr/local</code>路径下，然后执行命令<code>sudo mkdir python3</code>创建一个名为<code>python3</code>的文件夹，然后通过命令<code>cd ~/py3/Python-3.8.1</code>回到路径<code>~/py3/Python-3.8.1</code>下。最后，执行命令<code>./configure --prefix=/usr/local/python3/</code>修改安装路径为<code>/usr/local/python3/</code>。<a href="http://image.tooltool.club/19858366-d9c35dc624013265.png" data-fancybox="group" data-caption="修改安装路径" class="fancybox"><img alt="修改安装路径" title="修改安装路径" data-src="http://image.tooltool.club/19858366-d9c35dc624013265.png" class="lazyload"></a></p></li><li><p>最后，我们先执行命令<code>make</code>对python3进行编译，再执行命令<code>sudo make install</code>来安装python3，到此python3就安装完成了。</p></li></ul><h2 id="第三步：添加python3和pip到环境变量"><a href="#第三步：添加python3和pip到环境变量" class="headerlink" title="第三步：添加python3和pip到环境变量"></a>第三步：添加python3和pip到环境变量</h2><ul><li><p>首先，我们通过命令<code>cd /usr/local/python3/</code>进入到路径<code>/usr/local/python3/</code>下，然后执行命令<code>sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3</code>创建链接，到此为止，我们就可知直接使用<code>python3</code>的命令进入<code>python3</code>环境下，接下来我们可以用命令<code>sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code>创建链接，然后就可以使用<code>pip3</code>命令进行安装了，我们可以顺便使用<code>pip3</code>执行命令<code>sudo pip3 install mysqlclient</code>安装一下<code>mysqlclient</code>。<a href="http://image.tooltool.club/19858366-52223e0d7e30fcc0.png" data-fancybox="group" data-caption="添加python3和pip到环境变量" class="fancybox"><img alt="添加python3和pip到环境变量" title="添加python3和pip到环境变量" data-src="http://image.tooltool.club/19858366-52223e0d7e30fcc0.png" class="lazyload"></a></p></li><li><p>最后，我们可以通过<code>cd ~</code>回到主目录下，把主目录下的<code>py3</code>整个文件夹通过命令<code>sudo rm -rf py3</code>删除掉就可以了。<a href="http://image.tooltool.club/19858366-7d4eb5cbf4446f5f.png" data-fancybox="group" data-caption="删除py3文件夹" class="fancybox"><img alt="删除py3文件夹" title="删除py3文件夹" data-src="http://image.tooltool.club/19858366-7d4eb5cbf4446f5f.png" class="lazyload"></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4、安装数据库——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/4%E3%80%81%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/03/08/4%E3%80%81%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：安装mariadb和mariadb-server"><a href="#第一步：安装mariadb和mariadb-server" class="headerlink" title="第一步：安装mariadb和mariadb-server"></a>第一步：安装mariadb和mariadb-server</h2><ul><li>首先登陆远程服务器，使用<code>yum</code>安装<code>mariadb</code>和<code>mariadb-server</code>，执行命令<code>sudo yum -y install mariadb mariadb-server</code>来安装<code>mariadb</code>和<code>mariadb-server</code>，然后输入密码就可以直接安装了。<a href="http://image.tooltool.club/19858366-63c663ad0ede48cc.png" data-fancybox="group" data-caption="安装mariadb和mariadb-server" class="fancybox"><img alt="安装mariadb和mariadb-server" title="安装mariadb和mariadb-server" data-src="http://image.tooltool.club/19858366-63c663ad0ede48cc.png" class="lazyload"></a></li></ul><h2 id="第二步：设置数据库服务"><a href="#第二步：设置数据库服务" class="headerlink" title="第二步：设置数据库服务"></a>第二步：设置数据库服务</h2><ul><li><p>首先，执行命令<code>sudo systemctl start mariadb</code>就可以成功启动数据库啦。</p></li><li><p>然后，执行命令<code>sudo systemctl enable mariadb.service</code>就设置完成数据库开机自动启动了。<a href="http://image.tooltool.club/19858366-cdd6b55d6209ffe0.png" data-fancybox="group" data-caption="启动数据库并设置自动启动" class="fancybox"><img alt="启动数据库并设置自动启动" title="启动数据库并设置自动启动" data-src="http://image.tooltool.club/19858366-cdd6b55d6209ffe0.png" class="lazyload"></a></p></li><li><p>接下来，我们要设置数据库root用户的密码，执行命令<code>mysql_secure_installation</code>后，系统会提示我们输入当前root用户的密码，由于我们还没有设置密码，可以回车跳过，然后提示我们是否设置root用户密码，按<code>y</code>确认，最后输入两次新密码然后一路回车就完成了(注意：本步设置的是数据库root用户密码，与服务器root用户无关)。<a href="http://image.tooltool.club/19858366-4e2486bd12ce0d5f.png" data-fancybox="group" data-caption="设置数据库root用户密码" class="fancybox"><img alt="设置数据库root用户密码" title="设置数据库root用户密码" data-src="http://image.tooltool.club/19858366-4e2486bd12ce0d5f.png" class="lazyload"></a></p></li><li><p>最后，我们就可以进入我们的数据库了，通过命令<code>mysql -u root -p</code>然后输入数据库root用户的密码我们就可以进入我们的数据库了。接下来显示的是数据库的命令行模式，我们可以输入命令<code>create database mysite;</code>(别忘了分号)，然后我们就创建了mysite的数据库，最后我们可以通过命令<code>exit;</code>退出数据库。<a href="http://image.tooltool.club/19858366-7ab199b2327b2ca3.png" data-fancybox="group" data-caption="进入数据库" class="fancybox"><img alt="进入数据库" title="进入数据库" data-src="http://image.tooltool.club/19858366-7ab199b2327b2ca3.png" class="lazyload"></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、设置防火墙和端口——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/3%E3%80%81%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%92%8C%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/03/08/3%E3%80%81%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%92%8C%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="①设置防火墙"><a href="#①设置防火墙" class="headerlink" title="①设置防火墙"></a>①设置防火墙</h1><h2 id="第一步：更新yum功能"><a href="#第一步：更新yum功能" class="headerlink" title="第一步：更新yum功能"></a>第一步：更新yum功能</h2><ul><li><p>远程登录服务器，执行命令<code>yum update</code>可以进行更新，但是此时登录的是learn账户，会显示没有root权限，所以我们执行命令<code>sudo yum update</code>进行更新，其中<code>sudo</code>的意思是后面的命令会以超级管理员的身份执行，然后输入learn账户的密码就可以进行更新，但执行过程中会提示我们是否继续更新，输入<code>y</code>即可继续更新。</p></li><li><p>我们也可以通过命令<code>sudo yum -y update</code>进行更新，<code>-y</code>表示如果更新过程中需要我们输入<code>y</code>继续的话，系统会自动输入，不用我们手动输入。<a href="http://image.tooltool.club/19858366-e5222c114bc360de.png" data-fancybox="group" data-caption="更新yum功能" class="fancybox"><img alt="更新yum功能" title="更新yum功能" data-src="http://image.tooltool.club/19858366-e5222c114bc360de.png" class="lazyload"></a></p></li></ul><h2 id="第二步：使用yum安装插件并启动服务"><a href="#第二步：使用yum安装插件并启动服务" class="headerlink" title="第二步：使用yum安装插件并启动服务"></a>第二步：使用yum安装插件并启动服务</h2><ul><li>learn用户使用<code>yum</code>安装插件都需要添加<code>sudo</code>以超级管理员身份执行命令，执行命令<code>sudo yum install -y cronie yum-cron</code>安装<code>cronie</code>和<code>yum-cron</code>插件。<a href="http://image.tooltool.club/19858366-70b9bfaa6b2cf6d8.png" data-fancybox="group" data-caption="使用yum安装插件" class="fancybox"><img alt="使用yum安装插件" title="使用yum安装插件" data-src="http://image.tooltool.club/19858366-70b9bfaa6b2cf6d8.png" class="lazyload"></a></li></ul><ul><li><p>learn用户使用<code>vim</code>安装插件都需要添加<code>sudo</code>以超级管理员身份执行命令，执行命令<code>sudo vim /etc/yum/yum-cron.conf</code>打开配置文件<code>yum-cron.conf</code>，并将配置文件中的<code>apply_updates = no</code>改为<code>apply_updates = yes</code>，目的是打开自动更新功能。<a href="http://image.tooltool.club/19858366-2d29510ae15baec2.png" data-fancybox="group" data-caption="修改配置文件yum-cron.conf" class="fancybox"><img alt="修改配置文件yum-cron.conf" title="修改配置文件yum-cron.conf" data-src="http://image.tooltool.club/19858366-2d29510ae15baec2.png" class="lazyload"></a></p></li><li><p>执行命令<code>sudo systemctl start crond</code>和命令 <code>sudo systemctl start yum-cron</code>启动<code>crond</code>和<code>yum-cron</code>服务。<a href="http://image.tooltool.club/19858366-69c6831f793327fb.png" data-fancybox="group" data-caption="启动crond和yum-cron服务" class="fancybox"><img alt="启动crond和yum-cron服务" title="启动crond和yum-cron服务" data-src="http://image.tooltool.club/19858366-69c6831f793327fb.png" class="lazyload"></a></p></li></ul><h2 id="第三步：使用yum安装并启动防火墙服务"><a href="#第三步：使用yum安装并启动防火墙服务" class="headerlink" title="第三步：使用yum安装并启动防火墙服务"></a>第三步：使用yum安装并启动防火墙服务</h2><ul><li><p>执行命令<code>sudo yum install -y firewalld</code>安装防火墙，如果已经安装它会显示已安装并且是最新版本无需任何处理。</p></li><li><p>然后执行命令<code>sudo systemctl start firewalld.service</code>启动防火墙服务，并通过命令<code>sudo firewall-cmd --list-all</code>来查看防火墙状态。(关于服务器的更多操作命令，可以查看我之前的文章：<a href="https://www.jianshu.com/p/3fd584cadfef" target="_blank" rel="noopener">《CentOS7使用firewalld打开关闭防火墙与端口》</a>)<a href="http://image.tooltool.club/19858366-f3dbd5f72c8766bc.png" data-fancybox="group" data-caption="安装并启动防火墙服务" class="fancybox"><img alt="安装并启动防火墙服务" title="安装并启动防火墙服务" data-src="http://image.tooltool.club/19858366-f3dbd5f72c8766bc.png" class="lazyload"></a></p></li></ul><h1 id="②设置端口"><a href="#②设置端口" class="headerlink" title="②设置端口"></a>②设置端口</h1><h2 id="第一步-修改ssh相关的配置文件"><a href="#第一步-修改ssh相关的配置文件" class="headerlink" title="第一步:修改ssh相关的配置文件"></a>第一步:修改ssh相关的配置文件</h2><ul><li><p>执行命令<code>sudo vim /etc/ssh/sshd_config</code>打开配置文件<code>sshd_config</code>，找到<code>#Port 22</code>所在的一行，并修改为<code>Port 12345</code>(此处端口可以修改为<code>1024-65535</code>之间的端口均可)，最后保存并退出。<a href="http://image.tooltool.club/19858366-4b2ea121cf7fc016.png" data-fancybox="group" data-caption="修改sshd_config配置文件" class="fancybox"><img alt="修改sshd_config配置文件" title="修改sshd_config配置文件" data-src="http://image.tooltool.club/19858366-4b2ea121cf7fc016.png" class="lazyload"></a></p></li><li><p>执行命令<code>sudo cp /usr/lib/firewalld/services/ssh.xml /etc/firewalld/services/</code>将防火墙中关于ssh的配置文件拷贝出来，然后执行<code>sudo vim /etc/firewalld/services/ssh.xml</code>打开配置文件<code>ssh.xml</code>，然后找到 <code>port=&quot;22&quot;</code>并修改为 <code>port=&quot;12345&quot;</code>，最后保存并退出。<a href="http://image.tooltool.club/19858366-a9601dbc68bfa5c3.png" data-fancybox="group" data-caption="修改ssh.xml配置文件" class="fancybox"><img alt="修改ssh.xml配置文件" title="修改ssh.xml配置文件" data-src="http://image.tooltool.club/19858366-a9601dbc68bfa5c3.png" class="lazyload"></a></p></li></ul><h2 id="第二步-修改安全组中的配置规则"><a href="#第二步-修改安全组中的配置规则" class="headerlink" title="第二步:修改安全组中的配置规则"></a>第二步:修改安全组中的配置规则</h2><p><a href="http://image.tooltool.club/19858366-7e129f68ab0653c2.png" data-fancybox="group" data-caption="安全组的配置规则" class="fancybox"><img alt="安全组的配置规则" title="安全组的配置规则" data-src="http://image.tooltool.club/19858366-7e129f68ab0653c2.png" class="lazyload"></a></p><p><a href="http://image.tooltool.club/19858366-2aac5cfbe5c96573.png" data-fancybox="group" data-caption="添加安全组规则" class="fancybox"><img alt="添加安全组规则" title="添加安全组规则" data-src="http://image.tooltool.club/19858366-2aac5cfbe5c96573.png" class="lazyload"></a></p><h2 id="第三步：重启防火墙服务和sshd服务"><a href="#第三步：重启防火墙服务和sshd服务" class="headerlink" title="第三步：重启防火墙服务和sshd服务"></a>第三步：重启防火墙服务和sshd服务</h2><ul><li><p>重启防火墙需要在浏览器，因为重启防火墙和ssh服务，这两个服务重启会导致与本地断开连接。<a href="http://image.tooltool.club/19858366-5a0f69624c5ced50.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="http://image.tooltool.club/19858366-5a0f69624c5ced50.png" class="lazyload"></a></p></li><li><p>首先登陆learn用户，然后输入命令<code>sudo systemctl restart sshd.service</code>重启sshd服务，输入命令<code>sudo systemctl restart firewalld.service</code>重启防火墙服务。最后输入<code>exit</code>命令执行退出登录。<a href="http://image.tooltool.club/19858366-dedc4b700ca249e8.png" data-fancybox="group" data-caption="重启防火墙服务和sshd服务" class="fancybox"><img alt="重启防火墙服务和sshd服务" title="重启防火墙服务和sshd服务" data-src="http://image.tooltool.club/19858366-dedc4b700ca249e8.png" class="lazyload"></a></p></li></ul><h2 id="第四步：修改本地config配置文件"><a href="#第四步：修改本地config配置文件" class="headerlink" title="第四步：修改本地config配置文件"></a>第四步：修改本地config配置文件</h2><ul><li><p>首先打开电脑终端PowerShell，输入<code>cd .ssh</code>进入<code>.ssh</code>路径下。Mac用户可直接输入命令<code>vim config</code>修改<code>config</code>配置文件，将端口号改为<code>12345</code>；Windows用户则直接输入命令<code>notepad config</code>修改<code>config</code>配置文件，将端口号改为<code>12345</code>。<a href="http://image.tooltool.club/19858366-ae160e2bc17eab76.png" data-fancybox="group" data-caption="修改本地config配置文件" class="fancybox"><img alt="修改本地config配置文件" title="修改本地config配置文件" data-src="http://image.tooltool.club/19858366-ae160e2bc17eab76.png" class="lazyload"></a></p></li><li><p>最后，我们又可以通过命令<code>ssh learn</code>登录远程服务器啦！<a href="http://image.tooltool.club/19858366-f8faadd1bbe7d55b.png" data-fancybox="group" data-caption="重新登录测试" class="fancybox"><img alt="重新登录测试" title="重新登录测试" data-src="http://image.tooltool.club/19858366-f8faadd1bbe7d55b.png" class="lazyload"></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、设置登录证书——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/2%E3%80%81%E8%AE%BE%E7%BD%AE%E7%99%BB%E5%BD%95%E8%AF%81%E4%B9%A6/"/>
      <url>/2020/03/08/2%E3%80%81%E8%AE%BE%E7%BD%AE%E7%99%BB%E5%BD%95%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：创建证书-公钥文件和私钥文件"><a href="#第一步：创建证书-公钥文件和私钥文件" class="headerlink" title="第一步：创建证书(公钥文件和私钥文件)"></a>第一步：创建证书(公钥文件和私钥文件)</h2><ul><li><p>直接打开PowerShell(不用登录ssh)，输入命令<code>ls</code>(如果为Mac用户，输入<code>ls</code>仅显示一般文件，需要输入<code>ls -a</code>才能显示隐藏文件)，我们会发现存在文件<code>.ssh</code>，如果没有<code>.ssh</code>文件则需要通过命令<code>mkdir .ssh</code>创建.ssh文件，如果存在<code>.ssh</code>文件则忽略该操作。<a href="http://image.tooltool.club/19858366-efd6ed52a0a43d80.png" data-fancybox="group" data-caption="查看.ssh文件" class="fancybox"><img alt="查看.ssh文件" title="查看.ssh文件" data-src="http://image.tooltool.club/19858366-efd6ed52a0a43d80.png" class="lazyload"></a></p></li><li><p>首先使用命令<code>cd .ssh</code>进入<code>.ssh</code>路径下，使用命令<code>ssh-keygen -t rsa -C learn -f learnfile</code>生成证书，之后所有提示输入内容直接回车跳过，最后通过<code>ls</code>查看文件夹下的文件会发现多了<code>learnfile</code>(私钥)和<code>learnfile.pub</code>(公钥)两个文件。<a href="http://image.tooltool.club/19858366-ce312b758b11787c.png" data-fancybox="group" data-caption="创建证书" class="fancybox"><img alt="创建证书" title="创建证书" data-src="http://image.tooltool.club/19858366-ce312b758b11787c.png" class="lazyload"></a></p></li></ul><h2 id="第二步：将公钥文件-learnfile-pub-上传到服务器"><a href="#第二步：将公钥文件-learnfile-pub-上传到服务器" class="headerlink" title="第二步：将公钥文件(learnfile.pub)上传到服务器"></a>第二步：将公钥文件(learnfile.pub)上传到服务器</h2><ul><li>仍保持在<code>.ssh</code>路径下，执行命令<code>scp learnfile.pub learn@你的公网ip:.</code>(不要忘记冒号和点)，然后按照提示输入learn用户的密码，等待进度达到百分之百即表示上传完成。<a href="http://image.tooltool.club/19858366-cb428dd52602ea7d.png" data-fancybox="group" data-caption="将公钥文件上传到服务器" class="fancybox"><img alt="将公钥文件上传到服务器" title="将公钥文件上传到服务器" data-src="http://image.tooltool.club/19858366-cb428dd52602ea7d.png" class="lazyload"></a></li></ul><h2 id="第三步-登录服务器进行设置"><a href="#第三步-登录服务器进行设置" class="headerlink" title="第三步:登录服务器进行设置"></a>第三步:登录服务器进行设置</h2><ul><li><p>首先使用learn用户登录服务器，<code>ls</code>命令查看文件会发现刚才上传的learnfile.pub文件，然后使用<code>ls -a</code>查看所有文件，发现没有<code>.ssh</code>文件。</p></li><li><p>通过命令<code>mkdir .ssh</code>创建<code>.ssh</code>文件夹，再次查看所有文件就会发现<code>.ssh</code>文件了，然后通过命令<code>cd .ssh</code>进入<code>.ssh</code>文件路径下，通过命令<code>touch authorized_keys</code>创建<code>authorized_keys</code>(文件名称一定不也打错，图中是错误的)文件。</p></li><li><p>通过命令<code>cd ..</code>返回.ssh的父文件夹，执行命令<code>cat learnfile.pub &gt;&gt; ~/.ssh/authorized_keys</code>将<code>learnfile.pub</code>写入<code>authorized_keys</code>文件中，写完之后我们可以通过命令 <code>rm learnfile.pub</code>删除<code>learnfile.pub</code>(公钥文件)。 <a href="http://image.tooltool.club/19858366-6084cd87ace694e3.png" data-fancybox="group" data-caption="登录服务器进行设置" class="fancybox"><img alt="登录服务器进行设置" title="登录服务器进行设置" data-src="http://image.tooltool.club/19858366-6084cd87ace694e3.png" class="lazyload"></a></p></li></ul><h2 id="第四步-修改证书文件夹的权限"><a href="#第四步-修改证书文件夹的权限" class="headerlink" title="第四步:修改证书文件夹的权限"></a>第四步:修改证书文件夹的权限</h2><ul><li><p>通过命令<code>ls -al</code>查看文件的详细信息，会发现<code>.ssh</code>文件的访问权限为drwxr-xr-x，其中d表示这是个文件夹，剩下的9个字符可以分成三组rwx/r-x/r-x，每三个一组。第一组表示对于该文件夹的所有者也就是learn，可读可写可执行；第二组表示对于adminuser用户组内所有的用户可读不可写可执行；第三组表示对于除了该文件夹的所有者和adminuser用户组内所有的用户的其他用户可读不可写可执行。</p></li><li><p>我们接下来的目的是修改<code>.ssh</code>文件夹和<code>authorrized_keys</code>文件的访问权限仅对文件所有者有权限。</p></li><li><p>执行命令<code>chmod 700 .ssh</code>修改.ssh文件夹的访问权限，通过命令<code>cd .ssh</code>进入<code>.ssh</code>文件路径下，再通过命令<code>ls -al</code>查看文件的详细信息，执行命令<code>chmod 600 authorrized_keys</code>修改<code>authorrized_keys</code>文件的访问权限，最后退出服务器登录。<a href="http://image.tooltool.club/19858366-be70dc74533c99ad.png" data-fancybox="group" data-caption="修改证书文件夹的权限" class="fancybox"><img alt="修改证书文件夹的权限" title="修改证书文件夹的权限" data-src="http://image.tooltool.club/19858366-be70dc74533c99ad.png" class="lazyload"></a></p></li></ul><h2 id="第五步-创建配置文件"><a href="#第五步-创建配置文件" class="headerlink" title="第五步:创建配置文件"></a>第五步:创建配置文件</h2><ul><li><p>退出登录后，首先我们可以通过命令<code>rm learnfile.pub</code>删除<code>learnfile.pub</code>(公钥文件)，然后创建配置文件<code>config</code>文件。</p></li><li><p>Mac用户可以直接通过命令<code>vim config</code>就可以创建并进入<code>config</code>文件，并在config文件中写入以下内容。<a href="http://image.tooltool.club/19858366-ecc5ea8eb212a9bf.png" data-fancybox="group" data-caption="config文件中写入的内容" class="fancybox"><img alt="config文件中写入的内容" title="config文件中写入的内容" data-src="http://image.tooltool.club/19858366-ecc5ea8eb212a9bf.png" class="lazyload"></a></p></li><li><p>Windows用户可以在桌面新建文本文档<code>config.txt</code>并写入以上内容。然后在PoverShell中，通过命令<code>cd Desktop</code>进入到桌面路径下，<code>ls</code>便会发现<code>config.txt</code>文件，执行命令<code>mv config.txt ~\.ssh</code>便可以将文件移动到<code>.ssh</code>文件夹下。<a href="http://image.tooltool.club/19858366-92c784a88ccee2e0.png" data-fancybox="group" data-caption="创建配置文件" class="fancybox"><img alt="创建配置文件" title="创建配置文件" data-src="http://image.tooltool.club/19858366-92c784a88ccee2e0.png" class="lazyload"></a></p></li><li><p>Windows用户然后通过<code>cd ..</code>返回到父文件夹，再通过命令<code>cd .ssh</code>进入<code>.ssh</code>路径下，会发现存在文件<code>config.txt</code>，再通过命令<code>mv config.txt config</code>就可以将<code>config.txt</code>文件保存为<code>config</code>文件。<a href="http://image.tooltool.club/19858366-b41caeede3f98f0f.png" data-fancybox="group" data-caption="创建配置文件" class="fancybox"><img alt="创建配置文件" title="创建配置文件" data-src="http://image.tooltool.club/19858366-b41caeede3f98f0f.png" class="lazyload"></a></p></li><li><p>最后我们就直接可以通过命令<code>ssh learn</code>来登录我们的远程服务器了，而且不需要输入密码。<a href="http://image.tooltool.club/19858366-f8faadd1bbe7d55b.png" data-fancybox="group" data-caption="登录示例图" class="fancybox"><img alt="登录示例图" title="登录示例图" data-src="http://image.tooltool.club/19858366-f8faadd1bbe7d55b.png" class="lazyload"></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> ssh </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、设置用户和组——Django项目部署到阿里云服务器</title>
      <link href="/2020/03/08/1%E3%80%81%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/"/>
      <url>/2020/03/08/1%E3%80%81%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一步：登录远程服务器"><a href="#第一步：登录远程服务器" class="headerlink" title="第一步：登录远程服务器"></a>第一步：登录远程服务器</h2><h5 id="方法一：在浏览器进行登录"><a href="#方法一：在浏览器进行登录" class="headerlink" title="方法一：在浏览器进行登录"></a>方法一：在浏览器进行登录</h5><ul><li>在实例列表中找到相应的服务器，然后在远程连接中选择VNC打开管理终端。<a href="http://image.tooltool.club/19858366-f441fcc66c428d7e.png" data-fancybox="group" data-caption="实例列表" class="fancybox"><img alt="实例列表" title="实例列表" data-src="http://image.tooltool.club/19858366-f441fcc66c428d7e.png" class="lazyload"></a></li><li>打开管理终端后，记住初始密码，并输入初始密码进入管理终端，输入账号root再输入密码即可以root用户的身份登录远程服务器，最后可以使用命令<code>exit</code>退出登录。<a href="http://image.tooltool.club/19858366-155a9e3744457cbd.png" data-fancybox="group" data-caption="浏览器登录远程服务器" class="fancybox"><img alt="浏览器登录远程服务器" title="浏览器登录远程服务器" data-src="http://image.tooltool.club/19858366-155a9e3744457cbd.png" class="lazyload"></a></li></ul><h5 id="方法二：在本地进行登录-需要查看电脑是否安装OpenSSH客户端"><a href="#方法二：在本地进行登录-需要查看电脑是否安装OpenSSH客户端" class="headerlink" title="方法二：在本地进行登录(需要查看电脑是否安装OpenSSH客户端)"></a>方法二：在本地进行登录(需要<a href="https://www.jianshu.com/p/efa0e0d71637" target="_blank" rel="noopener">查看电脑是否安装OpenSSH客户端</a>)</h5><ul><li>按住键盘<code>win + R</code>键然后输入<code>powershell</code>进入PowerShell输入<code>ssh root@你的公网ip</code>然后输入密码即可以root用户的身份登录远程服务器。<a href="http://image.tooltool.club/19858366-82ef2059df2bdd48.png" data-fancybox="group" data-caption="本地登录远程服务器" class="fancybox"><img alt="本地登录远程服务器" title="本地登录远程服务器" data-src="http://image.tooltool.club/19858366-82ef2059df2bdd48.png" class="lazyload"></a></li></ul><h2 id="第二步：创建用户和组"><a href="#第二步：创建用户和组" class="headerlink" title="第二步：创建用户和组"></a>第二步：创建用户和组</h2><ul><li>通过命令<code>groupadd adminuser</code>创建adminuser组。</li><li>然后通过命令<code>useradd learn -g adminuser</code>创建用户learn并将用户learn添加至adminuser组中。</li><li>最后通过命令<code>passwd learn</code>进行用户learn密码的设置，输入两遍密码后，密码便设置完成。</li><li>最后使用命令<code>exit</code>退出登录，然后登录新的用户进行登录。<a href="http://image.tooltool.club/19858366-6d3a61059bc68b95.png" data-fancybox="group" data-caption="创建用户和组" class="fancybox"><img alt="创建用户和组" title="创建用户和组" data-src="http://image.tooltool.club/19858366-6d3a61059bc68b95.png" class="lazyload"></a></li></ul><h2 id="第三步：修改新用户的权限-使用root用户操作"><a href="#第三步：修改新用户的权限-使用root用户操作" class="headerlink" title="第三步：修改新用户的权限(使用root用户操作)"></a>第三步：修改新用户的权限(使用root用户操作)</h2><ul><li><p>首先输入命令<code>cd /etc</code>切换路径至<code>/etc</code>路径下，并通过ls命令显示该路径文件夹下的所有内容，然后通过命令<code>vim sudoers</code>进入<code>sudoers</code>文件。<a href="http://image.tooltool.club/19858366-ff06ef6da5c32d66.png" data-fancybox="group" data-caption="/etc/路径下文件" class="fancybox"><img alt="/etc/路径下文件" title="/etc/路径下文件" data-src="http://image.tooltool.club/19858366-ff06ef6da5c32d66.png" class="lazyload"></a></p></li><li><p>进去<code>sudoers</code>文件后找到root一行，按i键进入编辑模式，在root的下一行添加<code>learn  ALL=(ALL)  ALL</code>这一行代码，然后按<code>Esc</code>退出编辑模式。<a href="http://image.tooltool.club/19858366-e33742d82a06ae35.png" data-fancybox="group" data-caption="sudoers文件" class="fancybox"><img alt="sudoers文件" title="sudoers文件" data-src="http://image.tooltool.club/19858366-e33742d82a06ae35.png" class="lazyload"></a></p></li><li><p>并按<code>Shift + ；</code>键，并输入<code>wq!</code>按回车键即可强制保存并退出文件。<a href="http://image.tooltool.club/19858366-26fcdeb05dec5d1f.png" data-fancybox="group" data-caption="强制保存并退出文件" class="fancybox"><img alt="强制保存并退出文件" title="强制保存并退出文件" data-src="http://image.tooltool.club/19858366-26fcdeb05dec5d1f.png" class="lazyload"></a></p></li></ul><h2 id="第四步：禁止root账号进行ssh远程登录"><a href="#第四步：禁止root账号进行ssh远程登录" class="headerlink" title="第四步：禁止root账号进行ssh远程登录"></a>第四步：禁止root账号进行ssh远程登录</h2><ul><li><p>首先输入命令<code>cd /etc/ssh</code>切换路径至<code>/etc/ssh</code>路径下，并通过<code>ls</code>命令显示该路径文件夹下的所有内容，然后通过命令<code>vim sshd_config</code>进入<code>sshd_config</code>文件。<a href="http://image.tooltool.club/19858366-2613b41264c589f7.png" data-fancybox="group" data-caption="/ssh/路径下文件" class="fancybox"><img alt="/ssh/路径下文件" title="/ssh/路径下文件" data-src="http://image.tooltool.club/19858366-2613b41264c589f7.png" class="lazyload"></a></p></li><li><p>进去<code>sshd_config</code>文件后找到<code>#PermitRootLogin yes</code>一行代码，按i键进入编辑模式，并将本行代码修改为<code>PermitRootLogin no</code>，注意别忘了去掉#号，然后按<code>Esc</code>退出编辑模式。<a href="http://image.tooltool.club/19858366-565288addb51576d.png" data-fancybox="group" data-caption="sshd_config文件" class="fancybox"><img alt="sshd_config文件" title="sshd_config文件" data-src="http://image.tooltool.club/19858366-565288addb51576d.png" class="lazyload"></a></p></li><li><p>并按<code>Shift + ；</code>键，并输入<code>wq</code>按回车键即可保存并退出文件。</p></li><li><p>修改完配置文件后，需要通过命令<code>systemctl restart sshd.service</code>重启sshd服务，然后<code>exit</code>退出登录，重新使用root账号登录会发现登陆请求被拒绝，让我们重新输入密码。重新输入密码后请求仍会被拒绝，所以我们可以使用<code>Ctrl + C</code>键终止当前命令。<a href="http://image.tooltool.club/19858366-d17d9b9790869391.png" data-fancybox="group" data-caption="重启配置文件并测试" class="fancybox"><img alt="重启配置文件并测试" title="重启配置文件并测试" data-src="http://image.tooltool.club/19858366-d17d9b9790869391.png" class="lazyload"></a></p></li><li><p>此时，我们便成功禁止了root账号进行ssh远程登录，但我们仍可以通过我们刚才创建的用户learn进行登录操作。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/07/hello-world/"/>
      <url>/2020/03/07/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h1 id="Hexo-Butterfly"><a href="#Hexo-Butterfly" class="headerlink" title="Hexo Butterfly"></a>Hexo Butterfly</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Clean-static-files"><a href="#Clean-static-files" class="headerlink" title="Clean static files"></a>Clean static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></div><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h2><h3 id="Post-Front-matter-demo"><a href="#Post-Front-matter-demo" class="headerlink" title="Post Front-matter demo"></a>Post Front-matter demo</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img: （除非特定需要，可以不寫）</span><br><span class="line">comments  是否顯示評論（除非設置false,可以不寫）</span><br><span class="line">cover:  縮略圖</span><br><span class="line">toc:  是否顯示toc （除非特定文章設置，可以不寫）</span><br><span class="line">toc_number: 是否顯示toc數字 （除非特定文章設置，可以不寫）</span><br><span class="line">copyright: 是否顯示版權 （除非特定文章設置，可以不寫）</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">hide:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Markdowm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
